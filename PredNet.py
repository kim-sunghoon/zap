import torch
import torch.nn as nn
import matplotlib.pyplot as plt
import Config as cfg
import torch.nn.functional as F
import numpy as np
from collections import OrderedDict


class ZAP(nn.Module):
    def __init__(self, planes, mask_type=5):
        super(ZAP, self).__init__()

        self._disabled = False
        self._train = True
        self._stats = []
        self.planes = planes
        """
        Original DW convolution, filters == 3 x 3 x planes, bias = planes --> parmas == 10 x planes
        customized convolution kernels --> mode 1, 2, 4, 8
        mode x for entire filter and kaming_normal examination
        """
        if cfg.filter_mode == 0:
            self.conv1 = nn.Conv2d(planes, planes, kernel_size=3, padding=1, stride=1, groups=planes)
            self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, padding=1, stride=1, groups=planes)

        elif cfg.filter_mode == 1:
            self.weight1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            nn.init.kaiming_normal_(self.weight1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2, mode='fan_out', nonlinearity='relu')

        elif cfg.filter_mode == 2:
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            self.weight2_1 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')

        elif cfg.filter_mode == 4:
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            self.weight2_1 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')

        elif cfg.filter_mode == 8:
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            self.weight2_1 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_5 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_6 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_7 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_8 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_8, mode='fan_out', nonlinearity='relu')

            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_8, mode='fan_out', nonlinearity='relu')

        elif cfg.filter_mode == 16:
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            self.weight2_1 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_5 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_6 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_7 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_8 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_9 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_10 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_11 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_12 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_13 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_14 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_15 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_16 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_16, mode='fan_out', nonlinearity='relu')

            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_16, mode='fan_out', nonlinearity='relu')

        elif cfg.filter_mode == 32:
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            self.weight2_1 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_5 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_6 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_7 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_8 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_9 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_10 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_11 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_12 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_13 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_14 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_15 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_16 = torch.empty((1,1, 3,3), requires_grad = True).to("cuda")
            self.weight2_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_32, mode='fan_out', nonlinearity='relu')

            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_32, mode='fan_out', nonlinearity='relu')

        elif (cfg.filter_mode=='x' and self.planes==192):
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_33 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_34 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_35 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_36 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_37 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_38 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_39 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_40 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_41 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_42 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_43 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_44 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_45 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_46 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_47 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_48 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_49 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_50 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_51 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_52 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_53 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_54 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_55 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_56 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_57 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_58 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_59 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_60 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_61 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_62 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_63 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_64 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_65 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_66 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_67 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_68 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_69 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_70 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_71 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_72 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_73 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_74 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_75 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_76 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_77 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_78 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_79 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_80 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_81 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_82 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_83 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_84 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_85 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_86 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_87 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_88 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_89 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_90 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_91 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_92 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_93 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_94 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_95 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_96 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_97 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_98 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_99 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_100 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_101 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_102 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_103 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_104 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_105 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_106 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_107 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_108 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_109 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_110 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_111 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_112 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_113 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_114 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_115 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_116 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_117 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_118 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_119 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_120 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_121 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_122 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_123 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_124 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_125 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_126 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_127 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_128 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_129 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_130 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_131 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_132 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_133 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_134 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_135 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_136 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_137 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_138 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_139 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_140 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_141 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_142 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_143 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_144 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_145 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_146 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_147 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_148 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_149 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_150 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_151 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_152 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_153 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_154 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_155 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_156 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_157 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_158 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_159 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_160 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_161 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_162 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_163 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_164 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_165 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_166 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_167 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_168 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_169 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_170 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_171 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_172 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_173 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_174 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_175 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_176 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_177 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_178 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_179 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_180 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_181 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_182 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_183 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_184 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_185 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_186 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_187 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_188 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_189 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_190 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_191 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_192 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_32, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_33, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_34, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_35, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_36, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_37, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_38, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_39, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_40, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_41, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_42, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_43, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_44, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_45, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_46, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_47, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_48, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_49, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_50, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_51, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_52, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_53, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_54, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_55, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_56, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_57, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_58, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_59, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_60, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_61, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_62, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_63, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_64, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_65, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_66, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_67, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_68, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_69, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_70, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_71, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_72, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_73, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_74, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_75, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_76, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_77, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_78, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_79, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_80, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_81, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_82, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_83, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_84, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_85, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_86, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_87, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_88, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_89, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_90, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_91, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_92, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_93, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_94, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_95, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_96, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_97, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_98, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_99, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_100, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_101, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_102, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_103, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_104, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_105, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_106, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_107, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_108, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_109, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_110, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_111, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_112, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_113, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_114, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_115, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_116, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_117, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_118, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_119, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_120, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_121, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_122, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_123, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_124, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_125, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_126, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_127, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_128, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_129, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_130, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_131, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_132, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_133, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_134, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_135, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_136, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_137, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_138, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_139, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_140, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_141, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_142, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_143, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_144, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_145, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_146, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_147, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_148, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_149, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_150, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_151, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_152, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_153, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_154, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_155, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_156, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_157, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_158, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_159, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_160, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_161, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_162, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_163, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_164, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_165, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_166, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_167, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_168, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_169, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_170, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_171, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_172, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_173, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_174, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_175, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_176, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_177, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_178, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_179, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_180, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_181, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_182, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_183, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_184, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_185, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_186, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_187, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_188, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_189, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_190, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_191, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_192, mode='fan_out', nonlinearity='relu')

            self.weight2_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_33 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_34 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_35 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_36 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_37 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_38 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_39 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_40 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_41 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_42 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_43 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_44 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_45 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_46 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_47 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_48 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_49 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_50 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_51 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_52 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_53 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_54 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_55 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_56 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_57 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_58 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_59 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_60 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_61 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_62 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_63 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_64 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_65 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_66 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_67 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_68 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_69 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_70 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_71 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_72 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_73 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_74 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_75 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_76 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_77 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_78 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_79 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_80 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_81 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_82 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_83 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_84 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_85 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_86 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_87 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_88 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_89 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_90 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_91 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_92 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_93 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_94 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_95 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_96 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_97 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_98 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_99 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_100 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_101 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_102 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_103 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_104 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_105 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_106 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_107 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_108 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_109 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_110 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_111 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_112 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_113 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_114 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_115 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_116 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_117 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_118 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_119 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_120 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_121 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_122 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_123 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_124 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_125 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_126 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_127 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_128 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_129 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_130 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_131 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_132 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_133 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_134 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_135 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_136 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_137 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_138 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_139 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_140 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_141 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_142 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_143 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_144 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_145 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_146 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_147 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_148 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_149 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_150 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_151 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_152 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_153 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_154 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_155 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_156 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_157 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_158 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_159 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_160 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_161 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_162 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_163 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_164 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_165 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_166 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_167 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_168 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_169 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_170 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_171 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_172 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_173 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_174 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_175 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_176 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_177 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_178 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_179 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_180 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_181 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_182 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_183 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_184 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_185 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_186 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_187 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_188 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_189 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_190 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_191 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_192 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_32, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_33, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_34, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_35, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_36, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_37, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_38, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_39, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_40, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_41, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_42, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_43, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_44, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_45, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_46, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_47, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_48, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_49, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_50, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_51, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_52, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_53, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_54, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_55, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_56, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_57, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_58, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_59, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_60, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_61, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_62, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_63, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_64, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_65, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_66, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_67, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_68, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_69, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_70, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_71, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_72, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_73, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_74, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_75, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_76, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_77, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_78, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_79, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_80, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_81, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_82, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_83, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_84, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_85, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_86, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_87, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_88, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_89, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_90, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_91, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_92, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_93, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_94, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_95, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_96, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_97, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_98, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_99, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_100, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_101, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_102, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_103, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_104, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_105, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_106, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_107, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_108, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_109, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_110, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_111, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_112, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_113, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_114, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_115, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_116, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_117, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_118, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_119, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_120, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_121, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_122, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_123, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_124, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_125, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_126, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_127, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_128, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_129, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_130, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_131, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_132, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_133, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_134, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_135, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_136, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_137, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_138, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_139, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_140, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_141, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_142, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_143, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_144, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_145, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_146, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_147, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_148, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_149, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_150, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_151, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_152, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_153, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_154, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_155, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_156, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_157, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_158, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_159, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_160, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_161, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_162, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_163, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_164, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_165, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_166, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_167, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_168, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_169, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_170, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_171, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_172, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_173, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_174, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_175, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_176, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_177, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_178, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_179, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_180, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_181, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_182, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_183, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_184, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_185, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_186, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_187, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_188, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_189, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_190, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_191, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_192, mode='fan_out', nonlinearity='relu')

        elif (cfg.filter_mode=='x' and self.planes==256):
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_33 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_34 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_35 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_36 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_37 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_38 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_39 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_40 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_41 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_42 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_43 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_44 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_45 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_46 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_47 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_48 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_49 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_50 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_51 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_52 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_53 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_54 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_55 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_56 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_57 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_58 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_59 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_60 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_61 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_62 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_63 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_64 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_65 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_66 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_67 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_68 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_69 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_70 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_71 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_72 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_73 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_74 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_75 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_76 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_77 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_78 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_79 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_80 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_81 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_82 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_83 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_84 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_85 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_86 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_87 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_88 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_89 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_90 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_91 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_92 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_93 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_94 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_95 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_96 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_97 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_98 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_99 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_100 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_101 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_102 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_103 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_104 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_105 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_106 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_107 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_108 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_109 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_110 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_111 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_112 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_113 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_114 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_115 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_116 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_117 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_118 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_119 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_120 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_121 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_122 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_123 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_124 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_125 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_126 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_127 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_128 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_129 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_130 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_131 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_132 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_133 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_134 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_135 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_136 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_137 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_138 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_139 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_140 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_141 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_142 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_143 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_144 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_145 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_146 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_147 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_148 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_149 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_150 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_151 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_152 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_153 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_154 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_155 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_156 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_157 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_158 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_159 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_160 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_161 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_162 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_163 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_164 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_165 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_166 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_167 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_168 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_169 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_170 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_171 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_172 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_173 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_174 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_175 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_176 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_177 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_178 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_179 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_180 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_181 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_182 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_183 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_184 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_185 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_186 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_187 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_188 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_189 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_190 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_191 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_192 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_193 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_194 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_195 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_196 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_197 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_198 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_199 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_200 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_201 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_202 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_203 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_204 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_205 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_206 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_207 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_208 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_209 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_210 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_211 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_212 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_213 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_214 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_215 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_216 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_217 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_218 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_219 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_220 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_221 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_222 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_223 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_224 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_225 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_226 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_227 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_228 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_229 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_230 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_231 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_232 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_233 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_234 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_235 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_236 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_237 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_238 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_239 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_240 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_241 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_242 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_243 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_244 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_245 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_246 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_247 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_248 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_249 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_250 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_251 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_252 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_253 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_254 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_255 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_256 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_32, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_33, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_34, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_35, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_36, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_37, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_38, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_39, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_40, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_41, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_42, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_43, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_44, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_45, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_46, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_47, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_48, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_49, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_50, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_51, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_52, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_53, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_54, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_55, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_56, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_57, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_58, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_59, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_60, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_61, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_62, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_63, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_64, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_65, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_66, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_67, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_68, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_69, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_70, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_71, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_72, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_73, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_74, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_75, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_76, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_77, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_78, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_79, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_80, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_81, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_82, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_83, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_84, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_85, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_86, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_87, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_88, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_89, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_90, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_91, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_92, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_93, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_94, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_95, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_96, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_97, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_98, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_99, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_100, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_101, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_102, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_103, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_104, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_105, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_106, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_107, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_108, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_109, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_110, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_111, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_112, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_113, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_114, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_115, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_116, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_117, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_118, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_119, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_120, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_121, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_122, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_123, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_124, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_125, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_126, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_127, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_128, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_129, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_130, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_131, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_132, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_133, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_134, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_135, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_136, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_137, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_138, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_139, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_140, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_141, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_142, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_143, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_144, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_145, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_146, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_147, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_148, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_149, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_150, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_151, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_152, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_153, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_154, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_155, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_156, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_157, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_158, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_159, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_160, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_161, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_162, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_163, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_164, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_165, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_166, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_167, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_168, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_169, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_170, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_171, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_172, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_173, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_174, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_175, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_176, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_177, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_178, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_179, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_180, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_181, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_182, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_183, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_184, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_185, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_186, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_187, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_188, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_189, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_190, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_191, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_192, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_193, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_194, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_195, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_196, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_197, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_198, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_199, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_200, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_201, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_202, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_203, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_204, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_205, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_206, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_207, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_208, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_209, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_210, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_211, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_212, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_213, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_214, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_215, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_216, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_217, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_218, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_219, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_220, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_221, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_222, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_223, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_224, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_225, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_226, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_227, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_228, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_229, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_230, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_231, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_232, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_233, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_234, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_235, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_236, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_237, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_238, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_239, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_240, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_241, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_242, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_243, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_244, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_245, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_246, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_247, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_248, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_249, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_250, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_251, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_252, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_253, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_254, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_255, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_256, mode='fan_out', nonlinearity='relu')

            self.weight2_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_33 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_34 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_35 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_36 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_37 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_38 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_39 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_40 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_41 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_42 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_43 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_44 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_45 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_46 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_47 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_48 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_49 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_50 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_51 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_52 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_53 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_54 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_55 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_56 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_57 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_58 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_59 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_60 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_61 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_62 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_63 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_64 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_65 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_66 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_67 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_68 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_69 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_70 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_71 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_72 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_73 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_74 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_75 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_76 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_77 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_78 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_79 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_80 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_81 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_82 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_83 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_84 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_85 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_86 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_87 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_88 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_89 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_90 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_91 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_92 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_93 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_94 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_95 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_96 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_97 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_98 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_99 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_100 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_101 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_102 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_103 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_104 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_105 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_106 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_107 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_108 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_109 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_110 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_111 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_112 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_113 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_114 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_115 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_116 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_117 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_118 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_119 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_120 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_121 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_122 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_123 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_124 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_125 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_126 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_127 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_128 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_129 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_130 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_131 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_132 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_133 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_134 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_135 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_136 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_137 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_138 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_139 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_140 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_141 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_142 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_143 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_144 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_145 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_146 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_147 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_148 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_149 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_150 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_151 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_152 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_153 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_154 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_155 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_156 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_157 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_158 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_159 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_160 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_161 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_162 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_163 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_164 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_165 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_166 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_167 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_168 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_169 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_170 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_171 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_172 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_173 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_174 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_175 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_176 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_177 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_178 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_179 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_180 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_181 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_182 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_183 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_184 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_185 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_186 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_187 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_188 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_189 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_190 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_191 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_192 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_193 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_194 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_195 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_196 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_197 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_198 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_199 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_200 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_201 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_202 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_203 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_204 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_205 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_206 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_207 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_208 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_209 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_210 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_211 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_212 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_213 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_214 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_215 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_216 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_217 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_218 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_219 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_220 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_221 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_222 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_223 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_224 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_225 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_226 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_227 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_228 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_229 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_230 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_231 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_232 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_233 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_234 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_235 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_236 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_237 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_238 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_239 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_240 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_241 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_242 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_243 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_244 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_245 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_246 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_247 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_248 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_249 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_250 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_251 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_252 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_253 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_254 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_255 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_256 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_32, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_33, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_34, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_35, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_36, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_37, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_38, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_39, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_40, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_41, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_42, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_43, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_44, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_45, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_46, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_47, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_48, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_49, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_50, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_51, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_52, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_53, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_54, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_55, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_56, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_57, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_58, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_59, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_60, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_61, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_62, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_63, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_64, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_65, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_66, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_67, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_68, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_69, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_70, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_71, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_72, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_73, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_74, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_75, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_76, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_77, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_78, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_79, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_80, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_81, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_82, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_83, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_84, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_85, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_86, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_87, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_88, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_89, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_90, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_91, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_92, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_93, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_94, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_95, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_96, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_97, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_98, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_99, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_100, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_101, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_102, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_103, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_104, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_105, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_106, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_107, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_108, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_109, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_110, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_111, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_112, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_113, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_114, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_115, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_116, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_117, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_118, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_119, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_120, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_121, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_122, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_123, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_124, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_125, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_126, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_127, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_128, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_129, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_130, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_131, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_132, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_133, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_134, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_135, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_136, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_137, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_138, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_139, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_140, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_141, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_142, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_143, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_144, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_145, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_146, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_147, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_148, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_149, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_150, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_151, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_152, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_153, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_154, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_155, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_156, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_157, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_158, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_159, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_160, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_161, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_162, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_163, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_164, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_165, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_166, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_167, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_168, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_169, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_170, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_171, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_172, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_173, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_174, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_175, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_176, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_177, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_178, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_179, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_180, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_181, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_182, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_183, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_184, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_185, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_186, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_187, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_188, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_189, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_190, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_191, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_192, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_193, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_194, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_195, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_196, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_197, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_198, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_199, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_200, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_201, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_202, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_203, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_204, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_205, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_206, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_207, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_208, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_209, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_210, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_211, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_212, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_213, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_214, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_215, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_216, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_217, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_218, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_219, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_220, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_221, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_222, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_223, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_224, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_225, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_226, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_227, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_228, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_229, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_230, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_231, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_232, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_233, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_234, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_235, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_236, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_237, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_238, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_239, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_240, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_241, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_242, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_243, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_244, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_245, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_246, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_247, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_248, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_249, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_250, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_251, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_252, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_253, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_254, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_255, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_256, mode='fan_out', nonlinearity='relu')


        elif (cfg.filter_mode=='x' and self.planes==384):
            self.weight1_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_33 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_34 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_35 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_36 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_37 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_38 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_39 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_40 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_41 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_42 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_43 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_44 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_45 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_46 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_47 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_48 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_49 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_50 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_51 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_52 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_53 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_54 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_55 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_56 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_57 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_58 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_59 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_60 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_61 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_62 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_63 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_64 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_65 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_66 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_67 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_68 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_69 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_70 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_71 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_72 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_73 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_74 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_75 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_76 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_77 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_78 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_79 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_80 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_81 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_82 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_83 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_84 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_85 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_86 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_87 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_88 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_89 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_90 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_91 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_92 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_93 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_94 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_95 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_96 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_97 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_98 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_99 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_100 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_101 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_102 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_103 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_104 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_105 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_106 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_107 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_108 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_109 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_110 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_111 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_112 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_113 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_114 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_115 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_116 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_117 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_118 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_119 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_120 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_121 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_122 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_123 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_124 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_125 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_126 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_127 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_128 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_129 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_130 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_131 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_132 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_133 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_134 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_135 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_136 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_137 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_138 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_139 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_140 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_141 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_142 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_143 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_144 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_145 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_146 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_147 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_148 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_149 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_150 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_151 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_152 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_153 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_154 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_155 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_156 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_157 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_158 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_159 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_160 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_161 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_162 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_163 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_164 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_165 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_166 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_167 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_168 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_169 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_170 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_171 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_172 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_173 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_174 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_175 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_176 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_177 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_178 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_179 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_180 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_181 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_182 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_183 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_184 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_185 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_186 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_187 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_188 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_189 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_190 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_191 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_192 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_193 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_194 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_195 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_196 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_197 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_198 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_199 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_200 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_201 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_202 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_203 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_204 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_205 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_206 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_207 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_208 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_209 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_210 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_211 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_212 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_213 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_214 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_215 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_216 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_217 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_218 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_219 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_220 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_221 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_222 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_223 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_224 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_225 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_226 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_227 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_228 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_229 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_230 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_231 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_232 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_233 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_234 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_235 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_236 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_237 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_238 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_239 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_240 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_241 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_242 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_243 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_244 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_245 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_246 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_247 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_248 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_249 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_250 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_251 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_252 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_253 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_254 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_255 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_256 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_257 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_258 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_259 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_260 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_261 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_262 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_263 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_264 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_265 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_266 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_267 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_268 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_269 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_270 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_271 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_272 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_273 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_274 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_275 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_276 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_277 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_278 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_279 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_280 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_281 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_282 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_283 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_284 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_285 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_286 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_287 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_288 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_289 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_290 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_291 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_292 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_293 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_294 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_295 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_296 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_297 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_298 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_299 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_300 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_301 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_302 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_303 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_304 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_305 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_306 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_307 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_308 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_309 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_310 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_311 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_312 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_313 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_314 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_315 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_316 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_317 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_318 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_319 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_320 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_321 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_322 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_323 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_324 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_325 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_326 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_327 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_328 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_329 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_330 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_331 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_332 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_333 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_334 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_335 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_336 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_337 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_338 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_339 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_340 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_341 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_342 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_343 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_344 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_345 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_346 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_347 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_348 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_349 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_350 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_351 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_352 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_353 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_354 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_355 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_356 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_357 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_358 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_359 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_360 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_361 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_362 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_363 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_364 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_365 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_366 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_367 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_368 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_369 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_370 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_371 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_372 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_373 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_374 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_375 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_376 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_377 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_378 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_379 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_380 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_381 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_382 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_383 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight1_384 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight1_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_32, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_33, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_34, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_35, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_36, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_37, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_38, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_39, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_40, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_41, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_42, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_43, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_44, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_45, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_46, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_47, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_48, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_49, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_50, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_51, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_52, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_53, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_54, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_55, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_56, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_57, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_58, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_59, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_60, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_61, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_62, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_63, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_64, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_65, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_66, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_67, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_68, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_69, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_70, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_71, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_72, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_73, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_74, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_75, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_76, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_77, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_78, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_79, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_80, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_81, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_82, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_83, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_84, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_85, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_86, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_87, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_88, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_89, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_90, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_91, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_92, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_93, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_94, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_95, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_96, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_97, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_98, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_99, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_100, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_101, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_102, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_103, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_104, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_105, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_106, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_107, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_108, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_109, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_110, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_111, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_112, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_113, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_114, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_115, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_116, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_117, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_118, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_119, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_120, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_121, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_122, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_123, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_124, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_125, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_126, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_127, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_128, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_129, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_130, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_131, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_132, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_133, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_134, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_135, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_136, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_137, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_138, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_139, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_140, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_141, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_142, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_143, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_144, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_145, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_146, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_147, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_148, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_149, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_150, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_151, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_152, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_153, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_154, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_155, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_156, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_157, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_158, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_159, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_160, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_161, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_162, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_163, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_164, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_165, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_166, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_167, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_168, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_169, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_170, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_171, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_172, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_173, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_174, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_175, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_176, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_177, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_178, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_179, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_180, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_181, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_182, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_183, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_184, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_185, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_186, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_187, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_188, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_189, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_190, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_191, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_192, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_193, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_194, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_195, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_196, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_197, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_198, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_199, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_200, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_201, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_202, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_203, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_204, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_205, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_206, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_207, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_208, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_209, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_210, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_211, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_212, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_213, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_214, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_215, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_216, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_217, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_218, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_219, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_220, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_221, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_222, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_223, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_224, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_225, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_226, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_227, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_228, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_229, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_230, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_231, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_232, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_233, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_234, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_235, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_236, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_237, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_238, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_239, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_240, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_241, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_242, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_243, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_244, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_245, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_246, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_247, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_248, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_249, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_250, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_251, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_252, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_253, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_254, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_255, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_256, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_257, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_258, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_259, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_260, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_261, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_262, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_263, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_264, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_265, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_266, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_267, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_268, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_269, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_270, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_271, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_272, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_273, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_274, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_275, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_276, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_277, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_278, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_279, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_280, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_281, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_282, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_283, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_284, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_285, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_286, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_287, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_288, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_289, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_290, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_291, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_292, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_293, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_294, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_295, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_296, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_297, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_298, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_299, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_300, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_301, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_302, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_303, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_304, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_305, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_306, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_307, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_308, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_309, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_310, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_311, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_312, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_313, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_314, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_315, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_316, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_317, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_318, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_319, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_320, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_321, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_322, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_323, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_324, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_325, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_326, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_327, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_328, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_329, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_330, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_331, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_332, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_333, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_334, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_335, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_336, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_337, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_338, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_339, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_340, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_341, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_342, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_343, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_344, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_345, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_346, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_347, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_348, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_349, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_350, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_351, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_352, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_353, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_354, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_355, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_356, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_357, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_358, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_359, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_360, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_361, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_362, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_363, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_364, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_365, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_366, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_367, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_368, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_369, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_370, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_371, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_372, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_373, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_374, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_375, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_376, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_377, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_378, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_379, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_380, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_381, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_382, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_383, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight1_384, mode='fan_out', nonlinearity='relu')

            self.weight2_1 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_2 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_3 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_4 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_5 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_6 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_7 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_8 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_9 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_10 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_11 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_12 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_13 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_14 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_15 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_16 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_17 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_18 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_19 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_20 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_21 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_22 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_23 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_24 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_25 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_26 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_27 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_28 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_29 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_30 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_31 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_32 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_33 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_34 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_35 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_36 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_37 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_38 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_39 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_40 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_41 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_42 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_43 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_44 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_45 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_46 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_47 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_48 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_49 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_50 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_51 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_52 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_53 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_54 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_55 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_56 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_57 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_58 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_59 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_60 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_61 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_62 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_63 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_64 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_65 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_66 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_67 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_68 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_69 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_70 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_71 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_72 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_73 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_74 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_75 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_76 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_77 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_78 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_79 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_80 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_81 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_82 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_83 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_84 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_85 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_86 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_87 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_88 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_89 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_90 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_91 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_92 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_93 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_94 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_95 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_96 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_97 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_98 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_99 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_100 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_101 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_102 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_103 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_104 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_105 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_106 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_107 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_108 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_109 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_110 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_111 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_112 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_113 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_114 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_115 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_116 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_117 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_118 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_119 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_120 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_121 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_122 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_123 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_124 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_125 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_126 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_127 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_128 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_129 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_130 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_131 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_132 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_133 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_134 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_135 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_136 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_137 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_138 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_139 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_140 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_141 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_142 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_143 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_144 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_145 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_146 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_147 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_148 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_149 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_150 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_151 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_152 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_153 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_154 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_155 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_156 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_157 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_158 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_159 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_160 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_161 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_162 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_163 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_164 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_165 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_166 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_167 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_168 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_169 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_170 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_171 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_172 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_173 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_174 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_175 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_176 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_177 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_178 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_179 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_180 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_181 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_182 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_183 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_184 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_185 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_186 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_187 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_188 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_189 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_190 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_191 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_192 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_193 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_194 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_195 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_196 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_197 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_198 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_199 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_200 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_201 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_202 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_203 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_204 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_205 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_206 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_207 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_208 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_209 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_210 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_211 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_212 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_213 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_214 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_215 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_216 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_217 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_218 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_219 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_220 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_221 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_222 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_223 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_224 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_225 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_226 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_227 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_228 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_229 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_230 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_231 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_232 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_233 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_234 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_235 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_236 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_237 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_238 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_239 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_240 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_241 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_242 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_243 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_244 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_245 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_246 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_247 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_248 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_249 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_250 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_251 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_252 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_253 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_254 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_255 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_256 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_257 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_258 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_259 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_260 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_261 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_262 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_263 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_264 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_265 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_266 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_267 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_268 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_269 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_270 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_271 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_272 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_273 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_274 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_275 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_276 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_277 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_278 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_279 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_280 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_281 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_282 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_283 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_284 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_285 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_286 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_287 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_288 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_289 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_290 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_291 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_292 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_293 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_294 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_295 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_296 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_297 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_298 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_299 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_300 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_301 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_302 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_303 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_304 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_305 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_306 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_307 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_308 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_309 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_310 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_311 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_312 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_313 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_314 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_315 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_316 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_317 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_318 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_319 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_320 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_321 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_322 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_323 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_324 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_325 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_326 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_327 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_328 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_329 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_330 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_331 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_332 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_333 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_334 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_335 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_336 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_337 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_338 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_339 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_340 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_341 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_342 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_343 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_344 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_345 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_346 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_347 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_348 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_349 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_350 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_351 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_352 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_353 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_354 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_355 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_356 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_357 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_358 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_359 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_360 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_361 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_362 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_363 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_364 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_365 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_366 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_367 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_368 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_369 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_370 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_371 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_372 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_373 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_374 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_375 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_376 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_377 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_378 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_379 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_380 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_381 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_382 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_383 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")
            self.weight2_384 = torch.empty((1,1,3,3), requires_grad = True).to("cuda")

            nn.init.kaiming_normal_(self.weight2_1, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_2, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_3, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_4, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_5, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_6, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_7, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_8, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_9, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_10, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_11, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_12, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_13, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_14, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_15, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_16, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_17, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_18, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_19, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_20, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_21, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_22, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_23, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_24, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_25, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_26, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_27, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_28, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_29, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_30, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_31, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_32, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_33, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_34, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_35, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_36, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_37, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_38, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_39, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_40, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_41, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_42, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_43, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_44, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_45, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_46, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_47, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_48, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_49, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_50, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_51, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_52, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_53, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_54, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_55, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_56, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_57, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_58, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_59, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_60, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_61, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_62, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_63, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_64, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_65, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_66, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_67, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_68, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_69, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_70, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_71, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_72, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_73, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_74, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_75, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_76, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_77, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_78, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_79, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_80, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_81, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_82, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_83, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_84, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_85, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_86, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_87, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_88, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_89, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_90, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_91, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_92, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_93, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_94, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_95, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_96, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_97, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_98, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_99, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_100, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_101, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_102, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_103, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_104, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_105, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_106, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_107, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_108, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_109, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_110, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_111, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_112, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_113, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_114, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_115, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_116, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_117, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_118, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_119, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_120, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_121, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_122, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_123, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_124, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_125, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_126, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_127, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_128, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_129, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_130, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_131, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_132, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_133, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_134, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_135, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_136, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_137, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_138, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_139, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_140, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_141, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_142, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_143, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_144, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_145, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_146, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_147, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_148, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_149, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_150, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_151, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_152, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_153, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_154, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_155, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_156, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_157, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_158, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_159, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_160, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_161, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_162, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_163, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_164, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_165, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_166, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_167, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_168, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_169, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_170, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_171, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_172, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_173, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_174, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_175, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_176, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_177, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_178, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_179, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_180, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_181, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_182, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_183, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_184, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_185, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_186, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_187, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_188, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_189, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_190, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_191, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_192, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_193, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_194, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_195, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_196, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_197, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_198, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_199, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_200, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_201, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_202, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_203, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_204, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_205, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_206, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_207, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_208, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_209, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_210, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_211, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_212, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_213, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_214, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_215, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_216, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_217, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_218, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_219, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_220, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_221, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_222, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_223, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_224, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_225, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_226, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_227, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_228, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_229, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_230, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_231, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_232, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_233, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_234, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_235, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_236, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_237, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_238, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_239, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_240, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_241, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_242, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_243, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_244, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_245, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_246, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_247, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_248, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_249, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_250, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_251, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_252, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_253, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_254, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_255, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_256, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_257, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_258, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_259, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_260, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_261, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_262, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_263, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_264, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_265, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_266, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_267, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_268, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_269, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_270, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_271, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_272, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_273, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_274, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_275, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_276, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_277, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_278, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_279, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_280, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_281, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_282, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_283, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_284, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_285, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_286, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_287, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_288, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_289, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_290, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_291, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_292, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_293, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_294, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_295, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_296, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_297, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_298, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_299, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_300, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_301, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_302, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_303, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_304, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_305, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_306, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_307, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_308, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_309, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_310, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_311, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_312, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_313, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_314, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_315, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_316, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_317, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_318, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_319, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_320, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_321, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_322, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_323, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_324, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_325, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_326, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_327, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_328, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_329, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_330, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_331, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_332, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_333, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_334, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_335, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_336, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_337, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_338, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_339, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_340, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_341, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_342, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_343, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_344, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_345, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_346, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_347, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_348, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_349, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_350, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_351, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_352, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_353, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_354, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_355, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_356, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_357, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_358, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_359, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_360, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_361, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_362, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_363, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_364, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_365, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_366, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_367, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_368, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_369, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_370, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_371, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_372, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_373, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_374, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_375, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_376, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_377, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_378, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_379, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_380, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_381, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_382, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_383, mode='fan_out', nonlinearity='relu')
            nn.init.kaiming_normal_(self.weight2_384, mode='fan_out', nonlinearity='relu')

        elif cfg.filter_mode not in [0,1,2,4,8,16,32, 'x']:
            raise NotImplementedError


        self.bn1 = nn.BatchNorm2d(planes)
        self.bn2 = nn.BatchNorm2d(planes)

        self.mask_type = mask_type
        self.mask = None
        self.mask_c = None
        self.threshold = 0

        self.x_orig = None
        self.x_pred = None

        self.stats = OrderedDict()
        self.stats_hist = OrderedDict()
        self.reset_stats()

    def forward(self, x):
        self.x_orig = x.clone().detach() if self._train is True else None

        if self._disabled is True:
            return x

        # One-time mask creation, assuming the maximal batch size is the one from the configuration
        self._create_mask(x)
        pre_mask = self.mask[0:x.shape[0], 0:x.shape[1], 0:x.shape[2], 0:x.shape[3]]
        pre_mask_c = self.mask_c[0:x.shape[0], 0:x.shape[1], 0:x.shape[2], 0:x.shape[3]]

        # Masked input, i.e., "calculated" only partial ofm elements
        x_pred_mask = torch.mul(x, pre_mask)

        """
        ZAP's Original DW Convolution &&
        custimized convolution kernel
        """
        if cfg.filter_mode == 0:
            x_pred_mask = self.conv1(x_pred_mask)
            x_pred_mask = self.bn0(x_pred_mask)
            x_pred_mask = F.relu(x_pred_mask)

            x_pred_mask = self.conv2(x_pred_mask)
            x_pred_mask = self.bn2(x_pred_mask)

        elif cfg.filter_mode == 1:
            out1 = None
            out2 = None
            for i in range(0, self.planes, cfg.filter_mode):
                if i == 0:
                    out1 = F.conv2d(x[:, i:i+cfg.filter_mode,:,:], self.weight1, stride=1, padding=1, groups=cfg.filter_mode)
                else:
                    temp_out = F.conv2d(x[:, i:i+cfg.filter_mode,:,:], self.weight1, stride=1, padding=1, groups=cfg.filter_mode)
                    out1 = torch.cat(([out1, temp_out]), dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            #  print(out1.size())

            for i in range(0, self.planes, cfg.filter_mode):
                if i == 0:
                    out2 = F.conv2d(out1[:, i:i+cfg.filter_mode,:,:],   self.weight2, stride=1, padding=1, groups=cfg.filter_mode)
                else:
                    temp_out = F.conv2d(out1[:, i:i+cfg.filter_mode,:,:], self.weight2, stride=1, padding=1, groups=cfg.filter_mode)
                    out2 = torch.cat(([out2, temp_out]), dim=1)

            x_pred_mask = self.bn2(out2)

        elif cfg.filter_mode == 1:
            out1 = None
            out2 = None
            out1_1 = None
            out1_2 = None
            out2_1 = None
            out2_2 = None
            for i in range(0, self.planes, cfg.filter_mode):
                out1_1 = F.conv2d(x[:, i:i+1,:,:],   self.weight1_1, stride=1, padding=1, groups=1)
                out1_2 = F.conv2d(x[:, i+1:i+2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
                if i == 0:
                    out1 = torch.cat([out1_1, out1_2], dim=1)
                else:
                    out1 = torch.cat(([out1, out1_1, out1_2]), dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            #  print("out1 size: {}".format(out1.size()))

            for i in range(0, self.planes, cfg.filter_mode):
                out2_1 = F.conv2d(out1[:, i:i+1,:,:],   self.weight2_1, stride=1, padding=1, groups=1)
                out2_2 = F.conv2d(out1[:, i+1:i+2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
                if i == 0:
                    out2 = torch.cat([out2_1, out2_2], dim=1)
                else:
                    out2 = torch.cat(([out2, out2_1, out2_2]), dim=1)

            #  print("out2 size: {}".format(out2.size()))
            x_pred_mask = self.bn2(out2)

        elif cfg.filter_mode == 4:
            out1 = None
            out2 = None

            out1_1 = None
            out1_2 = None
            out1_3 = None
            out1_4 = None

            out2_1 = None
            out2_2 = None
            out2_3 = None
            out2_4 = None

            for i in range(0, self.planes, cfg.filter_mode):
                out1_1 = F.conv2d(x[:, i:i+1,:,:],   self.weight1_1, stride=1, padding=1, groups=1)
                out1_2 = F.conv2d(x[:, i+1:i+2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
                out1_3 = F.conv2d(x[:, i+2:i+3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
                out1_4 = F.conv2d(x[:, i+3:i+4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
                if i == 0:
                    out1 = torch.cat([out1_1, out1_2, out1_3, out1_4], dim=1)
                else:
                    out1 = torch.cat(([out1, out1_1, out1_2, out1_3, out1_4]), dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            #  print("out1 size: {}".format(out1.size()))

            for i in range(-1, self.planes, cfg.filter_mode):
                out2_1 = F.conv2d(out1[:, i:i+1,:,:],   self.weight2_1, stride=1, padding=1, groups=1)
                out2_2 = F.conv2d(out1[:, i+1:i+2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
                out2_3 = F.conv2d(out1[:, i+2:i+3,:,:], self.weight2_3, stride=1, padding=1, groups=1)
                out2_4 = F.conv2d(out1[:, i+3:i+4,:,:], self.weight2_4, stride=1, padding=1, groups=1)
                if i == 0:
                    out2 = torch.cat([out2_1, out2_2, out2_3, out2_4], dim=1)
                else:
                    out2 = torch.cat(([out2, out2_1, out2_2, out2_3, out2_4]), dim=1)

            #  print("out2 size: {}".format(out2.size()))
            x_pred_mask = self.bn2(out2)

        elif cfg.filter_mode == 8:
            out1 = None
            out2 = None

            out1_1 = None
            out1_2 = None
            out1_3 = None
            out1_4 = None
            out1_5 = None
            out1_6 = None
            out1_7 = None
            out1_8 = None

            out2_1 = None
            out2_2 = None
            out2_3 = None
            out1_4 = None
            out2_5 = None
            out2_6 = None
            out2_7 = None
            out2_8 = None

            for i in range(0, self.planes, cfg.filter_mode):
                out1_1 = F.conv2d(x[:, i:i+1,:,:],   self.weight1_1, stride=1, padding=1, groups=1)
                out1_2 = F.conv2d(x[:, i+1:i+2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
                out1_3 = F.conv2d(x[:, i+2:i+3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
                out1_4 = F.conv2d(x[:, i+3:i+4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
                out1_5 = F.conv2d(x[:, i+4:i+5,:,:], self.weight1_5, stride=1, padding=1, groups=1)
                out1_6 = F.conv2d(x[:, i+5:i+6,:,:], self.weight1_6, stride=1, padding=1, groups=1)
                out1_7 = F.conv2d(x[:, i+6:i+7,:,:], self.weight1_7, stride=1, padding=1, groups=1)
                out1_8 = F.conv2d(x[:, i+7:i+8,:,:], self.weight1_8, stride=1, padding=1, groups=1)
                if i == 0:
                    out1 = torch.cat([out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8], dim=1)
                else:
                    out1 = torch.cat(([out1, out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8]), dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            #  print("out1 size: {}".format(out1.size()))

            for i in range(0, self.planes, cfg.filter_mode):
                out2_1 = F.conv2d(out1[:, i:i+1,:,:],   self.weight2_1, stride=1, padding=1, groups=1)
                out2_2 = F.conv2d(out1[:, i+1:i+2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
                out2_3 = F.conv2d(out1[:, i+2:i+3,:,:], self.weight2_3, stride=1, padding=1, groups=1)
                out2_4 = F.conv2d(out1[:, i+3:i+4,:,:], self.weight2_4, stride=1, padding=1, groups=1)
                out1_5 = F.conv2d(out1[:, i+4:i+5,:,:], self.weight2_5, stride=1, padding=1, groups=1)
                out2_6 = F.conv2d(out1[:, i+5:i+6,:,:], self.weight2_6, stride=1, padding=1, groups=1)
                out2_7 = F.conv2d(out1[:, i+6:i+7,:,:], self.weight2_7, stride=1, padding=1, groups=1)
                out2_8 = F.conv2d(out1[:, i+7:i+8,:,:], self.weight2_8, stride=1, padding=1, groups=1)
                if i == 0:
                    out2 = torch.cat([out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8], dim=1)
                else:
                    out2 = torch.cat(([out2, out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8]), dim=1)

            #  print("out2 size: {}".format(out2.size()))
            x_pred_mask = self.bn2(out2)

        elif cfg.filter_mode == 16:
            out1 = None
            out2 = None

            out1_1 = None
            out1_2 = None
            out1_3 = None
            out1_4 = None
            out1_5 = None
            out1_6 = None
            out1_7 = None
            out1_8 = None
            out1_9 = None
            out1_10 = None
            out1_11 = None
            out1_12 = None
            out1_13 = None
            out1_14 = None
            out1_15 = None
            out1_16 = None

            out2_1 = None
            out2_2 = None
            out2_3 = None
            out2_4 = None
            out2_5 = None
            out2_6 = None
            out2_7 = None
            out2_8 = None
            out2_9 = None
            out2_10 = None
            out2_11 = None
            out2_12 = None
            out2_13 = None
            out2_14 = None
            out2_15 = None
            out2_16 = None

            for i in range(0, self.planes, cfg.filter_mode):
                out1_1  = F.conv2d(x[:, i:i+1,:,:], self.weight1_1, stride  =1, padding=1, groups=1)
                out1_2  = F.conv2d(x[:, i+1:i+2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
                out1_3  = F.conv2d(x[:, i+2:i+3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
                out1_4  = F.conv2d(x[:, i+3:i+4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
                out1_5  = F.conv2d(x[:, i+4:i+5,:,:], self.weight1_5, stride=1, padding=1, groups=1)
                out1_6  = F.conv2d(x[:, i+5:i+6,:,:], self.weight1_6, stride=1, padding=1, groups=1)
                out1_7  = F.conv2d(x[:, i+6:i+7,:,:], self.weight1_7, stride=1, padding=1, groups=1)
                out1_8  = F.conv2d(x[:, i+7:i+8,:,:], self.weight1_8, stride=1, padding=1, groups=1)
                out1_9  = F.conv2d(x[:, i+8:i+9,:,:], self.weight1_9, stride  =1, padding=1, groups=1)
                out1_10 = F.conv2d(x[:, i+9:i+10,:,:], self.weight1_10, stride=1, padding=1, groups=1)
                out1_11 = F.conv2d(x[:, i+10:i+11,:,:], self.weight1_11, stride=1, padding=1, groups=1)
                out1_12 = F.conv2d(x[:, i+11:i+12,:,:], self.weight1_12, stride=1, padding=1, groups=1)
                out1_13 = F.conv2d(x[:, i+12:i+13,:,:], self.weight1_13, stride=1, padding=1, groups=1)
                out1_14 = F.conv2d(x[:, i+13:i+14,:,:], self.weight1_14, stride=1, padding=1, groups=1)
                out1_15 = F.conv2d(x[:, i+14:i+15,:,:], self.weight1_15, stride=1, padding=1, groups=1)
                out1_16 = F.conv2d(x[:, i+15:i+16,:,:], self.weight1_16, stride=1, padding=1, groups=1)
                if i == 0:
                    out1 = torch.cat([out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10, out1_11, out1_12, out1_13, out1_14, out1_15, out1_16], dim=1)
                else:
                    out1 = torch.cat([out1, out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10, out1_11, out1_12, out1_13, out1_14, out1_15, out1_16], dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            #  print("out1 size: {}".format(out1.size()))

            for i in range(0, self.planes, cfg.filter_mode):
                out2_1  = F.conv2d(out1[:, i:i+1,:,:], self.weight2_1, stride   =1, padding=1, groups=1)
                out2_2  = F.conv2d(out1[:, i+1:i+2,:,:], self.weight2_2, stride =1, padding=1, groups=1)
                out2_3  = F.conv2d(out1[:, i+2:i+3,:,:], self.weight2_3, stride =1, padding=1, groups=1)
                out2_4  = F.conv2d(out1[:, i+3:i+4,:,:], self.weight2_4, stride =1, padding=1, groups=1)
                out2_5  = F.conv2d(out1[:, i+4:i+5,:,:], self.weight2_5, stride =1, padding=1, groups=1)
                out2_6  = F.conv2d(out1[:, i+5:i+6,:,:], self.weight2_6, stride =1, padding=1, groups=1)
                out2_7  = F.conv2d(out1[:, i+6:i+7,:,:], self.weight2_7, stride =1, padding=1, groups=1)
                out2_8  = F.conv2d(out1[:, i+7:i+8,:,:], self.weight2_8, stride =1, padding=1, groups=1)
                out2_9  = F.conv2d(out1[:, i+8:i+9,:,:], self.weight2_9, stride=1, padding=1, groups=1)
                out2_10 = F.conv2d(out1[:, i+9:i+10,:,:], self.weight2_10, stride=1, padding=1, groups=1)
                out1_11 = F.conv2d(out1[:, i+10:i+11,:,:], self.weight2_11, stride =1, padding=1, groups=1)
                out2_12 = F.conv2d(out1[:, i+11:i+12,:,:], self.weight2_12, stride =1, padding=1, groups=1)
                out2_13 = F.conv2d(out1[:, i+12:i+13,:,:], self.weight2_13, stride =1, padding=1, groups=1)
                out2_14 = F.conv2d(out1[:, i+13:i+14,:,:], self.weight2_14, stride =1, padding=1, groups=1)
                out2_15 = F.conv2d(out1[:, i+14:i+15,:,:], self.weight2_15, stride =1, padding=1, groups=1)
                out2_16 = F.conv2d(out1[:, i+15:i+16,:,:], self.weight2_16, stride =1, padding=1, groups=1)
                if i == 0:
                    out2 = torch.cat([out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10, out2_11, out2_12, out2_13, out2_14, out2_15, out2_16], dim=1)
                else:
                    out2 = torch.cat([out2, out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10, out2_11, out2_12, out2_13, out2_14, out2_15, out2_16], dim=1)
                    #  out2 = torch.cat(([out2, out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8]), dim=1)

            #  print("out2 size: {}".format(out2.size()))
            x_pred_mask = self.bn2(out2)

        elif cfg.filter_mode == 32:
            out1 = None
            out2 = None

            out1_1 = None
            out1_2 = None
            out1_3 = None
            out1_4 = None
            out1_5 = None
            out1_6 = None
            out1_7 = None
            out1_8 = None
            out1_9 = None
            out1_10 = None
            out1_11 = None
            out1_12 = None
            out1_13 = None
            out1_14 = None
            out1_15 = None
            out1_16 = None
            out1_17 = None
            out1_18 = None
            out1_19 = None
            out1_20 = None
            out1_21 = None
            out1_22 = None
            out1_23 = None
            out1_24 = None
            out1_25 = None
            out1_26 = None
            out1_27 = None
            out1_28 = None
            out1_29 = None
            out1_30 = None
            out1_31 = None
            out1_32 = None

            out2_1 = None
            out2_2 = None
            out2_3 = None
            out2_4 = None
            out2_5 = None
            out2_6 = None
            out2_7 = None
            out2_8 = None
            out2_9 = None
            out2_10 = None
            out2_11 = None
            out2_12 = None
            out2_13 = None
            out2_14 = None
            out2_15 = None
            out2_16 = None
            out2_17 = None
            out2_18 = None
            out2_19 = None
            out2_20 = None
            out2_21 = None
            out2_22 = None
            out2_23 = None
            out2_24 = None
            out2_25 = None
            out2_26 = None
            out2_27 = None
            out2_28 = None
            out2_29 = None
            out2_30 = None
            out2_31 = None
            out2_32 = None

            for i in range(0, self.planes, cfg.filter_mode):
                out1_1  = F.conv2d(x[:, i:i+1,:,:], self.weight1_1, stride  =1, padding=1, groups=1)
                out1_2  = F.conv2d(x[:, i+1:i+2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
                out1_3  = F.conv2d(x[:, i+2:i+3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
                out1_4  = F.conv2d(x[:, i+3:i+4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
                out1_5  = F.conv2d(x[:, i+4:i+5,:,:], self.weight1_5, stride=1, padding=1, groups=1)
                out1_6  = F.conv2d(x[:, i+5:i+6,:,:], self.weight1_6, stride=1, padding=1, groups=1)
                out1_7  = F.conv2d(x[:, i+6:i+7,:,:], self.weight1_7, stride=1, padding=1, groups=1)
                out1_8  = F.conv2d(x[:, i+7:i+8,:,:], self.weight1_8, stride=1, padding=1, groups=1)
                out1_9  = F.conv2d(x[:, i+8:i+9,:,:], self.weight1_9, stride=1, padding=1, groups=1)
                out1_10 = F.conv2d(x[:, i+9:i+10,:,:], self.weight1_10, stride=1, padding=1, groups=1)
                out1_11 = F.conv2d(x[:, i+10:i+11,:,:], self.weight1_11, stride=1, padding=1, groups=1)
                out1_12 = F.conv2d(x[:, i+11:i+12,:,:], self.weight1_12, stride=1, padding=1, groups=1)
                out1_13 = F.conv2d(x[:, i+12:i+13,:,:], self.weight1_13, stride=1, padding=1, groups=1)
                out1_14 = F.conv2d(x[:, i+13:i+14,:,:], self.weight1_14, stride=1, padding=1, groups=1)
                out1_15 = F.conv2d(x[:, i+14:i+15,:,:], self.weight1_15, stride=1, padding=1, groups=1)
                out1_16 = F.conv2d(x[:, i+15:i+16,:,:], self.weight1_16, stride=1, padding=1, groups=1)
                out1_17 = F.conv2d(x[:, i+16:i+17,:,:], self.weight1_17, stride=1, padding=1, groups=1)
                out1_18 = F.conv2d(x[:, i+17:i+18,:,:], self.weight1_18, stride=1, padding=1, groups=1)
                out1_19 = F.conv2d(x[:, i+18:i+19,:,:], self.weight1_19, stride=1, padding=1, groups=1)
                out1_20 = F.conv2d(x[:, i+19:i+20,:,:], self.weight1_20, stride=1, padding=1, groups=1)
                out1_21 = F.conv2d(x[:, i+20:i+21,:,:], self.weight1_21, stride=1, padding=1, groups=1)
                out1_22 = F.conv2d(x[:, i+21:i+22,:,:], self.weight1_22, stride=1, padding=1, groups=1)
                out1_23 = F.conv2d(x[:, i+22:i+23,:,:], self.weight1_23, stride=1, padding=1, groups=1)
                out1_24 = F.conv2d(x[:, i+23:i+24,:,:], self.weight1_24, stride=1, padding=1, groups=1)
                out1_25 = F.conv2d(x[:, i+24:i+25,:,:], self.weight1_25, stride=1, padding=1, groups=1)
                out1_26 = F.conv2d(x[:, i+25:i+26,:,:], self.weight1_26, stride=1, padding=1, groups=1)
                out1_27 = F.conv2d(x[:, i+26:i+27,:,:], self.weight1_27, stride=1, padding=1, groups=1)
                out1_28 = F.conv2d(x[:, i+27:i+28,:,:], self.weight1_28, stride=1, padding=1, groups=1)
                out1_29 = F.conv2d(x[:, i+28:i+29,:,:], self.weight1_29, stride=1, padding=1, groups=1)
                out1_30 = F.conv2d(x[:, i+29:i+30,:,:], self.weight1_30, stride=1, padding=1, groups=1)
                out1_31 = F.conv2d(x[:, i+30:i+31,:,:], self.weight1_31, stride=1, padding=1, groups=1)
                out1_32 = F.conv2d(x[:, i+31:i+32,:,:], self.weight1_32, stride=1, padding=1, groups=1)
                if i == 0:
                    out1 = torch.cat([out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10, out1_11, out1_12, out1_13, out1_14, out1_15, out1_16, out1_17, out1_18, out1_19, out1_20, out1_21, out1_22, out1_23, out1_24, out1_25, out1_26, out1_27, out1_28, out1_29, out1_30, out1_31, out1_32], dim=1)
                else:
                    out1 = torch.cat([out1, out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10, out1_11, out1_12, out1_13, out1_14, out1_15, out1_16, out1_17, out1_18, out1_19, out1_20, out1_21, out1_22, out1_23, out1_24, out1_25, out1_26, out1_27, out1_28, out1_29, out1_30, out1_31, out1_32], dim=1)
                    #  out1 = torch.cat([out1, out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10, out1_11, out1_12, out1_13, out1_14, out1_15, out1_16], dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            #  print("out1 size: {}".format(out1.size()))

            for i in range(0, self.planes, cfg.filter_mode):
                out2_1  = F.conv2d(out1[:, i:i+1,:,:], self.weight2_1, stride=1, padding=1, groups=1)
                out2_2  = F.conv2d(out1[:, i+1:i+2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
                out2_3  = F.conv2d(out1[:, i+2:i+3,:,:], self.weight2_3, stride=1, padding=1, groups=1)
                out2_4  = F.conv2d(out1[:, i+3:i+4,:,:], self.weight2_4, stride=1, padding=1, groups=1)
                out2_5  = F.conv2d(out1[:, i+4:i+5,:,:], self.weight2_5, stride=1, padding=1, groups=1)
                out2_6  = F.conv2d(out1[:, i+5:i+6,:,:], self.weight2_6, stride=1, padding=1, groups=1)
                out2_7  = F.conv2d(out1[:, i+6:i+7,:,:], self.weight2_7, stride=1, padding=1, groups=1)
                out2_8  = F.conv2d(out1[:, i+7:i+8,:,:], self.weight2_8, stride=1, padding=1, groups=1)
                out2_9  = F.conv2d(out1[:, i+8:i+9,:,:], self.weight2_9, stride=1, padding=1, groups=1)
                out2_10 = F.conv2d(out1[:, i+9:i+10,:,:], self.weight2_10, stride=1, padding=1, groups=1)
                out2_11 = F.conv2d(out1[:, i+10:i+11,:,:], self.weight2_11, stride=1, padding=1, groups=1)
                out2_12 = F.conv2d(out1[:, i+11:i+12,:,:], self.weight2_12, stride=1, padding=1, groups=1)
                out2_13 = F.conv2d(out1[:, i+12:i+13,:,:], self.weight2_13, stride=1, padding=1, groups=1)
                out2_14 = F.conv2d(out1[:, i+13:i+14,:,:], self.weight2_14, stride=1, padding=1, groups=1)
                out1_15 = F.conv2d(out1[:, i+14:i+15,:,:], self.weight2_15, stride=1, padding=1, groups=1)
                out2_16 = F.conv2d(out1[:, i+15:i+16,:,:], self.weight2_16, stride=1, padding=1, groups=1)
                out2_17 = F.conv2d(out1[:, i+16:i+17,:,:], self.weight2_17, stride=1, padding=1, groups=1)
                out2_18 = F.conv2d(out1[:, i+17:i+18,:,:], self.weight2_18, stride=1, padding=1, groups=1)
                out2_19 = F.conv2d(out1[:, i+18:i+19,:,:], self.weight2_19, stride=1, padding=1, groups=1)
                out2_20 = F.conv2d(out1[:, i+19:i+20,:,:], self.weight2_20, stride=1, padding=1, groups=1)
                out2_21 = F.conv2d(out1[:, i+20:i+21,:,:], self.weight2_21, stride=1, padding=1, groups=1)
                out2_22 = F.conv2d(out1[:, i+21:i+22,:,:], self.weight2_22, stride=1, padding=1, groups=1)
                out2_23 = F.conv2d(out1[:, i+22:i+23,:,:], self.weight2_23, stride=1, padding=1, groups=1)
                out2_24 = F.conv2d(out1[:, i+23:i+24,:,:], self.weight2_24, stride=1, padding=1, groups=1)
                out2_25 = F.conv2d(out1[:, i+24:i+25,:,:], self.weight2_25, stride=1, padding=1, groups=1)
                out2_26 = F.conv2d(out1[:, i+25:i+26,:,:], self.weight2_26, stride=1, padding=1, groups=1)
                out2_27 = F.conv2d(out1[:, i+26:i+27,:,:], self.weight2_27, stride=1, padding=1, groups=1)
                out2_28 = F.conv2d(out1[:, i+27:i+28,:,:], self.weight2_28, stride=1, padding=1, groups=1)
                out2_29 = F.conv2d(out1[:, i+28:i+29,:,:], self.weight2_29, stride=1, padding=1, groups=1)
                out2_30 = F.conv2d(out1[:, i+29:i+30,:,:], self.weight2_30, stride=1, padding=1, groups=1)
                out2_31 = F.conv2d(out1[:, i+30:i+31,:,:], self.weight2_31, stride=1, padding=1, groups=1)
                out2_32 = F.conv2d(out1[:, i+31:i+32,:,:], self.weight2_32, stride=1, padding=1, groups=1)
                if i == 0:
                    out2 = torch.cat([out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10, out2_11, out2_12, out2_13, out2_14, out2_15, out2_16, out2_17, out2_18, out2_19, out2_20, out2_21, out2_22, out2_23, out2_24, out2_25, out2_26, out2_27, out2_28, out2_29, out2_30, out2_31, out2_32], dim=1)
                else:
                    out2 = torch.cat([out2, out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10, out2_11, out2_12, out2_13, out2_14, out2_15, out2_16, out2_17, out2_18, out2_19, out2_20, out2_21, out2_22, out2_23, out2_24, out2_25, out2_26, out2_27, out2_28, out2_29, out2_30, out2_31, out2_32], dim=1)

            #  print("out2 size: {}".format(out2.size()))
            x_pred_mask = self.bn2(out2)

        elif (cfg.filter_mode=='x' and self.planes==192):
            out1 = None
            out2 = None

            out1_1 = F.conv2d(x[:, 0:1,:,:], self.weight1_1, stride=1, padding=1, groups=1)
            out1_2 = F.conv2d(x[:, 1:2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
            out1_3 = F.conv2d(x[:, 2:3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
            out1_4 = F.conv2d(x[:, 3:4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
            out1_5 = F.conv2d(x[:, 4:5,:,:], self.weight1_5, stride=1, padding=1, groups=1)
            out1_6 = F.conv2d(x[:, 5:6,:,:], self.weight1_6, stride=1, padding=1, groups=1)
            out1_7 = F.conv2d(x[:, 6:7,:,:], self.weight1_7, stride=1, padding=1, groups=1)
            out1_8 = F.conv2d(x[:, 7:8,:,:], self.weight1_8, stride=1, padding=1, groups=1)
            out1_9 = F.conv2d(x[:, 8:9,:,:], self.weight1_9, stride=1, padding=1, groups=1)
            out1_10 = F.conv2d(x[:, 9:10,:,:], self.weight1_10, stride=1, padding=1, groups=1)
            out1_11 = F.conv2d(x[:, 10:11,:,:], self.weight1_11, stride=1, padding=1, groups=1)
            out1_12 = F.conv2d(x[:, 11:12,:,:], self.weight1_12, stride=1, padding=1, groups=1)
            out1_13 = F.conv2d(x[:, 12:13,:,:], self.weight1_13, stride=1, padding=1, groups=1)
            out1_14 = F.conv2d(x[:, 13:14,:,:], self.weight1_14, stride=1, padding=1, groups=1)
            out1_15 = F.conv2d(x[:, 14:15,:,:], self.weight1_15, stride=1, padding=1, groups=1)
            out1_16 = F.conv2d(x[:, 15:16,:,:], self.weight1_16, stride=1, padding=1, groups=1)
            out1_17 = F.conv2d(x[:, 16:17,:,:], self.weight1_17, stride=1, padding=1, groups=1)
            out1_18 = F.conv2d(x[:, 17:18,:,:], self.weight1_18, stride=1, padding=1, groups=1)
            out1_19 = F.conv2d(x[:, 18:19,:,:], self.weight1_19, stride=1, padding=1, groups=1)
            out1_20 = F.conv2d(x[:, 19:20,:,:], self.weight1_20, stride=1, padding=1, groups=1)
            out1_21 = F.conv2d(x[:, 20:21,:,:], self.weight1_21, stride=1, padding=1, groups=1)
            out1_22 = F.conv2d(x[:, 21:22,:,:], self.weight1_22, stride=1, padding=1, groups=1)
            out1_23 = F.conv2d(x[:, 22:23,:,:], self.weight1_23, stride=1, padding=1, groups=1)
            out1_24 = F.conv2d(x[:, 23:24,:,:], self.weight1_24, stride=1, padding=1, groups=1)
            out1_25 = F.conv2d(x[:, 24:25,:,:], self.weight1_25, stride=1, padding=1, groups=1)
            out1_26 = F.conv2d(x[:, 25:26,:,:], self.weight1_26, stride=1, padding=1, groups=1)
            out1_27 = F.conv2d(x[:, 26:27,:,:], self.weight1_27, stride=1, padding=1, groups=1)
            out1_28 = F.conv2d(x[:, 27:28,:,:], self.weight1_28, stride=1, padding=1, groups=1)
            out1_29 = F.conv2d(x[:, 28:29,:,:], self.weight1_29, stride=1, padding=1, groups=1)
            out1_30 = F.conv2d(x[:, 29:30,:,:], self.weight1_30, stride=1, padding=1, groups=1)
            out1_31 = F.conv2d(x[:, 30:31,:,:], self.weight1_31, stride=1, padding=1, groups=1)
            out1_32 = F.conv2d(x[:, 31:32,:,:], self.weight1_32, stride=1, padding=1, groups=1)
            out1_33 = F.conv2d(x[:, 32:33,:,:], self.weight1_33, stride=1, padding=1, groups=1)
            out1_34 = F.conv2d(x[:, 33:34,:,:], self.weight1_34, stride=1, padding=1, groups=1)
            out1_35 = F.conv2d(x[:, 34:35,:,:], self.weight1_35, stride=1, padding=1, groups=1)
            out1_36 = F.conv2d(x[:, 35:36,:,:], self.weight1_36, stride=1, padding=1, groups=1)
            out1_37 = F.conv2d(x[:, 36:37,:,:], self.weight1_37, stride=1, padding=1, groups=1)
            out1_38 = F.conv2d(x[:, 37:38,:,:], self.weight1_38, stride=1, padding=1, groups=1)
            out1_39 = F.conv2d(x[:, 38:39,:,:], self.weight1_39, stride=1, padding=1, groups=1)
            out1_40 = F.conv2d(x[:, 39:40,:,:], self.weight1_40, stride=1, padding=1, groups=1)
            out1_41 = F.conv2d(x[:, 40:41,:,:], self.weight1_41, stride=1, padding=1, groups=1)
            out1_42 = F.conv2d(x[:, 41:42,:,:], self.weight1_42, stride=1, padding=1, groups=1)
            out1_43 = F.conv2d(x[:, 42:43,:,:], self.weight1_43, stride=1, padding=1, groups=1)
            out1_44 = F.conv2d(x[:, 43:44,:,:], self.weight1_44, stride=1, padding=1, groups=1)
            out1_45 = F.conv2d(x[:, 44:45,:,:], self.weight1_45, stride=1, padding=1, groups=1)
            out1_46 = F.conv2d(x[:, 45:46,:,:], self.weight1_46, stride=1, padding=1, groups=1)
            out1_47 = F.conv2d(x[:, 46:47,:,:], self.weight1_47, stride=1, padding=1, groups=1)
            out1_48 = F.conv2d(x[:, 47:48,:,:], self.weight1_48, stride=1, padding=1, groups=1)
            out1_49 = F.conv2d(x[:, 48:49,:,:], self.weight1_49, stride=1, padding=1, groups=1)
            out1_50 = F.conv2d(x[:, 49:50,:,:], self.weight1_50, stride=1, padding=1, groups=1)
            out1_51 = F.conv2d(x[:, 50:51,:,:], self.weight1_51, stride=1, padding=1, groups=1)
            out1_52 = F.conv2d(x[:, 51:52,:,:], self.weight1_52, stride=1, padding=1, groups=1)
            out1_53 = F.conv2d(x[:, 52:53,:,:], self.weight1_53, stride=1, padding=1, groups=1)
            out1_54 = F.conv2d(x[:, 53:54,:,:], self.weight1_54, stride=1, padding=1, groups=1)
            out1_55 = F.conv2d(x[:, 54:55,:,:], self.weight1_55, stride=1, padding=1, groups=1)
            out1_56 = F.conv2d(x[:, 55:56,:,:], self.weight1_56, stride=1, padding=1, groups=1)
            out1_57 = F.conv2d(x[:, 56:57,:,:], self.weight1_57, stride=1, padding=1, groups=1)
            out1_58 = F.conv2d(x[:, 57:58,:,:], self.weight1_58, stride=1, padding=1, groups=1)
            out1_59 = F.conv2d(x[:, 58:59,:,:], self.weight1_59, stride=1, padding=1, groups=1)
            out1_60 = F.conv2d(x[:, 59:60,:,:], self.weight1_60, stride=1, padding=1, groups=1)
            out1_61 = F.conv2d(x[:, 60:61,:,:], self.weight1_61, stride=1, padding=1, groups=1)
            out1_62 = F.conv2d(x[:, 61:62,:,:], self.weight1_62, stride=1, padding=1, groups=1)
            out1_63 = F.conv2d(x[:, 62:63,:,:], self.weight1_63, stride=1, padding=1, groups=1)
            out1_64 = F.conv2d(x[:, 63:64,:,:], self.weight1_64, stride=1, padding=1, groups=1)
            out1_65 = F.conv2d(x[:, 64:65,:,:], self.weight1_65, stride=1, padding=1, groups=1)
            out1_66 = F.conv2d(x[:, 65:66,:,:], self.weight1_66, stride=1, padding=1, groups=1)
            out1_67 = F.conv2d(x[:, 66:67,:,:], self.weight1_67, stride=1, padding=1, groups=1)
            out1_68 = F.conv2d(x[:, 67:68,:,:], self.weight1_68, stride=1, padding=1, groups=1)
            out1_69 = F.conv2d(x[:, 68:69,:,:], self.weight1_69, stride=1, padding=1, groups=1)
            out1_70 = F.conv2d(x[:, 69:70,:,:], self.weight1_70, stride=1, padding=1, groups=1)
            out1_71 = F.conv2d(x[:, 70:71,:,:], self.weight1_71, stride=1, padding=1, groups=1)
            out1_72 = F.conv2d(x[:, 71:72,:,:], self.weight1_72, stride=1, padding=1, groups=1)
            out1_73 = F.conv2d(x[:, 72:73,:,:], self.weight1_73, stride=1, padding=1, groups=1)
            out1_74 = F.conv2d(x[:, 73:74,:,:], self.weight1_74, stride=1, padding=1, groups=1)
            out1_75 = F.conv2d(x[:, 74:75,:,:], self.weight1_75, stride=1, padding=1, groups=1)
            out1_76 = F.conv2d(x[:, 75:76,:,:], self.weight1_76, stride=1, padding=1, groups=1)
            out1_77 = F.conv2d(x[:, 76:77,:,:], self.weight1_77, stride=1, padding=1, groups=1)
            out1_78 = F.conv2d(x[:, 77:78,:,:], self.weight1_78, stride=1, padding=1, groups=1)
            out1_79 = F.conv2d(x[:, 78:79,:,:], self.weight1_79, stride=1, padding=1, groups=1)
            out1_80 = F.conv2d(x[:, 79:80,:,:], self.weight1_80, stride=1, padding=1, groups=1)
            out1_81 = F.conv2d(x[:, 80:81,:,:], self.weight1_81, stride=1, padding=1, groups=1)
            out1_82 = F.conv2d(x[:, 81:82,:,:], self.weight1_82, stride=1, padding=1, groups=1)
            out1_83 = F.conv2d(x[:, 82:83,:,:], self.weight1_83, stride=1, padding=1, groups=1)
            out1_84 = F.conv2d(x[:, 83:84,:,:], self.weight1_84, stride=1, padding=1, groups=1)
            out1_85 = F.conv2d(x[:, 84:85,:,:], self.weight1_85, stride=1, padding=1, groups=1)
            out1_86 = F.conv2d(x[:, 85:86,:,:], self.weight1_86, stride=1, padding=1, groups=1)
            out1_87 = F.conv2d(x[:, 86:87,:,:], self.weight1_87, stride=1, padding=1, groups=1)
            out1_88 = F.conv2d(x[:, 87:88,:,:], self.weight1_88, stride=1, padding=1, groups=1)
            out1_89 = F.conv2d(x[:, 88:89,:,:], self.weight1_89, stride=1, padding=1, groups=1)
            out1_90 = F.conv2d(x[:, 89:90,:,:], self.weight1_90, stride=1, padding=1, groups=1)
            out1_91 = F.conv2d(x[:, 90:91,:,:], self.weight1_91, stride=1, padding=1, groups=1)
            out1_92 = F.conv2d(x[:, 91:92,:,:], self.weight1_92, stride=1, padding=1, groups=1)
            out1_93 = F.conv2d(x[:, 92:93,:,:], self.weight1_93, stride=1, padding=1, groups=1)
            out1_94 = F.conv2d(x[:, 93:94,:,:], self.weight1_94, stride=1, padding=1, groups=1)
            out1_95 = F.conv2d(x[:, 94:95,:,:], self.weight1_95, stride=1, padding=1, groups=1)
            out1_96 = F.conv2d(x[:, 95:96,:,:], self.weight1_96, stride=1, padding=1, groups=1)
            out1_97 = F.conv2d(x[:, 96:97,:,:], self.weight1_97, stride=1, padding=1, groups=1)
            out1_98 = F.conv2d(x[:, 97:98,:,:], self.weight1_98, stride=1, padding=1, groups=1)
            out1_99 = F.conv2d(x[:, 98:99,:,:], self.weight1_99, stride=1, padding=1, groups=1)
            out1_100 = F.conv2d(x[:, 99:100,:,:], self.weight1_100, stride=1, padding=1, groups=1)
            out1_101 = F.conv2d(x[:, 100:101,:,:], self.weight1_101, stride=1, padding=1, groups=1)
            out1_102 = F.conv2d(x[:, 101:102,:,:], self.weight1_102, stride=1, padding=1, groups=1)
            out1_103 = F.conv2d(x[:, 102:103,:,:], self.weight1_103, stride=1, padding=1, groups=1)
            out1_104 = F.conv2d(x[:, 103:104,:,:], self.weight1_104, stride=1, padding=1, groups=1)
            out1_105 = F.conv2d(x[:, 104:105,:,:], self.weight1_105, stride=1, padding=1, groups=1)
            out1_106 = F.conv2d(x[:, 105:106,:,:], self.weight1_106, stride=1, padding=1, groups=1)
            out1_107 = F.conv2d(x[:, 106:107,:,:], self.weight1_107, stride=1, padding=1, groups=1)
            out1_108 = F.conv2d(x[:, 107:108,:,:], self.weight1_108, stride=1, padding=1, groups=1)
            out1_109 = F.conv2d(x[:, 108:109,:,:], self.weight1_109, stride=1, padding=1, groups=1)
            out1_110 = F.conv2d(x[:, 109:110,:,:], self.weight1_110, stride=1, padding=1, groups=1)
            out1_111 = F.conv2d(x[:, 110:111,:,:], self.weight1_111, stride=1, padding=1, groups=1)
            out1_112 = F.conv2d(x[:, 111:112,:,:], self.weight1_112, stride=1, padding=1, groups=1)
            out1_113 = F.conv2d(x[:, 112:113,:,:], self.weight1_113, stride=1, padding=1, groups=1)
            out1_114 = F.conv2d(x[:, 113:114,:,:], self.weight1_114, stride=1, padding=1, groups=1)
            out1_115 = F.conv2d(x[:, 114:115,:,:], self.weight1_115, stride=1, padding=1, groups=1)
            out1_116 = F.conv2d(x[:, 115:116,:,:], self.weight1_116, stride=1, padding=1, groups=1)
            out1_117 = F.conv2d(x[:, 116:117,:,:], self.weight1_117, stride=1, padding=1, groups=1)
            out1_118 = F.conv2d(x[:, 117:118,:,:], self.weight1_118, stride=1, padding=1, groups=1)
            out1_119 = F.conv2d(x[:, 118:119,:,:], self.weight1_119, stride=1, padding=1, groups=1)
            out1_120 = F.conv2d(x[:, 119:120,:,:], self.weight1_120, stride=1, padding=1, groups=1)
            out1_121 = F.conv2d(x[:, 120:121,:,:], self.weight1_121, stride=1, padding=1, groups=1)
            out1_122 = F.conv2d(x[:, 121:122,:,:], self.weight1_122, stride=1, padding=1, groups=1)
            out1_123 = F.conv2d(x[:, 122:123,:,:], self.weight1_123, stride=1, padding=1, groups=1)
            out1_124 = F.conv2d(x[:, 123:124,:,:], self.weight1_124, stride=1, padding=1, groups=1)
            out1_125 = F.conv2d(x[:, 124:125,:,:], self.weight1_125, stride=1, padding=1, groups=1)
            out1_126 = F.conv2d(x[:, 125:126,:,:], self.weight1_126, stride=1, padding=1, groups=1)
            out1_127 = F.conv2d(x[:, 126:127,:,:], self.weight1_127, stride=1, padding=1, groups=1)
            out1_128 = F.conv2d(x[:, 127:128,:,:], self.weight1_128, stride=1, padding=1, groups=1)
            out1_129 = F.conv2d(x[:, 128:129,:,:], self.weight1_129, stride=1, padding=1, groups=1)
            out1_130 = F.conv2d(x[:, 129:130,:,:], self.weight1_130, stride=1, padding=1, groups=1)
            out1_131 = F.conv2d(x[:, 130:131,:,:], self.weight1_131, stride=1, padding=1, groups=1)
            out1_132 = F.conv2d(x[:, 131:132,:,:], self.weight1_132, stride=1, padding=1, groups=1)
            out1_133 = F.conv2d(x[:, 132:133,:,:], self.weight1_133, stride=1, padding=1, groups=1)
            out1_134 = F.conv2d(x[:, 133:134,:,:], self.weight1_134, stride=1, padding=1, groups=1)
            out1_135 = F.conv2d(x[:, 134:135,:,:], self.weight1_135, stride=1, padding=1, groups=1)
            out1_136 = F.conv2d(x[:, 135:136,:,:], self.weight1_136, stride=1, padding=1, groups=1)
            out1_137 = F.conv2d(x[:, 136:137,:,:], self.weight1_137, stride=1, padding=1, groups=1)
            out1_138 = F.conv2d(x[:, 137:138,:,:], self.weight1_138, stride=1, padding=1, groups=1)
            out1_139 = F.conv2d(x[:, 138:139,:,:], self.weight1_139, stride=1, padding=1, groups=1)
            out1_140 = F.conv2d(x[:, 139:140,:,:], self.weight1_140, stride=1, padding=1, groups=1)
            out1_141 = F.conv2d(x[:, 140:141,:,:], self.weight1_141, stride=1, padding=1, groups=1)
            out1_142 = F.conv2d(x[:, 141:142,:,:], self.weight1_142, stride=1, padding=1, groups=1)
            out1_143 = F.conv2d(x[:, 142:143,:,:], self.weight1_143, stride=1, padding=1, groups=1)
            out1_144 = F.conv2d(x[:, 143:144,:,:], self.weight1_144, stride=1, padding=1, groups=1)
            out1_145 = F.conv2d(x[:, 144:145,:,:], self.weight1_145, stride=1, padding=1, groups=1)
            out1_146 = F.conv2d(x[:, 145:146,:,:], self.weight1_146, stride=1, padding=1, groups=1)
            out1_147 = F.conv2d(x[:, 146:147,:,:], self.weight1_147, stride=1, padding=1, groups=1)
            out1_148 = F.conv2d(x[:, 147:148,:,:], self.weight1_148, stride=1, padding=1, groups=1)
            out1_149 = F.conv2d(x[:, 148:149,:,:], self.weight1_149, stride=1, padding=1, groups=1)
            out1_150 = F.conv2d(x[:, 149:150,:,:], self.weight1_150, stride=1, padding=1, groups=1)
            out1_151 = F.conv2d(x[:, 150:151,:,:], self.weight1_151, stride=1, padding=1, groups=1)
            out1_152 = F.conv2d(x[:, 151:152,:,:], self.weight1_152, stride=1, padding=1, groups=1)
            out1_153 = F.conv2d(x[:, 152:153,:,:], self.weight1_153, stride=1, padding=1, groups=1)
            out1_154 = F.conv2d(x[:, 153:154,:,:], self.weight1_154, stride=1, padding=1, groups=1)
            out1_155 = F.conv2d(x[:, 154:155,:,:], self.weight1_155, stride=1, padding=1, groups=1)
            out1_156 = F.conv2d(x[:, 155:156,:,:], self.weight1_156, stride=1, padding=1, groups=1)
            out1_157 = F.conv2d(x[:, 156:157,:,:], self.weight1_157, stride=1, padding=1, groups=1)
            out1_158 = F.conv2d(x[:, 157:158,:,:], self.weight1_158, stride=1, padding=1, groups=1)
            out1_159 = F.conv2d(x[:, 158:159,:,:], self.weight1_159, stride=1, padding=1, groups=1)
            out1_160 = F.conv2d(x[:, 159:160,:,:], self.weight1_160, stride=1, padding=1, groups=1)
            out1_161 = F.conv2d(x[:, 160:161,:,:], self.weight1_161, stride=1, padding=1, groups=1)
            out1_162 = F.conv2d(x[:, 161:162,:,:], self.weight1_162, stride=1, padding=1, groups=1)
            out1_163 = F.conv2d(x[:, 162:163,:,:], self.weight1_163, stride=1, padding=1, groups=1)
            out1_164 = F.conv2d(x[:, 163:164,:,:], self.weight1_164, stride=1, padding=1, groups=1)
            out1_165 = F.conv2d(x[:, 164:165,:,:], self.weight1_165, stride=1, padding=1, groups=1)
            out1_166 = F.conv2d(x[:, 165:166,:,:], self.weight1_166, stride=1, padding=1, groups=1)
            out1_167 = F.conv2d(x[:, 166:167,:,:], self.weight1_167, stride=1, padding=1, groups=1)
            out1_168 = F.conv2d(x[:, 167:168,:,:], self.weight1_168, stride=1, padding=1, groups=1)
            out1_169 = F.conv2d(x[:, 168:169,:,:], self.weight1_169, stride=1, padding=1, groups=1)
            out1_170 = F.conv2d(x[:, 169:170,:,:], self.weight1_170, stride=1, padding=1, groups=1)
            out1_171 = F.conv2d(x[:, 170:171,:,:], self.weight1_171, stride=1, padding=1, groups=1)
            out1_172 = F.conv2d(x[:, 171:172,:,:], self.weight1_172, stride=1, padding=1, groups=1)
            out1_173 = F.conv2d(x[:, 172:173,:,:], self.weight1_173, stride=1, padding=1, groups=1)
            out1_174 = F.conv2d(x[:, 173:174,:,:], self.weight1_174, stride=1, padding=1, groups=1)
            out1_175 = F.conv2d(x[:, 174:175,:,:], self.weight1_175, stride=1, padding=1, groups=1)
            out1_176 = F.conv2d(x[:, 175:176,:,:], self.weight1_176, stride=1, padding=1, groups=1)
            out1_177 = F.conv2d(x[:, 176:177,:,:], self.weight1_177, stride=1, padding=1, groups=1)
            out1_178 = F.conv2d(x[:, 177:178,:,:], self.weight1_178, stride=1, padding=1, groups=1)
            out1_179 = F.conv2d(x[:, 178:179,:,:], self.weight1_179, stride=1, padding=1, groups=1)
            out1_180 = F.conv2d(x[:, 179:180,:,:], self.weight1_180, stride=1, padding=1, groups=1)
            out1_181 = F.conv2d(x[:, 180:181,:,:], self.weight1_181, stride=1, padding=1, groups=1)
            out1_182 = F.conv2d(x[:, 181:182,:,:], self.weight1_182, stride=1, padding=1, groups=1)
            out1_183 = F.conv2d(x[:, 182:183,:,:], self.weight1_183, stride=1, padding=1, groups=1)
            out1_184 = F.conv2d(x[:, 183:184,:,:], self.weight1_184, stride=1, padding=1, groups=1)
            out1_185 = F.conv2d(x[:, 184:185,:,:], self.weight1_185, stride=1, padding=1, groups=1)
            out1_186 = F.conv2d(x[:, 185:186,:,:], self.weight1_186, stride=1, padding=1, groups=1)
            out1_187 = F.conv2d(x[:, 186:187,:,:], self.weight1_187, stride=1, padding=1, groups=1)
            out1_188 = F.conv2d(x[:, 187:188,:,:], self.weight1_188, stride=1, padding=1, groups=1)
            out1_189 = F.conv2d(x[:, 188:189,:,:], self.weight1_189, stride=1, padding=1, groups=1)
            out1_190 = F.conv2d(x[:, 189:190,:,:], self.weight1_190, stride=1, padding=1, groups=1)
            out1_191 = F.conv2d(x[:, 190:191,:,:], self.weight1_191, stride=1, padding=1, groups=1)
            out1_192 = F.conv2d(x[:, 191:192,:,:], self.weight1_192, stride=1, padding=1, groups=1)

            out1 = torch.cat([out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10,
                    out1_11, out1_12, out1_13, out1_14, out1_15, out1_16, out1_17, out1_18, out1_19, out1_20,
                    out1_21, out1_22, out1_23, out1_24, out1_25, out1_26, out1_27, out1_28, out1_29, out1_30,
                    out1_31, out1_32, out1_33, out1_34, out1_35, out1_36, out1_37, out1_38, out1_39, out1_40,
                    out1_41, out1_42, out1_43, out1_44, out1_45, out1_46, out1_47, out1_48, out1_49, out1_50,
                    out1_51, out1_52, out1_53, out1_54, out1_55, out1_56, out1_57, out1_58, out1_59, out1_60,
                    out1_61, out1_62, out1_63, out1_64, out1_65, out1_66, out1_67, out1_68, out1_69, out1_70,
                    out1_71, out1_72, out1_73, out1_74, out1_75, out1_76, out1_77, out1_78, out1_79, out1_80,
                    out1_81, out1_82, out1_83, out1_84, out1_85, out1_86, out1_87, out1_88, out1_89, out1_90,
                    out1_91, out1_92, out1_93, out1_94, out1_95, out1_96, out1_97, out1_98, out1_99, out1_100,
                    out1_101, out1_102, out1_103, out1_104, out1_105, out1_106, out1_107, out1_108, out1_109, out1_110,
                    out1_111, out1_112, out1_113, out1_114, out1_115, out1_116, out1_117, out1_118, out1_119, out1_120,
                    out1_121, out1_122, out1_123, out1_124, out1_125, out1_126, out1_127, out1_128, out1_129, out1_130,
                    out1_131, out1_132, out1_133, out1_134, out1_135, out1_136, out1_137, out1_138, out1_139, out1_140,
                    out1_141, out1_142, out1_143, out1_144, out1_145, out1_146, out1_147, out1_148, out1_149, out1_150,
                    out1_151, out1_152, out1_153, out1_154, out1_155, out1_156, out1_157, out1_158, out1_159, out1_160,
                    out1_161, out1_162, out1_163, out1_164, out1_165, out1_166, out1_167, out1_168, out1_169, out1_170,
                    out1_171, out1_172, out1_173, out1_174, out1_175, out1_176, out1_177, out1_178, out1_179, out1_180,
                    out1_181, out1_182, out1_183, out1_184, out1_185, out1_186, out1_187, out1_188, out1_189, out1_190,
                    out1_191, out1_192], dim=1)


            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            out2_1 = F.conv2d(out1[:, 0:1,:,:], self.weight2_1, stride=1, padding=1, groups=1)
            out2_2 = F.conv2d(out1[:, 1:2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
            out2_3 = F.conv2d(out1[:, 2:3,:,:], self.weight2_3, stride=1, padding=1, groups=1)
            out2_4 = F.conv2d(out1[:, 3:4,:,:], self.weight2_4, stride=1, padding=1, groups=1)
            out2_5 = F.conv2d(out1[:, 4:5,:,:], self.weight2_5, stride=1, padding=1, groups=1)
            out2_6 = F.conv2d(out1[:, 5:6,:,:], self.weight2_6, stride=1, padding=1, groups=1)
            out2_7 = F.conv2d(out1[:, 6:7,:,:], self.weight2_7, stride=1, padding=1, groups=1)
            out2_8 = F.conv2d(out1[:, 7:8,:,:], self.weight2_8, stride=1, padding=1, groups=1)
            out2_9 = F.conv2d(out1[:, 8:9,:,:], self.weight2_9, stride=1, padding=1, groups=1)
            out2_10 = F.conv2d(out1[:, 9:10,:,:], self.weight2_10, stride=1, padding=1, groups=1)
            out2_11 = F.conv2d(out1[:, 10:11,:,:], self.weight2_11, stride=1, padding=1, groups=1)
            out2_12 = F.conv2d(out1[:, 11:12,:,:], self.weight2_12, stride=1, padding=1, groups=1)
            out2_13 = F.conv2d(out1[:, 12:13,:,:], self.weight2_13, stride=1, padding=1, groups=1)
            out2_14 = F.conv2d(out1[:, 13:14,:,:], self.weight2_14, stride=1, padding=1, groups=1)
            out2_15 = F.conv2d(out1[:, 14:15,:,:], self.weight2_15, stride=1, padding=1, groups=1)
            out2_16 = F.conv2d(out1[:, 15:16,:,:], self.weight2_16, stride=1, padding=1, groups=1)
            out2_17 = F.conv2d(out1[:, 16:17,:,:], self.weight2_17, stride=1, padding=1, groups=1)
            out2_18 = F.conv2d(out1[:, 17:18,:,:], self.weight2_18, stride=1, padding=1, groups=1)
            out2_19 = F.conv2d(out1[:, 18:19,:,:], self.weight2_19, stride=1, padding=1, groups=1)
            out2_20 = F.conv2d(out1[:, 19:20,:,:], self.weight2_20, stride=1, padding=1, groups=1)
            out2_21 = F.conv2d(out1[:, 20:21,:,:], self.weight2_21, stride=1, padding=1, groups=1)
            out2_22 = F.conv2d(out1[:, 21:22,:,:], self.weight2_22, stride=1, padding=1, groups=1)
            out2_23 = F.conv2d(out1[:, 22:23,:,:], self.weight2_23, stride=1, padding=1, groups=1)
            out2_24 = F.conv2d(out1[:, 23:24,:,:], self.weight2_24, stride=1, padding=1, groups=1)
            out2_25 = F.conv2d(out1[:, 24:25,:,:], self.weight2_25, stride=1, padding=1, groups=1)
            out2_26 = F.conv2d(out1[:, 25:26,:,:], self.weight2_26, stride=1, padding=1, groups=1)
            out2_27 = F.conv2d(out1[:, 26:27,:,:], self.weight2_27, stride=1, padding=1, groups=1)
            out2_28 = F.conv2d(out1[:, 27:28,:,:], self.weight2_28, stride=1, padding=1, groups=1)
            out2_29 = F.conv2d(out1[:, 28:29,:,:], self.weight2_29, stride=1, padding=1, groups=1)
            out2_30 = F.conv2d(out1[:, 29:30,:,:], self.weight2_30, stride=1, padding=1, groups=1)
            out2_31 = F.conv2d(out1[:, 30:31,:,:], self.weight2_31, stride=1, padding=1, groups=1)
            out2_32 = F.conv2d(out1[:, 31:32,:,:], self.weight2_32, stride=1, padding=1, groups=1)
            out2_33 = F.conv2d(out1[:, 32:33,:,:], self.weight2_33, stride=1, padding=1, groups=1)
            out2_34 = F.conv2d(out1[:, 33:34,:,:], self.weight2_34, stride=1, padding=1, groups=1)
            out2_35 = F.conv2d(out1[:, 34:35,:,:], self.weight2_35, stride=1, padding=1, groups=1)
            out2_36 = F.conv2d(out1[:, 35:36,:,:], self.weight2_36, stride=1, padding=1, groups=1)
            out2_37 = F.conv2d(out1[:, 36:37,:,:], self.weight2_37, stride=1, padding=1, groups=1)
            out2_38 = F.conv2d(out1[:, 37:38,:,:], self.weight2_38, stride=1, padding=1, groups=1)
            out2_39 = F.conv2d(out1[:, 38:39,:,:], self.weight2_39, stride=1, padding=1, groups=1)
            out2_40 = F.conv2d(out1[:, 39:40,:,:], self.weight2_40, stride=1, padding=1, groups=1)
            out2_41 = F.conv2d(out1[:, 40:41,:,:], self.weight2_41, stride=1, padding=1, groups=1)
            out2_42 = F.conv2d(out1[:, 41:42,:,:], self.weight2_42, stride=1, padding=1, groups=1)
            out2_43 = F.conv2d(out1[:, 42:43,:,:], self.weight2_43, stride=1, padding=1, groups=1)
            out2_44 = F.conv2d(out1[:, 43:44,:,:], self.weight2_44, stride=1, padding=1, groups=1)
            out2_45 = F.conv2d(out1[:, 44:45,:,:], self.weight2_45, stride=1, padding=1, groups=1)
            out2_46 = F.conv2d(out1[:, 45:46,:,:], self.weight2_46, stride=1, padding=1, groups=1)
            out2_47 = F.conv2d(out1[:, 46:47,:,:], self.weight2_47, stride=1, padding=1, groups=1)
            out2_48 = F.conv2d(out1[:, 47:48,:,:], self.weight2_48, stride=1, padding=1, groups=1)
            out2_49 = F.conv2d(out1[:, 48:49,:,:], self.weight2_49, stride=1, padding=1, groups=1)
            out2_50 = F.conv2d(out1[:, 49:50,:,:], self.weight2_50, stride=1, padding=1, groups=1)
            out2_51 = F.conv2d(out1[:, 50:51,:,:], self.weight2_51, stride=1, padding=1, groups=1)
            out2_52 = F.conv2d(out1[:, 51:52,:,:], self.weight2_52, stride=1, padding=1, groups=1)
            out2_53 = F.conv2d(out1[:, 52:53,:,:], self.weight2_53, stride=1, padding=1, groups=1)
            out2_54 = F.conv2d(out1[:, 53:54,:,:], self.weight2_54, stride=1, padding=1, groups=1)
            out2_55 = F.conv2d(out1[:, 54:55,:,:], self.weight2_55, stride=1, padding=1, groups=1)
            out2_56 = F.conv2d(out1[:, 55:56,:,:], self.weight2_56, stride=1, padding=1, groups=1)
            out2_57 = F.conv2d(out1[:, 56:57,:,:], self.weight2_57, stride=1, padding=1, groups=1)
            out2_58 = F.conv2d(out1[:, 57:58,:,:], self.weight2_58, stride=1, padding=1, groups=1)
            out2_59 = F.conv2d(out1[:, 58:59,:,:], self.weight2_59, stride=1, padding=1, groups=1)
            out2_60 = F.conv2d(out1[:, 59:60,:,:], self.weight2_60, stride=1, padding=1, groups=1)
            out2_61 = F.conv2d(out1[:, 60:61,:,:], self.weight2_61, stride=1, padding=1, groups=1)
            out2_62 = F.conv2d(out1[:, 61:62,:,:], self.weight2_62, stride=1, padding=1, groups=1)
            out2_63 = F.conv2d(out1[:, 62:63,:,:], self.weight2_63, stride=1, padding=1, groups=1)
            out2_64 = F.conv2d(out1[:, 63:64,:,:], self.weight2_64, stride=1, padding=1, groups=1)
            out2_65 = F.conv2d(out1[:, 64:65,:,:], self.weight2_65, stride=1, padding=1, groups=1)
            out2_66 = F.conv2d(out1[:, 65:66,:,:], self.weight2_66, stride=1, padding=1, groups=1)
            out2_67 = F.conv2d(out1[:, 66:67,:,:], self.weight2_67, stride=1, padding=1, groups=1)
            out2_68 = F.conv2d(out1[:, 67:68,:,:], self.weight2_68, stride=1, padding=1, groups=1)
            out2_69 = F.conv2d(out1[:, 68:69,:,:], self.weight2_69, stride=1, padding=1, groups=1)
            out2_70 = F.conv2d(out1[:, 69:70,:,:], self.weight2_70, stride=1, padding=1, groups=1)
            out2_71 = F.conv2d(out1[:, 70:71,:,:], self.weight2_71, stride=1, padding=1, groups=1)
            out2_72 = F.conv2d(out1[:, 71:72,:,:], self.weight2_72, stride=1, padding=1, groups=1)
            out2_73 = F.conv2d(out1[:, 72:73,:,:], self.weight2_73, stride=1, padding=1, groups=1)
            out2_74 = F.conv2d(out1[:, 73:74,:,:], self.weight2_74, stride=1, padding=1, groups=1)
            out2_75 = F.conv2d(out1[:, 74:75,:,:], self.weight2_75, stride=1, padding=1, groups=1)
            out2_76 = F.conv2d(out1[:, 75:76,:,:], self.weight2_76, stride=1, padding=1, groups=1)
            out2_77 = F.conv2d(out1[:, 76:77,:,:], self.weight2_77, stride=1, padding=1, groups=1)
            out2_78 = F.conv2d(out1[:, 77:78,:,:], self.weight2_78, stride=1, padding=1, groups=1)
            out2_79 = F.conv2d(out1[:, 78:79,:,:], self.weight2_79, stride=1, padding=1, groups=1)
            out2_80 = F.conv2d(out1[:, 79:80,:,:], self.weight2_80, stride=1, padding=1, groups=1)
            out2_81 = F.conv2d(out1[:, 80:81,:,:], self.weight2_81, stride=1, padding=1, groups=1)
            out2_82 = F.conv2d(out1[:, 81:82,:,:], self.weight2_82, stride=1, padding=1, groups=1)
            out2_83 = F.conv2d(out1[:, 82:83,:,:], self.weight2_83, stride=1, padding=1, groups=1)
            out2_84 = F.conv2d(out1[:, 83:84,:,:], self.weight2_84, stride=1, padding=1, groups=1)
            out2_85 = F.conv2d(out1[:, 84:85,:,:], self.weight2_85, stride=1, padding=1, groups=1)
            out2_86 = F.conv2d(out1[:, 85:86,:,:], self.weight2_86, stride=1, padding=1, groups=1)
            out2_87 = F.conv2d(out1[:, 86:87,:,:], self.weight2_87, stride=1, padding=1, groups=1)
            out2_88 = F.conv2d(out1[:, 87:88,:,:], self.weight2_88, stride=1, padding=1, groups=1)
            out2_89 = F.conv2d(out1[:, 88:89,:,:], self.weight2_89, stride=1, padding=1, groups=1)
            out2_90 = F.conv2d(out1[:, 89:90,:,:], self.weight2_90, stride=1, padding=1, groups=1)
            out2_91 = F.conv2d(out1[:, 90:91,:,:], self.weight2_91, stride=1, padding=1, groups=1)
            out2_92 = F.conv2d(out1[:, 91:92,:,:], self.weight2_92, stride=1, padding=1, groups=1)
            out2_93 = F.conv2d(out1[:, 92:93,:,:], self.weight2_93, stride=1, padding=1, groups=1)
            out2_94 = F.conv2d(out1[:, 93:94,:,:], self.weight2_94, stride=1, padding=1, groups=1)
            out2_95 = F.conv2d(out1[:, 94:95,:,:], self.weight2_95, stride=1, padding=1, groups=1)
            out2_96 = F.conv2d(out1[:, 95:96,:,:], self.weight2_96, stride=1, padding=1, groups=1)
            out2_97 = F.conv2d(out1[:, 96:97,:,:], self.weight2_97, stride=1, padding=1, groups=1)
            out2_98 = F.conv2d(out1[:, 97:98,:,:], self.weight2_98, stride=1, padding=1, groups=1)
            out2_99 = F.conv2d(out1[:, 98:99,:,:], self.weight2_99, stride=1, padding=1, groups=1)
            out2_100 = F.conv2d(out1[:, 99:100,:,:], self.weight2_100, stride=1, padding=1, groups=1)
            out2_101 = F.conv2d(out1[:, 100:101,:,:], self.weight2_101, stride=1, padding=1, groups=1)
            out2_102 = F.conv2d(out1[:, 101:102,:,:], self.weight2_102, stride=1, padding=1, groups=1)
            out2_103 = F.conv2d(out1[:, 102:103,:,:], self.weight2_103, stride=1, padding=1, groups=1)
            out2_104 = F.conv2d(out1[:, 103:104,:,:], self.weight2_104, stride=1, padding=1, groups=1)
            out2_105 = F.conv2d(out1[:, 104:105,:,:], self.weight2_105, stride=1, padding=1, groups=1)
            out2_106 = F.conv2d(out1[:, 105:106,:,:], self.weight2_106, stride=1, padding=1, groups=1)
            out2_107 = F.conv2d(out1[:, 106:107,:,:], self.weight2_107, stride=1, padding=1, groups=1)
            out2_108 = F.conv2d(out1[:, 107:108,:,:], self.weight2_108, stride=1, padding=1, groups=1)
            out2_109 = F.conv2d(out1[:, 108:109,:,:], self.weight2_109, stride=1, padding=1, groups=1)
            out2_110 = F.conv2d(out1[:, 109:110,:,:], self.weight2_110, stride=1, padding=1, groups=1)
            out2_111 = F.conv2d(out1[:, 110:111,:,:], self.weight2_111, stride=1, padding=1, groups=1)
            out2_112 = F.conv2d(out1[:, 111:112,:,:], self.weight2_112, stride=1, padding=1, groups=1)
            out2_113 = F.conv2d(out1[:, 112:113,:,:], self.weight2_113, stride=1, padding=1, groups=1)
            out2_114 = F.conv2d(out1[:, 113:114,:,:], self.weight2_114, stride=1, padding=1, groups=1)
            out2_115 = F.conv2d(out1[:, 114:115,:,:], self.weight2_115, stride=1, padding=1, groups=1)
            out2_116 = F.conv2d(out1[:, 115:116,:,:], self.weight2_116, stride=1, padding=1, groups=1)
            out2_117 = F.conv2d(out1[:, 116:117,:,:], self.weight2_117, stride=1, padding=1, groups=1)
            out2_118 = F.conv2d(out1[:, 117:118,:,:], self.weight2_118, stride=1, padding=1, groups=1)
            out2_119 = F.conv2d(out1[:, 118:119,:,:], self.weight2_119, stride=1, padding=1, groups=1)
            out2_120 = F.conv2d(out1[:, 119:120,:,:], self.weight2_120, stride=1, padding=1, groups=1)
            out2_121 = F.conv2d(out1[:, 120:121,:,:], self.weight2_121, stride=1, padding=1, groups=1)
            out2_122 = F.conv2d(out1[:, 121:122,:,:], self.weight2_122, stride=1, padding=1, groups=1)
            out2_123 = F.conv2d(out1[:, 122:123,:,:], self.weight2_123, stride=1, padding=1, groups=1)
            out2_124 = F.conv2d(out1[:, 123:124,:,:], self.weight2_124, stride=1, padding=1, groups=1)
            out2_125 = F.conv2d(out1[:, 124:125,:,:], self.weight2_125, stride=1, padding=1, groups=1)
            out2_126 = F.conv2d(out1[:, 125:126,:,:], self.weight2_126, stride=1, padding=1, groups=1)
            out2_127 = F.conv2d(out1[:, 126:127,:,:], self.weight2_127, stride=1, padding=1, groups=1)
            out2_128 = F.conv2d(out1[:, 127:128,:,:], self.weight2_128, stride=1, padding=1, groups=1)
            out2_129 = F.conv2d(out1[:, 128:129,:,:], self.weight2_129, stride=1, padding=1, groups=1)
            out2_130 = F.conv2d(out1[:, 129:130,:,:], self.weight2_130, stride=1, padding=1, groups=1)
            out2_131 = F.conv2d(out1[:, 130:131,:,:], self.weight2_131, stride=1, padding=1, groups=1)
            out2_132 = F.conv2d(out1[:, 131:132,:,:], self.weight2_132, stride=1, padding=1, groups=1)
            out2_133 = F.conv2d(out1[:, 132:133,:,:], self.weight2_133, stride=1, padding=1, groups=1)
            out2_134 = F.conv2d(out1[:, 133:134,:,:], self.weight2_134, stride=1, padding=1, groups=1)
            out2_135 = F.conv2d(out1[:, 134:135,:,:], self.weight2_135, stride=1, padding=1, groups=1)
            out2_136 = F.conv2d(out1[:, 135:136,:,:], self.weight2_136, stride=1, padding=1, groups=1)
            out2_137 = F.conv2d(out1[:, 136:137,:,:], self.weight2_137, stride=1, padding=1, groups=1)
            out2_138 = F.conv2d(out1[:, 137:138,:,:], self.weight2_138, stride=1, padding=1, groups=1)
            out2_139 = F.conv2d(out1[:, 138:139,:,:], self.weight2_139, stride=1, padding=1, groups=1)
            out2_140 = F.conv2d(out1[:, 139:140,:,:], self.weight2_140, stride=1, padding=1, groups=1)
            out2_141 = F.conv2d(out1[:, 140:141,:,:], self.weight2_141, stride=1, padding=1, groups=1)
            out2_142 = F.conv2d(out1[:, 141:142,:,:], self.weight2_142, stride=1, padding=1, groups=1)
            out2_143 = F.conv2d(out1[:, 142:143,:,:], self.weight2_143, stride=1, padding=1, groups=1)
            out2_144 = F.conv2d(out1[:, 143:144,:,:], self.weight2_144, stride=1, padding=1, groups=1)
            out2_145 = F.conv2d(out1[:, 144:145,:,:], self.weight2_145, stride=1, padding=1, groups=1)
            out2_146 = F.conv2d(out1[:, 145:146,:,:], self.weight2_146, stride=1, padding=1, groups=1)
            out2_147 = F.conv2d(out1[:, 146:147,:,:], self.weight2_147, stride=1, padding=1, groups=1)
            out2_148 = F.conv2d(out1[:, 147:148,:,:], self.weight2_148, stride=1, padding=1, groups=1)
            out2_149 = F.conv2d(out1[:, 148:149,:,:], self.weight2_149, stride=1, padding=1, groups=1)
            out2_150 = F.conv2d(out1[:, 149:150,:,:], self.weight2_150, stride=1, padding=1, groups=1)
            out2_151 = F.conv2d(out1[:, 150:151,:,:], self.weight2_151, stride=1, padding=1, groups=1)
            out2_152 = F.conv2d(out1[:, 151:152,:,:], self.weight2_152, stride=1, padding=1, groups=1)
            out2_153 = F.conv2d(out1[:, 152:153,:,:], self.weight2_153, stride=1, padding=1, groups=1)
            out2_154 = F.conv2d(out1[:, 153:154,:,:], self.weight2_154, stride=1, padding=1, groups=1)
            out2_155 = F.conv2d(out1[:, 154:155,:,:], self.weight2_155, stride=1, padding=1, groups=1)
            out2_156 = F.conv2d(out1[:, 155:156,:,:], self.weight2_156, stride=1, padding=1, groups=1)
            out2_157 = F.conv2d(out1[:, 156:157,:,:], self.weight2_157, stride=1, padding=1, groups=1)
            out2_158 = F.conv2d(out1[:, 157:158,:,:], self.weight2_158, stride=1, padding=1, groups=1)
            out2_159 = F.conv2d(out1[:, 158:159,:,:], self.weight2_159, stride=1, padding=1, groups=1)
            out2_160 = F.conv2d(out1[:, 159:160,:,:], self.weight2_160, stride=1, padding=1, groups=1)
            out2_161 = F.conv2d(out1[:, 160:161,:,:], self.weight2_161, stride=1, padding=1, groups=1)
            out2_162 = F.conv2d(out1[:, 161:162,:,:], self.weight2_162, stride=1, padding=1, groups=1)
            out2_163 = F.conv2d(out1[:, 162:163,:,:], self.weight2_163, stride=1, padding=1, groups=1)
            out2_164 = F.conv2d(out1[:, 163:164,:,:], self.weight2_164, stride=1, padding=1, groups=1)
            out2_165 = F.conv2d(out1[:, 164:165,:,:], self.weight2_165, stride=1, padding=1, groups=1)
            out2_166 = F.conv2d(out1[:, 165:166,:,:], self.weight2_166, stride=1, padding=1, groups=1)
            out2_167 = F.conv2d(out1[:, 166:167,:,:], self.weight2_167, stride=1, padding=1, groups=1)
            out2_168 = F.conv2d(out1[:, 167:168,:,:], self.weight2_168, stride=1, padding=1, groups=1)
            out2_169 = F.conv2d(out1[:, 168:169,:,:], self.weight2_169, stride=1, padding=1, groups=1)
            out2_170 = F.conv2d(out1[:, 169:170,:,:], self.weight2_170, stride=1, padding=1, groups=1)
            out2_171 = F.conv2d(out1[:, 170:171,:,:], self.weight2_171, stride=1, padding=1, groups=1)
            out2_172 = F.conv2d(out1[:, 171:172,:,:], self.weight2_172, stride=1, padding=1, groups=1)
            out2_173 = F.conv2d(out1[:, 172:173,:,:], self.weight2_173, stride=1, padding=1, groups=1)
            out2_174 = F.conv2d(out1[:, 173:174,:,:], self.weight2_174, stride=1, padding=1, groups=1)
            out2_175 = F.conv2d(out1[:, 174:175,:,:], self.weight2_175, stride=1, padding=1, groups=1)
            out2_176 = F.conv2d(out1[:, 175:176,:,:], self.weight2_176, stride=1, padding=1, groups=1)
            out2_177 = F.conv2d(out1[:, 176:177,:,:], self.weight2_177, stride=1, padding=1, groups=1)
            out2_178 = F.conv2d(out1[:, 177:178,:,:], self.weight2_178, stride=1, padding=1, groups=1)
            out2_179 = F.conv2d(out1[:, 178:179,:,:], self.weight2_179, stride=1, padding=1, groups=1)
            out2_180 = F.conv2d(out1[:, 179:180,:,:], self.weight2_180, stride=1, padding=1, groups=1)
            out2_181 = F.conv2d(out1[:, 180:181,:,:], self.weight2_181, stride=1, padding=1, groups=1)
            out2_182 = F.conv2d(out1[:, 181:182,:,:], self.weight2_182, stride=1, padding=1, groups=1)
            out2_183 = F.conv2d(out1[:, 182:183,:,:], self.weight2_183, stride=1, padding=1, groups=1)
            out2_184 = F.conv2d(out1[:, 183:184,:,:], self.weight2_184, stride=1, padding=1, groups=1)
            out2_185 = F.conv2d(out1[:, 184:185,:,:], self.weight2_185, stride=1, padding=1, groups=1)
            out2_186 = F.conv2d(out1[:, 185:186,:,:], self.weight2_186, stride=1, padding=1, groups=1)
            out2_187 = F.conv2d(out1[:, 186:187,:,:], self.weight2_187, stride=1, padding=1, groups=1)
            out2_188 = F.conv2d(out1[:, 187:188,:,:], self.weight2_188, stride=1, padding=1, groups=1)
            out2_189 = F.conv2d(out1[:, 188:189,:,:], self.weight2_189, stride=1, padding=1, groups=1)
            out2_190 = F.conv2d(out1[:, 189:190,:,:], self.weight2_190, stride=1, padding=1, groups=1)
            out2_191 = F.conv2d(out1[:, 190:191,:,:], self.weight2_191, stride=1, padding=1, groups=1)
            out2_192 = F.conv2d(out1[:, 191:192,:,:], self.weight2_192, stride=1, padding=1, groups=1)

            out2 = torch.cat([out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10,
                    out2_11, out2_12, out2_13, out2_14, out2_15, out2_16, out2_17, out2_18, out2_19, out2_20,
                    out2_21, out2_22, out2_23, out2_24, out2_25, out2_26, out2_27, out2_28, out2_29, out2_30,
                    out2_31, out2_32, out2_33, out2_34, out2_35, out2_36, out2_37, out2_38, out2_39, out2_40,
                    out2_41, out2_42, out2_43, out2_44, out2_45, out2_46, out2_47, out2_48, out2_49, out2_50,
                    out2_51, out2_52, out2_53, out2_54, out2_55, out2_56, out2_57, out2_58, out2_59, out2_60,
                    out2_61, out2_62, out2_63, out2_64, out2_65, out2_66, out2_67, out2_68, out2_69, out2_70,
                    out2_71, out2_72, out2_73, out2_74, out2_75, out2_76, out2_77, out2_78, out2_79, out2_80,
                    out2_81, out2_82, out2_83, out2_84, out2_85, out2_86, out2_87, out2_88, out2_89, out2_90,
                    out2_91, out2_92, out2_93, out2_94, out2_95, out2_96, out2_97, out2_98, out2_99, out2_100,
                    out2_101, out2_102, out2_103, out2_104, out2_105, out2_106, out2_107, out2_108, out2_109, out2_110,
                    out2_111, out2_112, out2_113, out2_114, out2_115, out2_116, out2_117, out2_118, out2_119, out2_120,
                    out2_121, out2_122, out2_123, out2_124, out2_125, out2_126, out2_127, out2_128, out2_129, out2_130,
                    out2_131, out2_132, out2_133, out2_134, out2_135, out2_136, out2_137, out2_138, out2_139, out2_140,
                    out2_141, out2_142, out2_143, out2_144, out2_145, out2_146, out2_147, out2_148, out2_149, out2_150,
                    out2_151, out2_152, out2_153, out2_154, out2_155, out2_156, out2_157, out2_158, out2_159, out2_160,
                    out2_161, out2_162, out2_163, out2_164, out2_165, out2_166, out2_167, out2_168, out2_169, out2_170,
                    out2_171, out2_172, out2_173, out2_174, out2_175, out2_176, out2_177, out2_178, out2_179, out2_180,
                    out2_181, out2_182, out2_183, out2_184, out2_185, out2_186, out2_187, out2_188, out2_189, out2_190,
                    out2_191, out2_192], dim=1)


            x_pred_mask = self.bn1(out2)

        elif (cfg.filter_mode=='x' and self.planes==256):
            out1 = None
            out2 = None

            out1_1 = F.conv2d(x[:, 0:1,:,:], self.weight1_1, stride=1, padding=1, groups=1)
            out1_2 = F.conv2d(x[:, 1:2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
            out1_3 = F.conv2d(x[:, 2:3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
            out1_4 = F.conv2d(x[:, 3:4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
            out1_5 = F.conv2d(x[:, 4:5,:,:], self.weight1_5, stride=1, padding=1, groups=1)
            out1_6 = F.conv2d(x[:, 5:6,:,:], self.weight1_6, stride=1, padding=1, groups=1)
            out1_7 = F.conv2d(x[:, 6:7,:,:], self.weight1_7, stride=1, padding=1, groups=1)
            out1_8 = F.conv2d(x[:, 7:8,:,:], self.weight1_8, stride=1, padding=1, groups=1)
            out1_9 = F.conv2d(x[:, 8:9,:,:], self.weight1_9, stride=1, padding=1, groups=1)
            out1_10 = F.conv2d(x[:, 9:10,:,:], self.weight1_10, stride=1, padding=1, groups=1)
            out1_11 = F.conv2d(x[:, 10:11,:,:], self.weight1_11, stride=1, padding=1, groups=1)
            out1_12 = F.conv2d(x[:, 11:12,:,:], self.weight1_12, stride=1, padding=1, groups=1)
            out1_13 = F.conv2d(x[:, 12:13,:,:], self.weight1_13, stride=1, padding=1, groups=1)
            out1_14 = F.conv2d(x[:, 13:14,:,:], self.weight1_14, stride=1, padding=1, groups=1)
            out1_15 = F.conv2d(x[:, 14:15,:,:], self.weight1_15, stride=1, padding=1, groups=1)
            out1_16 = F.conv2d(x[:, 15:16,:,:], self.weight1_16, stride=1, padding=1, groups=1)
            out1_17 = F.conv2d(x[:, 16:17,:,:], self.weight1_17, stride=1, padding=1, groups=1)
            out1_18 = F.conv2d(x[:, 17:18,:,:], self.weight1_18, stride=1, padding=1, groups=1)
            out1_19 = F.conv2d(x[:, 18:19,:,:], self.weight1_19, stride=1, padding=1, groups=1)
            out1_20 = F.conv2d(x[:, 19:20,:,:], self.weight1_20, stride=1, padding=1, groups=1)
            out1_21 = F.conv2d(x[:, 20:21,:,:], self.weight1_21, stride=1, padding=1, groups=1)
            out1_22 = F.conv2d(x[:, 21:22,:,:], self.weight1_22, stride=1, padding=1, groups=1)
            out1_23 = F.conv2d(x[:, 22:23,:,:], self.weight1_23, stride=1, padding=1, groups=1)
            out1_24 = F.conv2d(x[:, 23:24,:,:], self.weight1_24, stride=1, padding=1, groups=1)
            out1_25 = F.conv2d(x[:, 24:25,:,:], self.weight1_25, stride=1, padding=1, groups=1)
            out1_26 = F.conv2d(x[:, 25:26,:,:], self.weight1_26, stride=1, padding=1, groups=1)
            out1_27 = F.conv2d(x[:, 26:27,:,:], self.weight1_27, stride=1, padding=1, groups=1)
            out1_28 = F.conv2d(x[:, 27:28,:,:], self.weight1_28, stride=1, padding=1, groups=1)
            out1_29 = F.conv2d(x[:, 28:29,:,:], self.weight1_29, stride=1, padding=1, groups=1)
            out1_30 = F.conv2d(x[:, 29:30,:,:], self.weight1_30, stride=1, padding=1, groups=1)
            out1_31 = F.conv2d(x[:, 30:31,:,:], self.weight1_31, stride=1, padding=1, groups=1)
            out1_32 = F.conv2d(x[:, 31:32,:,:], self.weight1_32, stride=1, padding=1, groups=1)
            out1_33 = F.conv2d(x[:, 32:33,:,:], self.weight1_33, stride=1, padding=1, groups=1)
            out1_34 = F.conv2d(x[:, 33:34,:,:], self.weight1_34, stride=1, padding=1, groups=1)
            out1_35 = F.conv2d(x[:, 34:35,:,:], self.weight1_35, stride=1, padding=1, groups=1)
            out1_36 = F.conv2d(x[:, 35:36,:,:], self.weight1_36, stride=1, padding=1, groups=1)
            out1_37 = F.conv2d(x[:, 36:37,:,:], self.weight1_37, stride=1, padding=1, groups=1)
            out1_38 = F.conv2d(x[:, 37:38,:,:], self.weight1_38, stride=1, padding=1, groups=1)
            out1_39 = F.conv2d(x[:, 38:39,:,:], self.weight1_39, stride=1, padding=1, groups=1)
            out1_40 = F.conv2d(x[:, 39:40,:,:], self.weight1_40, stride=1, padding=1, groups=1)
            out1_41 = F.conv2d(x[:, 40:41,:,:], self.weight1_41, stride=1, padding=1, groups=1)
            out1_42 = F.conv2d(x[:, 41:42,:,:], self.weight1_42, stride=1, padding=1, groups=1)
            out1_43 = F.conv2d(x[:, 42:43,:,:], self.weight1_43, stride=1, padding=1, groups=1)
            out1_44 = F.conv2d(x[:, 43:44,:,:], self.weight1_44, stride=1, padding=1, groups=1)
            out1_45 = F.conv2d(x[:, 44:45,:,:], self.weight1_45, stride=1, padding=1, groups=1)
            out1_46 = F.conv2d(x[:, 45:46,:,:], self.weight1_46, stride=1, padding=1, groups=1)
            out1_47 = F.conv2d(x[:, 46:47,:,:], self.weight1_47, stride=1, padding=1, groups=1)
            out1_48 = F.conv2d(x[:, 47:48,:,:], self.weight1_48, stride=1, padding=1, groups=1)
            out1_49 = F.conv2d(x[:, 48:49,:,:], self.weight1_49, stride=1, padding=1, groups=1)
            out1_50 = F.conv2d(x[:, 49:50,:,:], self.weight1_50, stride=1, padding=1, groups=1)
            out1_51 = F.conv2d(x[:, 50:51,:,:], self.weight1_51, stride=1, padding=1, groups=1)
            out1_52 = F.conv2d(x[:, 51:52,:,:], self.weight1_52, stride=1, padding=1, groups=1)
            out1_53 = F.conv2d(x[:, 52:53,:,:], self.weight1_53, stride=1, padding=1, groups=1)
            out1_54 = F.conv2d(x[:, 53:54,:,:], self.weight1_54, stride=1, padding=1, groups=1)
            out1_55 = F.conv2d(x[:, 54:55,:,:], self.weight1_55, stride=1, padding=1, groups=1)
            out1_56 = F.conv2d(x[:, 55:56,:,:], self.weight1_56, stride=1, padding=1, groups=1)
            out1_57 = F.conv2d(x[:, 56:57,:,:], self.weight1_57, stride=1, padding=1, groups=1)
            out1_58 = F.conv2d(x[:, 57:58,:,:], self.weight1_58, stride=1, padding=1, groups=1)
            out1_59 = F.conv2d(x[:, 58:59,:,:], self.weight1_59, stride=1, padding=1, groups=1)
            out1_60 = F.conv2d(x[:, 59:60,:,:], self.weight1_60, stride=1, padding=1, groups=1)
            out1_61 = F.conv2d(x[:, 60:61,:,:], self.weight1_61, stride=1, padding=1, groups=1)
            out1_62 = F.conv2d(x[:, 61:62,:,:], self.weight1_62, stride=1, padding=1, groups=1)
            out1_63 = F.conv2d(x[:, 62:63,:,:], self.weight1_63, stride=1, padding=1, groups=1)
            out1_64 = F.conv2d(x[:, 63:64,:,:], self.weight1_64, stride=1, padding=1, groups=1)
            out1_65 = F.conv2d(x[:, 64:65,:,:], self.weight1_65, stride=1, padding=1, groups=1)
            out1_66 = F.conv2d(x[:, 65:66,:,:], self.weight1_66, stride=1, padding=1, groups=1)
            out1_67 = F.conv2d(x[:, 66:67,:,:], self.weight1_67, stride=1, padding=1, groups=1)
            out1_68 = F.conv2d(x[:, 67:68,:,:], self.weight1_68, stride=1, padding=1, groups=1)
            out1_69 = F.conv2d(x[:, 68:69,:,:], self.weight1_69, stride=1, padding=1, groups=1)
            out1_70 = F.conv2d(x[:, 69:70,:,:], self.weight1_70, stride=1, padding=1, groups=1)
            out1_71 = F.conv2d(x[:, 70:71,:,:], self.weight1_71, stride=1, padding=1, groups=1)
            out1_72 = F.conv2d(x[:, 71:72,:,:], self.weight1_72, stride=1, padding=1, groups=1)
            out1_73 = F.conv2d(x[:, 72:73,:,:], self.weight1_73, stride=1, padding=1, groups=1)
            out1_74 = F.conv2d(x[:, 73:74,:,:], self.weight1_74, stride=1, padding=1, groups=1)
            out1_75 = F.conv2d(x[:, 74:75,:,:], self.weight1_75, stride=1, padding=1, groups=1)
            out1_76 = F.conv2d(x[:, 75:76,:,:], self.weight1_76, stride=1, padding=1, groups=1)
            out1_77 = F.conv2d(x[:, 76:77,:,:], self.weight1_77, stride=1, padding=1, groups=1)
            out1_78 = F.conv2d(x[:, 77:78,:,:], self.weight1_78, stride=1, padding=1, groups=1)
            out1_79 = F.conv2d(x[:, 78:79,:,:], self.weight1_79, stride=1, padding=1, groups=1)
            out1_80 = F.conv2d(x[:, 79:80,:,:], self.weight1_80, stride=1, padding=1, groups=1)
            out1_81 = F.conv2d(x[:, 80:81,:,:], self.weight1_81, stride=1, padding=1, groups=1)
            out1_82 = F.conv2d(x[:, 81:82,:,:], self.weight1_82, stride=1, padding=1, groups=1)
            out1_83 = F.conv2d(x[:, 82:83,:,:], self.weight1_83, stride=1, padding=1, groups=1)
            out1_84 = F.conv2d(x[:, 83:84,:,:], self.weight1_84, stride=1, padding=1, groups=1)
            out1_85 = F.conv2d(x[:, 84:85,:,:], self.weight1_85, stride=1, padding=1, groups=1)
            out1_86 = F.conv2d(x[:, 85:86,:,:], self.weight1_86, stride=1, padding=1, groups=1)
            out1_87 = F.conv2d(x[:, 86:87,:,:], self.weight1_87, stride=1, padding=1, groups=1)
            out1_88 = F.conv2d(x[:, 87:88,:,:], self.weight1_88, stride=1, padding=1, groups=1)
            out1_89 = F.conv2d(x[:, 88:89,:,:], self.weight1_89, stride=1, padding=1, groups=1)
            out1_90 = F.conv2d(x[:, 89:90,:,:], self.weight1_90, stride=1, padding=1, groups=1)
            out1_91 = F.conv2d(x[:, 90:91,:,:], self.weight1_91, stride=1, padding=1, groups=1)
            out1_92 = F.conv2d(x[:, 91:92,:,:], self.weight1_92, stride=1, padding=1, groups=1)
            out1_93 = F.conv2d(x[:, 92:93,:,:], self.weight1_93, stride=1, padding=1, groups=1)
            out1_94 = F.conv2d(x[:, 93:94,:,:], self.weight1_94, stride=1, padding=1, groups=1)
            out1_95 = F.conv2d(x[:, 94:95,:,:], self.weight1_95, stride=1, padding=1, groups=1)
            out1_96 = F.conv2d(x[:, 95:96,:,:], self.weight1_96, stride=1, padding=1, groups=1)
            out1_97 = F.conv2d(x[:, 96:97,:,:], self.weight1_97, stride=1, padding=1, groups=1)
            out1_98 = F.conv2d(x[:, 97:98,:,:], self.weight1_98, stride=1, padding=1, groups=1)
            out1_99 = F.conv2d(x[:, 98:99,:,:], self.weight1_99, stride=1, padding=1, groups=1)
            out1_100 = F.conv2d(x[:, 99:100,:,:], self.weight1_100, stride=1, padding=1, groups=1)
            out1_101 = F.conv2d(x[:, 100:101,:,:], self.weight1_101, stride=1, padding=1, groups=1)
            out1_102 = F.conv2d(x[:, 101:102,:,:], self.weight1_102, stride=1, padding=1, groups=1)
            out1_103 = F.conv2d(x[:, 102:103,:,:], self.weight1_103, stride=1, padding=1, groups=1)
            out1_104 = F.conv2d(x[:, 103:104,:,:], self.weight1_104, stride=1, padding=1, groups=1)
            out1_105 = F.conv2d(x[:, 104:105,:,:], self.weight1_105, stride=1, padding=1, groups=1)
            out1_106 = F.conv2d(x[:, 105:106,:,:], self.weight1_106, stride=1, padding=1, groups=1)
            out1_107 = F.conv2d(x[:, 106:107,:,:], self.weight1_107, stride=1, padding=1, groups=1)
            out1_108 = F.conv2d(x[:, 107:108,:,:], self.weight1_108, stride=1, padding=1, groups=1)
            out1_109 = F.conv2d(x[:, 108:109,:,:], self.weight1_109, stride=1, padding=1, groups=1)
            out1_110 = F.conv2d(x[:, 109:110,:,:], self.weight1_110, stride=1, padding=1, groups=1)
            out1_111 = F.conv2d(x[:, 110:111,:,:], self.weight1_111, stride=1, padding=1, groups=1)
            out1_112 = F.conv2d(x[:, 111:112,:,:], self.weight1_112, stride=1, padding=1, groups=1)
            out1_113 = F.conv2d(x[:, 112:113,:,:], self.weight1_113, stride=1, padding=1, groups=1)
            out1_114 = F.conv2d(x[:, 113:114,:,:], self.weight1_114, stride=1, padding=1, groups=1)
            out1_115 = F.conv2d(x[:, 114:115,:,:], self.weight1_115, stride=1, padding=1, groups=1)
            out1_116 = F.conv2d(x[:, 115:116,:,:], self.weight1_116, stride=1, padding=1, groups=1)
            out1_117 = F.conv2d(x[:, 116:117,:,:], self.weight1_117, stride=1, padding=1, groups=1)
            out1_118 = F.conv2d(x[:, 117:118,:,:], self.weight1_118, stride=1, padding=1, groups=1)
            out1_119 = F.conv2d(x[:, 118:119,:,:], self.weight1_119, stride=1, padding=1, groups=1)
            out1_120 = F.conv2d(x[:, 119:120,:,:], self.weight1_120, stride=1, padding=1, groups=1)
            out1_121 = F.conv2d(x[:, 120:121,:,:], self.weight1_121, stride=1, padding=1, groups=1)
            out1_122 = F.conv2d(x[:, 121:122,:,:], self.weight1_122, stride=1, padding=1, groups=1)
            out1_123 = F.conv2d(x[:, 122:123,:,:], self.weight1_123, stride=1, padding=1, groups=1)
            out1_124 = F.conv2d(x[:, 123:124,:,:], self.weight1_124, stride=1, padding=1, groups=1)
            out1_125 = F.conv2d(x[:, 124:125,:,:], self.weight1_125, stride=1, padding=1, groups=1)
            out1_126 = F.conv2d(x[:, 125:126,:,:], self.weight1_126, stride=1, padding=1, groups=1)
            out1_127 = F.conv2d(x[:, 126:127,:,:], self.weight1_127, stride=1, padding=1, groups=1)
            out1_128 = F.conv2d(x[:, 127:128,:,:], self.weight1_128, stride=1, padding=1, groups=1)
            out1_129 = F.conv2d(x[:, 128:129,:,:], self.weight1_129, stride=1, padding=1, groups=1)
            out1_130 = F.conv2d(x[:, 129:130,:,:], self.weight1_130, stride=1, padding=1, groups=1)
            out1_131 = F.conv2d(x[:, 130:131,:,:], self.weight1_131, stride=1, padding=1, groups=1)
            out1_132 = F.conv2d(x[:, 131:132,:,:], self.weight1_132, stride=1, padding=1, groups=1)
            out1_133 = F.conv2d(x[:, 132:133,:,:], self.weight1_133, stride=1, padding=1, groups=1)
            out1_134 = F.conv2d(x[:, 133:134,:,:], self.weight1_134, stride=1, padding=1, groups=1)
            out1_135 = F.conv2d(x[:, 134:135,:,:], self.weight1_135, stride=1, padding=1, groups=1)
            out1_136 = F.conv2d(x[:, 135:136,:,:], self.weight1_136, stride=1, padding=1, groups=1)
            out1_137 = F.conv2d(x[:, 136:137,:,:], self.weight1_137, stride=1, padding=1, groups=1)
            out1_138 = F.conv2d(x[:, 137:138,:,:], self.weight1_138, stride=1, padding=1, groups=1)
            out1_139 = F.conv2d(x[:, 138:139,:,:], self.weight1_139, stride=1, padding=1, groups=1)
            out1_140 = F.conv2d(x[:, 139:140,:,:], self.weight1_140, stride=1, padding=1, groups=1)
            out1_141 = F.conv2d(x[:, 140:141,:,:], self.weight1_141, stride=1, padding=1, groups=1)
            out1_142 = F.conv2d(x[:, 141:142,:,:], self.weight1_142, stride=1, padding=1, groups=1)
            out1_143 = F.conv2d(x[:, 142:143,:,:], self.weight1_143, stride=1, padding=1, groups=1)
            out1_144 = F.conv2d(x[:, 143:144,:,:], self.weight1_144, stride=1, padding=1, groups=1)
            out1_145 = F.conv2d(x[:, 144:145,:,:], self.weight1_145, stride=1, padding=1, groups=1)
            out1_146 = F.conv2d(x[:, 145:146,:,:], self.weight1_146, stride=1, padding=1, groups=1)
            out1_147 = F.conv2d(x[:, 146:147,:,:], self.weight1_147, stride=1, padding=1, groups=1)
            out1_148 = F.conv2d(x[:, 147:148,:,:], self.weight1_148, stride=1, padding=1, groups=1)
            out1_149 = F.conv2d(x[:, 148:149,:,:], self.weight1_149, stride=1, padding=1, groups=1)
            out1_150 = F.conv2d(x[:, 149:150,:,:], self.weight1_150, stride=1, padding=1, groups=1)
            out1_151 = F.conv2d(x[:, 150:151,:,:], self.weight1_151, stride=1, padding=1, groups=1)
            out1_152 = F.conv2d(x[:, 151:152,:,:], self.weight1_152, stride=1, padding=1, groups=1)
            out1_153 = F.conv2d(x[:, 152:153,:,:], self.weight1_153, stride=1, padding=1, groups=1)
            out1_154 = F.conv2d(x[:, 153:154,:,:], self.weight1_154, stride=1, padding=1, groups=1)
            out1_155 = F.conv2d(x[:, 154:155,:,:], self.weight1_155, stride=1, padding=1, groups=1)
            out1_156 = F.conv2d(x[:, 155:156,:,:], self.weight1_156, stride=1, padding=1, groups=1)
            out1_157 = F.conv2d(x[:, 156:157,:,:], self.weight1_157, stride=1, padding=1, groups=1)
            out1_158 = F.conv2d(x[:, 157:158,:,:], self.weight1_158, stride=1, padding=1, groups=1)
            out1_159 = F.conv2d(x[:, 158:159,:,:], self.weight1_159, stride=1, padding=1, groups=1)
            out1_160 = F.conv2d(x[:, 159:160,:,:], self.weight1_160, stride=1, padding=1, groups=1)
            out1_161 = F.conv2d(x[:, 160:161,:,:], self.weight1_161, stride=1, padding=1, groups=1)
            out1_162 = F.conv2d(x[:, 161:162,:,:], self.weight1_162, stride=1, padding=1, groups=1)
            out1_163 = F.conv2d(x[:, 162:163,:,:], self.weight1_163, stride=1, padding=1, groups=1)
            out1_164 = F.conv2d(x[:, 163:164,:,:], self.weight1_164, stride=1, padding=1, groups=1)
            out1_165 = F.conv2d(x[:, 164:165,:,:], self.weight1_165, stride=1, padding=1, groups=1)
            out1_166 = F.conv2d(x[:, 165:166,:,:], self.weight1_166, stride=1, padding=1, groups=1)
            out1_167 = F.conv2d(x[:, 166:167,:,:], self.weight1_167, stride=1, padding=1, groups=1)
            out1_168 = F.conv2d(x[:, 167:168,:,:], self.weight1_168, stride=1, padding=1, groups=1)
            out1_169 = F.conv2d(x[:, 168:169,:,:], self.weight1_169, stride=1, padding=1, groups=1)
            out1_170 = F.conv2d(x[:, 169:170,:,:], self.weight1_170, stride=1, padding=1, groups=1)
            out1_171 = F.conv2d(x[:, 170:171,:,:], self.weight1_171, stride=1, padding=1, groups=1)
            out1_172 = F.conv2d(x[:, 171:172,:,:], self.weight1_172, stride=1, padding=1, groups=1)
            out1_173 = F.conv2d(x[:, 172:173,:,:], self.weight1_173, stride=1, padding=1, groups=1)
            out1_174 = F.conv2d(x[:, 173:174,:,:], self.weight1_174, stride=1, padding=1, groups=1)
            out1_175 = F.conv2d(x[:, 174:175,:,:], self.weight1_175, stride=1, padding=1, groups=1)
            out1_176 = F.conv2d(x[:, 175:176,:,:], self.weight1_176, stride=1, padding=1, groups=1)
            out1_177 = F.conv2d(x[:, 176:177,:,:], self.weight1_177, stride=1, padding=1, groups=1)
            out1_178 = F.conv2d(x[:, 177:178,:,:], self.weight1_178, stride=1, padding=1, groups=1)
            out1_179 = F.conv2d(x[:, 178:179,:,:], self.weight1_179, stride=1, padding=1, groups=1)
            out1_180 = F.conv2d(x[:, 179:180,:,:], self.weight1_180, stride=1, padding=1, groups=1)
            out1_181 = F.conv2d(x[:, 180:181,:,:], self.weight1_181, stride=1, padding=1, groups=1)
            out1_182 = F.conv2d(x[:, 181:182,:,:], self.weight1_182, stride=1, padding=1, groups=1)
            out1_183 = F.conv2d(x[:, 182:183,:,:], self.weight1_183, stride=1, padding=1, groups=1)
            out1_184 = F.conv2d(x[:, 183:184,:,:], self.weight1_184, stride=1, padding=1, groups=1)
            out1_185 = F.conv2d(x[:, 184:185,:,:], self.weight1_185, stride=1, padding=1, groups=1)
            out1_186 = F.conv2d(x[:, 185:186,:,:], self.weight1_186, stride=1, padding=1, groups=1)
            out1_187 = F.conv2d(x[:, 186:187,:,:], self.weight1_187, stride=1, padding=1, groups=1)
            out1_188 = F.conv2d(x[:, 187:188,:,:], self.weight1_188, stride=1, padding=1, groups=1)
            out1_189 = F.conv2d(x[:, 188:189,:,:], self.weight1_189, stride=1, padding=1, groups=1)
            out1_190 = F.conv2d(x[:, 189:190,:,:], self.weight1_190, stride=1, padding=1, groups=1)
            out1_191 = F.conv2d(x[:, 190:191,:,:], self.weight1_191, stride=1, padding=1, groups=1)
            out1_192 = F.conv2d(x[:, 191:192,:,:], self.weight1_192, stride=1, padding=1, groups=1)
            out1_193 = F.conv2d(x[:, 192:193,:,:], self.weight1_193, stride=1, padding=1, groups=1)
            out1_194 = F.conv2d(x[:, 193:194,:,:], self.weight1_194, stride=1, padding=1, groups=1)
            out1_195 = F.conv2d(x[:, 194:195,:,:], self.weight1_195, stride=1, padding=1, groups=1)
            out1_196 = F.conv2d(x[:, 195:196,:,:], self.weight1_196, stride=1, padding=1, groups=1)
            out1_197 = F.conv2d(x[:, 196:197,:,:], self.weight1_197, stride=1, padding=1, groups=1)
            out1_198 = F.conv2d(x[:, 197:198,:,:], self.weight1_198, stride=1, padding=1, groups=1)
            out1_199 = F.conv2d(x[:, 198:199,:,:], self.weight1_199, stride=1, padding=1, groups=1)
            out1_200 = F.conv2d(x[:, 199:200,:,:], self.weight1_200, stride=1, padding=1, groups=1)
            out1_201 = F.conv2d(x[:, 200:201,:,:], self.weight1_201, stride=1, padding=1, groups=1)
            out1_202 = F.conv2d(x[:, 201:202,:,:], self.weight1_202, stride=1, padding=1, groups=1)
            out1_203 = F.conv2d(x[:, 202:203,:,:], self.weight1_203, stride=1, padding=1, groups=1)
            out1_204 = F.conv2d(x[:, 203:204,:,:], self.weight1_204, stride=1, padding=1, groups=1)
            out1_205 = F.conv2d(x[:, 204:205,:,:], self.weight1_205, stride=1, padding=1, groups=1)
            out1_206 = F.conv2d(x[:, 205:206,:,:], self.weight1_206, stride=1, padding=1, groups=1)
            out1_207 = F.conv2d(x[:, 206:207,:,:], self.weight1_207, stride=1, padding=1, groups=1)
            out1_208 = F.conv2d(x[:, 207:208,:,:], self.weight1_208, stride=1, padding=1, groups=1)
            out1_209 = F.conv2d(x[:, 208:209,:,:], self.weight1_209, stride=1, padding=1, groups=1)
            out1_210 = F.conv2d(x[:, 209:210,:,:], self.weight1_210, stride=1, padding=1, groups=1)
            out1_211 = F.conv2d(x[:, 210:211,:,:], self.weight1_211, stride=1, padding=1, groups=1)
            out1_212 = F.conv2d(x[:, 211:212,:,:], self.weight1_212, stride=1, padding=1, groups=1)
            out1_213 = F.conv2d(x[:, 212:213,:,:], self.weight1_213, stride=1, padding=1, groups=1)
            out1_214 = F.conv2d(x[:, 213:214,:,:], self.weight1_214, stride=1, padding=1, groups=1)
            out1_215 = F.conv2d(x[:, 214:215,:,:], self.weight1_215, stride=1, padding=1, groups=1)
            out1_216 = F.conv2d(x[:, 215:216,:,:], self.weight1_216, stride=1, padding=1, groups=1)
            out1_217 = F.conv2d(x[:, 216:217,:,:], self.weight1_217, stride=1, padding=1, groups=1)
            out1_218 = F.conv2d(x[:, 217:218,:,:], self.weight1_218, stride=1, padding=1, groups=1)
            out1_219 = F.conv2d(x[:, 218:219,:,:], self.weight1_219, stride=1, padding=1, groups=1)
            out1_220 = F.conv2d(x[:, 219:220,:,:], self.weight1_220, stride=1, padding=1, groups=1)
            out1_221 = F.conv2d(x[:, 220:221,:,:], self.weight1_221, stride=1, padding=1, groups=1)
            out1_222 = F.conv2d(x[:, 221:222,:,:], self.weight1_222, stride=1, padding=1, groups=1)
            out1_223 = F.conv2d(x[:, 222:223,:,:], self.weight1_223, stride=1, padding=1, groups=1)
            out1_224 = F.conv2d(x[:, 223:224,:,:], self.weight1_224, stride=1, padding=1, groups=1)
            out1_225 = F.conv2d(x[:, 224:225,:,:], self.weight1_225, stride=1, padding=1, groups=1)
            out1_226 = F.conv2d(x[:, 225:226,:,:], self.weight1_226, stride=1, padding=1, groups=1)
            out1_227 = F.conv2d(x[:, 226:227,:,:], self.weight1_227, stride=1, padding=1, groups=1)
            out1_228 = F.conv2d(x[:, 227:228,:,:], self.weight1_228, stride=1, padding=1, groups=1)
            out1_229 = F.conv2d(x[:, 228:229,:,:], self.weight1_229, stride=1, padding=1, groups=1)
            out1_230 = F.conv2d(x[:, 229:230,:,:], self.weight1_230, stride=1, padding=1, groups=1)
            out1_231 = F.conv2d(x[:, 230:231,:,:], self.weight1_231, stride=1, padding=1, groups=1)
            out1_232 = F.conv2d(x[:, 231:232,:,:], self.weight1_232, stride=1, padding=1, groups=1)
            out1_233 = F.conv2d(x[:, 232:233,:,:], self.weight1_233, stride=1, padding=1, groups=1)
            out1_234 = F.conv2d(x[:, 233:234,:,:], self.weight1_234, stride=1, padding=1, groups=1)
            out1_235 = F.conv2d(x[:, 234:235,:,:], self.weight1_235, stride=1, padding=1, groups=1)
            out1_236 = F.conv2d(x[:, 235:236,:,:], self.weight1_236, stride=1, padding=1, groups=1)
            out1_237 = F.conv2d(x[:, 236:237,:,:], self.weight1_237, stride=1, padding=1, groups=1)
            out1_238 = F.conv2d(x[:, 237:238,:,:], self.weight1_238, stride=1, padding=1, groups=1)
            out1_239 = F.conv2d(x[:, 238:239,:,:], self.weight1_239, stride=1, padding=1, groups=1)
            out1_240 = F.conv2d(x[:, 239:240,:,:], self.weight1_240, stride=1, padding=1, groups=1)
            out1_241 = F.conv2d(x[:, 240:241,:,:], self.weight1_241, stride=1, padding=1, groups=1)
            out1_242 = F.conv2d(x[:, 241:242,:,:], self.weight1_242, stride=1, padding=1, groups=1)
            out1_243 = F.conv2d(x[:, 242:243,:,:], self.weight1_243, stride=1, padding=1, groups=1)
            out1_244 = F.conv2d(x[:, 243:244,:,:], self.weight1_244, stride=1, padding=1, groups=1)
            out1_245 = F.conv2d(x[:, 244:245,:,:], self.weight1_245, stride=1, padding=1, groups=1)
            out1_246 = F.conv2d(x[:, 245:246,:,:], self.weight1_246, stride=1, padding=1, groups=1)
            out1_247 = F.conv2d(x[:, 246:247,:,:], self.weight1_247, stride=1, padding=1, groups=1)
            out1_248 = F.conv2d(x[:, 247:248,:,:], self.weight1_248, stride=1, padding=1, groups=1)
            out1_249 = F.conv2d(x[:, 248:249,:,:], self.weight1_249, stride=1, padding=1, groups=1)
            out1_250 = F.conv2d(x[:, 249:250,:,:], self.weight1_250, stride=1, padding=1, groups=1)
            out1_251 = F.conv2d(x[:, 250:251,:,:], self.weight1_251, stride=1, padding=1, groups=1)
            out1_252 = F.conv2d(x[:, 251:252,:,:], self.weight1_252, stride=1, padding=1, groups=1)
            out1_253 = F.conv2d(x[:, 252:253,:,:], self.weight1_253, stride=1, padding=1, groups=1)
            out1_254 = F.conv2d(x[:, 253:254,:,:], self.weight1_254, stride=1, padding=1, groups=1)
            out1_255 = F.conv2d(x[:, 254:255,:,:], self.weight1_255, stride=1, padding=1, groups=1)
            out1_256 = F.conv2d(x[:, 255:256,:,:], self.weight1_256, stride=1, padding=1, groups=1)

            out1 = torch.cat([out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10,
                    out1_11, out1_12, out1_13, out1_14, out1_15, out1_16, out1_17, out1_18, out1_19, out1_20,
                    out1_21, out1_22, out1_23, out1_24, out1_25, out1_26, out1_27, out1_28, out1_29, out1_30,
                    out1_31, out1_32, out1_33, out1_34, out1_35, out1_36, out1_37, out1_38, out1_39, out1_40,
                    out1_41, out1_42, out1_43, out1_44, out1_45, out1_46, out1_47, out1_48, out1_49, out1_50,
                    out1_51, out1_52, out1_53, out1_54, out1_55, out1_56, out1_57, out1_58, out1_59, out1_60,
                    out1_61, out1_62, out1_63, out1_64, out1_65, out1_66, out1_67, out1_68, out1_69, out1_70,
                    out1_71, out1_72, out1_73, out1_74, out1_75, out1_76, out1_77, out1_78, out1_79, out1_80,
                    out1_81, out1_82, out1_83, out1_84, out1_85, out1_86, out1_87, out1_88, out1_89, out1_90,
                    out1_91, out1_92, out1_93, out1_94, out1_95, out1_96, out1_97, out1_98, out1_99, out1_100,
                    out1_101, out1_102, out1_103, out1_104, out1_105, out1_106, out1_107, out1_108, out1_109, out1_110,
                    out1_111, out1_112, out1_113, out1_114, out1_115, out1_116, out1_117, out1_118, out1_119, out1_120,
                    out1_121, out1_122, out1_123, out1_124, out1_125, out1_126, out1_127, out1_128, out1_129, out1_130,
                    out1_131, out1_132, out1_133, out1_134, out1_135, out1_136, out1_137, out1_138, out1_139, out1_140,
                    out1_141, out1_142, out1_143, out1_144, out1_145, out1_146, out1_147, out1_148, out1_149, out1_150,
                    out1_151, out1_152, out1_153, out1_154, out1_155, out1_156, out1_157, out1_158, out1_159, out1_160,
                    out1_161, out1_162, out1_163, out1_164, out1_165, out1_166, out1_167, out1_168, out1_169, out1_170,
                    out1_171, out1_172, out1_173, out1_174, out1_175, out1_176, out1_177, out1_178, out1_179, out1_180,
                    out1_181, out1_182, out1_183, out1_184, out1_185, out1_186, out1_187, out1_188, out1_189, out1_190,
                    out1_191, out1_192, out1_193, out1_194, out1_195, out1_196, out1_197, out1_198, out1_199, out1_200,
                    out1_201, out1_202, out1_203, out1_204, out1_205, out1_206, out1_207, out1_208, out1_209, out1_210,
                    out1_211, out1_212, out1_213, out1_214, out1_215, out1_216, out1_217, out1_218, out1_219, out1_220,
                    out1_221, out1_222, out1_223, out1_224, out1_225, out1_226, out1_227, out1_228, out1_229, out1_230,
                    out1_231, out1_232, out1_233, out1_234, out1_235, out1_236, out1_237, out1_238, out1_239, out1_240,
                    out1_241, out1_242, out1_243, out1_244, out1_245, out1_246, out1_247, out1_248, out1_249, out1_250,
                    out1_251, out1_252, out1_253, out1_254, out1_255, out1_256], dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)

            out2_1 = F.conv2d(out1[:, 0:1,:,:], self.weight2_1, stride=1, padding=1, groups=1)
            out2_2 = F.conv2d(out1[:, 1:2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
            out2_3 = F.conv2d(out1[:, 2:3,:,:], self.weight2_3, stride=1, padding=1, groups=1)
            out2_4 = F.conv2d(out1[:, 3:4,:,:], self.weight2_4, stride=1, padding=1, groups=1)
            out2_5 = F.conv2d(out1[:, 4:5,:,:], self.weight2_5, stride=1, padding=1, groups=1)
            out2_6 = F.conv2d(out1[:, 5:6,:,:], self.weight2_6, stride=1, padding=1, groups=1)
            out2_7 = F.conv2d(out1[:, 6:7,:,:], self.weight2_7, stride=1, padding=1, groups=1)
            out2_8 = F.conv2d(out1[:, 7:8,:,:], self.weight2_8, stride=1, padding=1, groups=1)
            out2_9 = F.conv2d(out1[:, 8:9,:,:], self.weight2_9, stride=1, padding=1, groups=1)
            out2_10 = F.conv2d(out1[:, 9:10,:,:], self.weight2_10, stride=1, padding=1, groups=1)
            out2_11 = F.conv2d(out1[:, 10:11,:,:], self.weight2_11, stride=1, padding=1, groups=1)
            out2_12 = F.conv2d(out1[:, 11:12,:,:], self.weight2_12, stride=1, padding=1, groups=1)
            out2_13 = F.conv2d(out1[:, 12:13,:,:], self.weight2_13, stride=1, padding=1, groups=1)
            out2_14 = F.conv2d(out1[:, 13:14,:,:], self.weight2_14, stride=1, padding=1, groups=1)
            out2_15 = F.conv2d(out1[:, 14:15,:,:], self.weight2_15, stride=1, padding=1, groups=1)
            out2_16 = F.conv2d(out1[:, 15:16,:,:], self.weight2_16, stride=1, padding=1, groups=1)
            out2_17 = F.conv2d(out1[:, 16:17,:,:], self.weight2_17, stride=1, padding=1, groups=1)
            out2_18 = F.conv2d(out1[:, 17:18,:,:], self.weight2_18, stride=1, padding=1, groups=1)
            out2_19 = F.conv2d(out1[:, 18:19,:,:], self.weight2_19, stride=1, padding=1, groups=1)
            out2_20 = F.conv2d(out1[:, 19:20,:,:], self.weight2_20, stride=1, padding=1, groups=1)
            out2_21 = F.conv2d(out1[:, 20:21,:,:], self.weight2_21, stride=1, padding=1, groups=1)
            out2_22 = F.conv2d(out1[:, 21:22,:,:], self.weight2_22, stride=1, padding=1, groups=1)
            out2_23 = F.conv2d(out1[:, 22:23,:,:], self.weight2_23, stride=1, padding=1, groups=1)
            out2_24 = F.conv2d(out1[:, 23:24,:,:], self.weight2_24, stride=1, padding=1, groups=1)
            out2_25 = F.conv2d(out1[:, 24:25,:,:], self.weight2_25, stride=1, padding=1, groups=1)
            out2_26 = F.conv2d(out1[:, 25:26,:,:], self.weight2_26, stride=1, padding=1, groups=1)
            out2_27 = F.conv2d(out1[:, 26:27,:,:], self.weight2_27, stride=1, padding=1, groups=1)
            out2_28 = F.conv2d(out1[:, 27:28,:,:], self.weight2_28, stride=1, padding=1, groups=1)
            out2_29 = F.conv2d(out1[:, 28:29,:,:], self.weight2_29, stride=1, padding=1, groups=1)
            out2_30 = F.conv2d(out1[:, 29:30,:,:], self.weight2_30, stride=1, padding=1, groups=1)
            out2_31 = F.conv2d(out1[:, 30:31,:,:], self.weight2_31, stride=1, padding=1, groups=1)
            out2_32 = F.conv2d(out1[:, 31:32,:,:], self.weight2_32, stride=1, padding=1, groups=1)
            out2_33 = F.conv2d(out1[:, 32:33,:,:], self.weight2_33, stride=1, padding=1, groups=1)
            out2_34 = F.conv2d(out1[:, 33:34,:,:], self.weight2_34, stride=1, padding=1, groups=1)
            out2_35 = F.conv2d(out1[:, 34:35,:,:], self.weight2_35, stride=1, padding=1, groups=1)
            out2_36 = F.conv2d(out1[:, 35:36,:,:], self.weight2_36, stride=1, padding=1, groups=1)
            out2_37 = F.conv2d(out1[:, 36:37,:,:], self.weight2_37, stride=1, padding=1, groups=1)
            out2_38 = F.conv2d(out1[:, 37:38,:,:], self.weight2_38, stride=1, padding=1, groups=1)
            out2_39 = F.conv2d(out1[:, 38:39,:,:], self.weight2_39, stride=1, padding=1, groups=1)
            out2_40 = F.conv2d(out1[:, 39:40,:,:], self.weight2_40, stride=1, padding=1, groups=1)
            out2_41 = F.conv2d(out1[:, 40:41,:,:], self.weight2_41, stride=1, padding=1, groups=1)
            out2_42 = F.conv2d(out1[:, 41:42,:,:], self.weight2_42, stride=1, padding=1, groups=1)
            out2_43 = F.conv2d(out1[:, 42:43,:,:], self.weight2_43, stride=1, padding=1, groups=1)
            out2_44 = F.conv2d(out1[:, 43:44,:,:], self.weight2_44, stride=1, padding=1, groups=1)
            out2_45 = F.conv2d(out1[:, 44:45,:,:], self.weight2_45, stride=1, padding=1, groups=1)
            out2_46 = F.conv2d(out1[:, 45:46,:,:], self.weight2_46, stride=1, padding=1, groups=1)
            out2_47 = F.conv2d(out1[:, 46:47,:,:], self.weight2_47, stride=1, padding=1, groups=1)
            out2_48 = F.conv2d(out1[:, 47:48,:,:], self.weight2_48, stride=1, padding=1, groups=1)
            out2_49 = F.conv2d(out1[:, 48:49,:,:], self.weight2_49, stride=1, padding=1, groups=1)
            out2_50 = F.conv2d(out1[:, 49:50,:,:], self.weight2_50, stride=1, padding=1, groups=1)
            out2_51 = F.conv2d(out1[:, 50:51,:,:], self.weight2_51, stride=1, padding=1, groups=1)
            out2_52 = F.conv2d(out1[:, 51:52,:,:], self.weight2_52, stride=1, padding=1, groups=1)
            out2_53 = F.conv2d(out1[:, 52:53,:,:], self.weight2_53, stride=1, padding=1, groups=1)
            out2_54 = F.conv2d(out1[:, 53:54,:,:], self.weight2_54, stride=1, padding=1, groups=1)
            out2_55 = F.conv2d(out1[:, 54:55,:,:], self.weight2_55, stride=1, padding=1, groups=1)
            out2_56 = F.conv2d(out1[:, 55:56,:,:], self.weight2_56, stride=1, padding=1, groups=1)
            out2_57 = F.conv2d(out1[:, 56:57,:,:], self.weight2_57, stride=1, padding=1, groups=1)
            out2_58 = F.conv2d(out1[:, 57:58,:,:], self.weight2_58, stride=1, padding=1, groups=1)
            out2_59 = F.conv2d(out1[:, 58:59,:,:], self.weight2_59, stride=1, padding=1, groups=1)
            out2_60 = F.conv2d(out1[:, 59:60,:,:], self.weight2_60, stride=1, padding=1, groups=1)
            out2_61 = F.conv2d(out1[:, 60:61,:,:], self.weight2_61, stride=1, padding=1, groups=1)
            out2_62 = F.conv2d(out1[:, 61:62,:,:], self.weight2_62, stride=1, padding=1, groups=1)
            out2_63 = F.conv2d(out1[:, 62:63,:,:], self.weight2_63, stride=1, padding=1, groups=1)
            out2_64 = F.conv2d(out1[:, 63:64,:,:], self.weight2_64, stride=1, padding=1, groups=1)
            out2_65 = F.conv2d(out1[:, 64:65,:,:], self.weight2_65, stride=1, padding=1, groups=1)
            out2_66 = F.conv2d(out1[:, 65:66,:,:], self.weight2_66, stride=1, padding=1, groups=1)
            out2_67 = F.conv2d(out1[:, 66:67,:,:], self.weight2_67, stride=1, padding=1, groups=1)
            out2_68 = F.conv2d(out1[:, 67:68,:,:], self.weight2_68, stride=1, padding=1, groups=1)
            out2_69 = F.conv2d(out1[:, 68:69,:,:], self.weight2_69, stride=1, padding=1, groups=1)
            out2_70 = F.conv2d(out1[:, 69:70,:,:], self.weight2_70, stride=1, padding=1, groups=1)
            out2_71 = F.conv2d(out1[:, 70:71,:,:], self.weight2_71, stride=1, padding=1, groups=1)
            out2_72 = F.conv2d(out1[:, 71:72,:,:], self.weight2_72, stride=1, padding=1, groups=1)
            out2_73 = F.conv2d(out1[:, 72:73,:,:], self.weight2_73, stride=1, padding=1, groups=1)
            out2_74 = F.conv2d(out1[:, 73:74,:,:], self.weight2_74, stride=1, padding=1, groups=1)
            out2_75 = F.conv2d(out1[:, 74:75,:,:], self.weight2_75, stride=1, padding=1, groups=1)
            out2_76 = F.conv2d(out1[:, 75:76,:,:], self.weight2_76, stride=1, padding=1, groups=1)
            out2_77 = F.conv2d(out1[:, 76:77,:,:], self.weight2_77, stride=1, padding=1, groups=1)
            out2_78 = F.conv2d(out1[:, 77:78,:,:], self.weight2_78, stride=1, padding=1, groups=1)
            out2_79 = F.conv2d(out1[:, 78:79,:,:], self.weight2_79, stride=1, padding=1, groups=1)
            out2_80 = F.conv2d(out1[:, 79:80,:,:], self.weight2_80, stride=1, padding=1, groups=1)
            out2_81 = F.conv2d(out1[:, 80:81,:,:], self.weight2_81, stride=1, padding=1, groups=1)
            out2_82 = F.conv2d(out1[:, 81:82,:,:], self.weight2_82, stride=1, padding=1, groups=1)
            out2_83 = F.conv2d(out1[:, 82:83,:,:], self.weight2_83, stride=1, padding=1, groups=1)
            out2_84 = F.conv2d(out1[:, 83:84,:,:], self.weight2_84, stride=1, padding=1, groups=1)
            out2_85 = F.conv2d(out1[:, 84:85,:,:], self.weight2_85, stride=1, padding=1, groups=1)
            out2_86 = F.conv2d(out1[:, 85:86,:,:], self.weight2_86, stride=1, padding=1, groups=1)
            out2_87 = F.conv2d(out1[:, 86:87,:,:], self.weight2_87, stride=1, padding=1, groups=1)
            out2_88 = F.conv2d(out1[:, 87:88,:,:], self.weight2_88, stride=1, padding=1, groups=1)
            out2_89 = F.conv2d(out1[:, 88:89,:,:], self.weight2_89, stride=1, padding=1, groups=1)
            out2_90 = F.conv2d(out1[:, 89:90,:,:], self.weight2_90, stride=1, padding=1, groups=1)
            out2_91 = F.conv2d(out1[:, 90:91,:,:], self.weight2_91, stride=1, padding=1, groups=1)
            out2_92 = F.conv2d(out1[:, 91:92,:,:], self.weight2_92, stride=1, padding=1, groups=1)
            out2_93 = F.conv2d(out1[:, 92:93,:,:], self.weight2_93, stride=1, padding=1, groups=1)
            out2_94 = F.conv2d(out1[:, 93:94,:,:], self.weight2_94, stride=1, padding=1, groups=1)
            out2_95 = F.conv2d(out1[:, 94:95,:,:], self.weight2_95, stride=1, padding=1, groups=1)
            out2_96 = F.conv2d(out1[:, 95:96,:,:], self.weight2_96, stride=1, padding=1, groups=1)
            out2_97 = F.conv2d(out1[:, 96:97,:,:], self.weight2_97, stride=1, padding=1, groups=1)
            out2_98 = F.conv2d(out1[:, 97:98,:,:], self.weight2_98, stride=1, padding=1, groups=1)
            out2_99 = F.conv2d(out1[:, 98:99,:,:], self.weight2_99, stride=1, padding=1, groups=1)
            out2_100 = F.conv2d(out1[:, 99:100,:,:], self.weight2_100, stride=1, padding=1, groups=1)
            out2_101 = F.conv2d(out1[:, 100:101,:,:], self.weight2_101, stride=1, padding=1, groups=1)
            out2_102 = F.conv2d(out1[:, 101:102,:,:], self.weight2_102, stride=1, padding=1, groups=1)
            out2_103 = F.conv2d(out1[:, 102:103,:,:], self.weight2_103, stride=1, padding=1, groups=1)
            out2_104 = F.conv2d(out1[:, 103:104,:,:], self.weight2_104, stride=1, padding=1, groups=1)
            out2_105 = F.conv2d(out1[:, 104:105,:,:], self.weight2_105, stride=1, padding=1, groups=1)
            out2_106 = F.conv2d(out1[:, 105:106,:,:], self.weight2_106, stride=1, padding=1, groups=1)
            out2_107 = F.conv2d(out1[:, 106:107,:,:], self.weight2_107, stride=1, padding=1, groups=1)
            out2_108 = F.conv2d(out1[:, 107:108,:,:], self.weight2_108, stride=1, padding=1, groups=1)
            out2_109 = F.conv2d(out1[:, 108:109,:,:], self.weight2_109, stride=1, padding=1, groups=1)
            out2_110 = F.conv2d(out1[:, 109:110,:,:], self.weight2_110, stride=1, padding=1, groups=1)
            out2_111 = F.conv2d(out1[:, 110:111,:,:], self.weight2_111, stride=1, padding=1, groups=1)
            out2_112 = F.conv2d(out1[:, 111:112,:,:], self.weight2_112, stride=1, padding=1, groups=1)
            out2_113 = F.conv2d(out1[:, 112:113,:,:], self.weight2_113, stride=1, padding=1, groups=1)
            out2_114 = F.conv2d(out1[:, 113:114,:,:], self.weight2_114, stride=1, padding=1, groups=1)
            out2_115 = F.conv2d(out1[:, 114:115,:,:], self.weight2_115, stride=1, padding=1, groups=1)
            out2_116 = F.conv2d(out1[:, 115:116,:,:], self.weight2_116, stride=1, padding=1, groups=1)
            out2_117 = F.conv2d(out1[:, 116:117,:,:], self.weight2_117, stride=1, padding=1, groups=1)
            out2_118 = F.conv2d(out1[:, 117:118,:,:], self.weight2_118, stride=1, padding=1, groups=1)
            out2_119 = F.conv2d(out1[:, 118:119,:,:], self.weight2_119, stride=1, padding=1, groups=1)
            out2_120 = F.conv2d(out1[:, 119:120,:,:], self.weight2_120, stride=1, padding=1, groups=1)
            out2_121 = F.conv2d(out1[:, 120:121,:,:], self.weight2_121, stride=1, padding=1, groups=1)
            out2_122 = F.conv2d(out1[:, 121:122,:,:], self.weight2_122, stride=1, padding=1, groups=1)
            out2_123 = F.conv2d(out1[:, 122:123,:,:], self.weight2_123, stride=1, padding=1, groups=1)
            out2_124 = F.conv2d(out1[:, 123:124,:,:], self.weight2_124, stride=1, padding=1, groups=1)
            out2_125 = F.conv2d(out1[:, 124:125,:,:], self.weight2_125, stride=1, padding=1, groups=1)
            out2_126 = F.conv2d(out1[:, 125:126,:,:], self.weight2_126, stride=1, padding=1, groups=1)
            out2_127 = F.conv2d(out1[:, 126:127,:,:], self.weight2_127, stride=1, padding=1, groups=1)
            out2_128 = F.conv2d(out1[:, 127:128,:,:], self.weight2_128, stride=1, padding=1, groups=1)
            out2_129 = F.conv2d(out1[:, 128:129,:,:], self.weight2_129, stride=1, padding=1, groups=1)
            out2_130 = F.conv2d(out1[:, 129:130,:,:], self.weight2_130, stride=1, padding=1, groups=1)
            out2_131 = F.conv2d(out1[:, 130:131,:,:], self.weight2_131, stride=1, padding=1, groups=1)
            out2_132 = F.conv2d(out1[:, 131:132,:,:], self.weight2_132, stride=1, padding=1, groups=1)
            out2_133 = F.conv2d(out1[:, 132:133,:,:], self.weight2_133, stride=1, padding=1, groups=1)
            out2_134 = F.conv2d(out1[:, 133:134,:,:], self.weight2_134, stride=1, padding=1, groups=1)
            out2_135 = F.conv2d(out1[:, 134:135,:,:], self.weight2_135, stride=1, padding=1, groups=1)
            out2_136 = F.conv2d(out1[:, 135:136,:,:], self.weight2_136, stride=1, padding=1, groups=1)
            out2_137 = F.conv2d(out1[:, 136:137,:,:], self.weight2_137, stride=1, padding=1, groups=1)
            out2_138 = F.conv2d(out1[:, 137:138,:,:], self.weight2_138, stride=1, padding=1, groups=1)
            out2_139 = F.conv2d(out1[:, 138:139,:,:], self.weight2_139, stride=1, padding=1, groups=1)
            out2_140 = F.conv2d(out1[:, 139:140,:,:], self.weight2_140, stride=1, padding=1, groups=1)
            out2_141 = F.conv2d(out1[:, 140:141,:,:], self.weight2_141, stride=1, padding=1, groups=1)
            out2_142 = F.conv2d(out1[:, 141:142,:,:], self.weight2_142, stride=1, padding=1, groups=1)
            out2_143 = F.conv2d(out1[:, 142:143,:,:], self.weight2_143, stride=1, padding=1, groups=1)
            out2_144 = F.conv2d(out1[:, 143:144,:,:], self.weight2_144, stride=1, padding=1, groups=1)
            out2_145 = F.conv2d(out1[:, 144:145,:,:], self.weight2_145, stride=1, padding=1, groups=1)
            out2_146 = F.conv2d(out1[:, 145:146,:,:], self.weight2_146, stride=1, padding=1, groups=1)
            out2_147 = F.conv2d(out1[:, 146:147,:,:], self.weight2_147, stride=1, padding=1, groups=1)
            out2_148 = F.conv2d(out1[:, 147:148,:,:], self.weight2_148, stride=1, padding=1, groups=1)
            out2_149 = F.conv2d(out1[:, 148:149,:,:], self.weight2_149, stride=1, padding=1, groups=1)
            out2_150 = F.conv2d(out1[:, 149:150,:,:], self.weight2_150, stride=1, padding=1, groups=1)
            out2_151 = F.conv2d(out1[:, 150:151,:,:], self.weight2_151, stride=1, padding=1, groups=1)
            out2_152 = F.conv2d(out1[:, 151:152,:,:], self.weight2_152, stride=1, padding=1, groups=1)
            out2_153 = F.conv2d(out1[:, 152:153,:,:], self.weight2_153, stride=1, padding=1, groups=1)
            out2_154 = F.conv2d(out1[:, 153:154,:,:], self.weight2_154, stride=1, padding=1, groups=1)
            out2_155 = F.conv2d(out1[:, 154:155,:,:], self.weight2_155, stride=1, padding=1, groups=1)
            out2_156 = F.conv2d(out1[:, 155:156,:,:], self.weight2_156, stride=1, padding=1, groups=1)
            out2_157 = F.conv2d(out1[:, 156:157,:,:], self.weight2_157, stride=1, padding=1, groups=1)
            out2_158 = F.conv2d(out1[:, 157:158,:,:], self.weight2_158, stride=1, padding=1, groups=1)
            out2_159 = F.conv2d(out1[:, 158:159,:,:], self.weight2_159, stride=1, padding=1, groups=1)
            out2_160 = F.conv2d(out1[:, 159:160,:,:], self.weight2_160, stride=1, padding=1, groups=1)
            out2_161 = F.conv2d(out1[:, 160:161,:,:], self.weight2_161, stride=1, padding=1, groups=1)
            out2_162 = F.conv2d(out1[:, 161:162,:,:], self.weight2_162, stride=1, padding=1, groups=1)
            out2_163 = F.conv2d(out1[:, 162:163,:,:], self.weight2_163, stride=1, padding=1, groups=1)
            out2_164 = F.conv2d(out1[:, 163:164,:,:], self.weight2_164, stride=1, padding=1, groups=1)
            out2_165 = F.conv2d(out1[:, 164:165,:,:], self.weight2_165, stride=1, padding=1, groups=1)
            out2_166 = F.conv2d(out1[:, 165:166,:,:], self.weight2_166, stride=1, padding=1, groups=1)
            out2_167 = F.conv2d(out1[:, 166:167,:,:], self.weight2_167, stride=1, padding=1, groups=1)
            out2_168 = F.conv2d(out1[:, 167:168,:,:], self.weight2_168, stride=1, padding=1, groups=1)
            out2_169 = F.conv2d(out1[:, 168:169,:,:], self.weight2_169, stride=1, padding=1, groups=1)
            out2_170 = F.conv2d(out1[:, 169:170,:,:], self.weight2_170, stride=1, padding=1, groups=1)
            out2_171 = F.conv2d(out1[:, 170:171,:,:], self.weight2_171, stride=1, padding=1, groups=1)
            out2_172 = F.conv2d(out1[:, 171:172,:,:], self.weight2_172, stride=1, padding=1, groups=1)
            out2_173 = F.conv2d(out1[:, 172:173,:,:], self.weight2_173, stride=1, padding=1, groups=1)
            out2_174 = F.conv2d(out1[:, 173:174,:,:], self.weight2_174, stride=1, padding=1, groups=1)
            out2_175 = F.conv2d(out1[:, 174:175,:,:], self.weight2_175, stride=1, padding=1, groups=1)
            out2_176 = F.conv2d(out1[:, 175:176,:,:], self.weight2_176, stride=1, padding=1, groups=1)
            out2_177 = F.conv2d(out1[:, 176:177,:,:], self.weight2_177, stride=1, padding=1, groups=1)
            out2_178 = F.conv2d(out1[:, 177:178,:,:], self.weight2_178, stride=1, padding=1, groups=1)
            out2_179 = F.conv2d(out1[:, 178:179,:,:], self.weight2_179, stride=1, padding=1, groups=1)
            out2_180 = F.conv2d(out1[:, 179:180,:,:], self.weight2_180, stride=1, padding=1, groups=1)
            out2_181 = F.conv2d(out1[:, 180:181,:,:], self.weight2_181, stride=1, padding=1, groups=1)
            out2_182 = F.conv2d(out1[:, 181:182,:,:], self.weight2_182, stride=1, padding=1, groups=1)
            out2_183 = F.conv2d(out1[:, 182:183,:,:], self.weight2_183, stride=1, padding=1, groups=1)
            out2_184 = F.conv2d(out1[:, 183:184,:,:], self.weight2_184, stride=1, padding=1, groups=1)
            out2_185 = F.conv2d(out1[:, 184:185,:,:], self.weight2_185, stride=1, padding=1, groups=1)
            out2_186 = F.conv2d(out1[:, 185:186,:,:], self.weight2_186, stride=1, padding=1, groups=1)
            out2_187 = F.conv2d(out1[:, 186:187,:,:], self.weight2_187, stride=1, padding=1, groups=1)
            out2_188 = F.conv2d(out1[:, 187:188,:,:], self.weight2_188, stride=1, padding=1, groups=1)
            out2_189 = F.conv2d(out1[:, 188:189,:,:], self.weight2_189, stride=1, padding=1, groups=1)
            out2_190 = F.conv2d(out1[:, 189:190,:,:], self.weight2_190, stride=1, padding=1, groups=1)
            out2_191 = F.conv2d(out1[:, 190:191,:,:], self.weight2_191, stride=1, padding=1, groups=1)
            out2_192 = F.conv2d(out1[:, 191:192,:,:], self.weight2_192, stride=1, padding=1, groups=1)
            out2_193 = F.conv2d(out1[:, 192:193,:,:], self.weight2_193, stride=1, padding=1, groups=1)
            out2_194 = F.conv2d(out1[:, 193:194,:,:], self.weight2_194, stride=1, padding=1, groups=1)
            out2_195 = F.conv2d(out1[:, 194:195,:,:], self.weight2_195, stride=1, padding=1, groups=1)
            out2_196 = F.conv2d(out1[:, 195:196,:,:], self.weight2_196, stride=1, padding=1, groups=1)
            out2_197 = F.conv2d(out1[:, 196:197,:,:], self.weight2_197, stride=1, padding=1, groups=1)
            out2_198 = F.conv2d(out1[:, 197:198,:,:], self.weight2_198, stride=1, padding=1, groups=1)
            out2_199 = F.conv2d(out1[:, 198:199,:,:], self.weight2_199, stride=1, padding=1, groups=1)
            out2_200 = F.conv2d(out1[:, 199:200,:,:], self.weight2_200, stride=1, padding=1, groups=1)
            out2_201 = F.conv2d(out1[:, 200:201,:,:], self.weight2_201, stride=1, padding=1, groups=1)
            out2_202 = F.conv2d(out1[:, 201:202,:,:], self.weight2_202, stride=1, padding=1, groups=1)
            out2_203 = F.conv2d(out1[:, 202:203,:,:], self.weight2_203, stride=1, padding=1, groups=1)
            out2_204 = F.conv2d(out1[:, 203:204,:,:], self.weight2_204, stride=1, padding=1, groups=1)
            out2_205 = F.conv2d(out1[:, 204:205,:,:], self.weight2_205, stride=1, padding=1, groups=1)
            out2_206 = F.conv2d(out1[:, 205:206,:,:], self.weight2_206, stride=1, padding=1, groups=1)
            out2_207 = F.conv2d(out1[:, 206:207,:,:], self.weight2_207, stride=1, padding=1, groups=1)
            out2_208 = F.conv2d(out1[:, 207:208,:,:], self.weight2_208, stride=1, padding=1, groups=1)
            out2_209 = F.conv2d(out1[:, 208:209,:,:], self.weight2_209, stride=1, padding=1, groups=1)
            out2_210 = F.conv2d(out1[:, 209:210,:,:], self.weight2_210, stride=1, padding=1, groups=1)
            out2_211 = F.conv2d(out1[:, 210:211,:,:], self.weight2_211, stride=1, padding=1, groups=1)
            out2_212 = F.conv2d(out1[:, 211:212,:,:], self.weight2_212, stride=1, padding=1, groups=1)
            out2_213 = F.conv2d(out1[:, 212:213,:,:], self.weight2_213, stride=1, padding=1, groups=1)
            out2_214 = F.conv2d(out1[:, 213:214,:,:], self.weight2_214, stride=1, padding=1, groups=1)
            out2_215 = F.conv2d(out1[:, 214:215,:,:], self.weight2_215, stride=1, padding=1, groups=1)
            out2_216 = F.conv2d(out1[:, 215:216,:,:], self.weight2_216, stride=1, padding=1, groups=1)
            out2_217 = F.conv2d(out1[:, 216:217,:,:], self.weight2_217, stride=1, padding=1, groups=1)
            out2_218 = F.conv2d(out1[:, 217:218,:,:], self.weight2_218, stride=1, padding=1, groups=1)
            out2_219 = F.conv2d(out1[:, 218:219,:,:], self.weight2_219, stride=1, padding=1, groups=1)
            out2_220 = F.conv2d(out1[:, 219:220,:,:], self.weight2_220, stride=1, padding=1, groups=1)
            out2_221 = F.conv2d(out1[:, 220:221,:,:], self.weight2_221, stride=1, padding=1, groups=1)
            out2_222 = F.conv2d(out1[:, 221:222,:,:], self.weight2_222, stride=1, padding=1, groups=1)
            out2_223 = F.conv2d(out1[:, 222:223,:,:], self.weight2_223, stride=1, padding=1, groups=1)
            out2_224 = F.conv2d(out1[:, 223:224,:,:], self.weight2_224, stride=1, padding=1, groups=1)
            out2_225 = F.conv2d(out1[:, 224:225,:,:], self.weight2_225, stride=1, padding=1, groups=1)
            out2_226 = F.conv2d(out1[:, 225:226,:,:], self.weight2_226, stride=1, padding=1, groups=1)
            out2_227 = F.conv2d(out1[:, 226:227,:,:], self.weight2_227, stride=1, padding=1, groups=1)
            out2_228 = F.conv2d(out1[:, 227:228,:,:], self.weight2_228, stride=1, padding=1, groups=1)
            out2_229 = F.conv2d(out1[:, 228:229,:,:], self.weight2_229, stride=1, padding=1, groups=1)
            out2_230 = F.conv2d(out1[:, 229:230,:,:], self.weight2_230, stride=1, padding=1, groups=1)
            out2_231 = F.conv2d(out1[:, 230:231,:,:], self.weight2_231, stride=1, padding=1, groups=1)
            out2_232 = F.conv2d(out1[:, 231:232,:,:], self.weight2_232, stride=1, padding=1, groups=1)
            out2_233 = F.conv2d(out1[:, 232:233,:,:], self.weight2_233, stride=1, padding=1, groups=1)
            out2_234 = F.conv2d(out1[:, 233:234,:,:], self.weight2_234, stride=1, padding=1, groups=1)
            out2_235 = F.conv2d(out1[:, 234:235,:,:], self.weight2_235, stride=1, padding=1, groups=1)
            out2_236 = F.conv2d(out1[:, 235:236,:,:], self.weight2_236, stride=1, padding=1, groups=1)
            out2_237 = F.conv2d(out1[:, 236:237,:,:], self.weight2_237, stride=1, padding=1, groups=1)
            out2_238 = F.conv2d(out1[:, 237:238,:,:], self.weight2_238, stride=1, padding=1, groups=1)
            out2_239 = F.conv2d(out1[:, 238:239,:,:], self.weight2_239, stride=1, padding=1, groups=1)
            out2_240 = F.conv2d(out1[:, 239:240,:,:], self.weight2_240, stride=1, padding=1, groups=1)
            out2_241 = F.conv2d(out1[:, 240:241,:,:], self.weight2_241, stride=1, padding=1, groups=1)
            out2_242 = F.conv2d(out1[:, 241:242,:,:], self.weight2_242, stride=1, padding=1, groups=1)
            out2_243 = F.conv2d(out1[:, 242:243,:,:], self.weight2_243, stride=1, padding=1, groups=1)
            out2_244 = F.conv2d(out1[:, 243:244,:,:], self.weight2_244, stride=1, padding=1, groups=1)
            out2_245 = F.conv2d(out1[:, 244:245,:,:], self.weight2_245, stride=1, padding=1, groups=1)
            out2_246 = F.conv2d(out1[:, 245:246,:,:], self.weight2_246, stride=1, padding=1, groups=1)
            out2_247 = F.conv2d(out1[:, 246:247,:,:], self.weight2_247, stride=1, padding=1, groups=1)
            out2_248 = F.conv2d(out1[:, 247:248,:,:], self.weight2_248, stride=1, padding=1, groups=1)
            out2_249 = F.conv2d(out1[:, 248:249,:,:], self.weight2_249, stride=1, padding=1, groups=1)
            out2_250 = F.conv2d(out1[:, 249:250,:,:], self.weight2_250, stride=1, padding=1, groups=1)
            out2_251 = F.conv2d(out1[:, 250:251,:,:], self.weight2_251, stride=1, padding=1, groups=1)
            out2_252 = F.conv2d(out1[:, 251:252,:,:], self.weight2_252, stride=1, padding=1, groups=1)
            out2_253 = F.conv2d(out1[:, 252:253,:,:], self.weight2_253, stride=1, padding=1, groups=1)
            out2_254 = F.conv2d(out1[:, 253:254,:,:], self.weight2_254, stride=1, padding=1, groups=1)
            out2_255 = F.conv2d(out1[:, 254:255,:,:], self.weight2_255, stride=1, padding=1, groups=1)
            out2_256 = F.conv2d(out1[:, 255:256,:,:], self.weight2_256, stride=1, padding=1, groups=1)

            out2 = torch.cat([out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10,
                    out2_11, out2_12, out2_13, out2_14, out2_15, out2_16, out2_17, out2_18, out2_19, out2_20,
                    out2_21, out2_22, out2_23, out2_24, out2_25, out2_26, out2_27, out2_28, out2_29, out2_30,
                    out2_31, out2_32, out2_33, out2_34, out2_35, out2_36, out2_37, out2_38, out2_39, out2_40,
                    out2_41, out2_42, out2_43, out2_44, out2_45, out2_46, out2_47, out2_48, out2_49, out2_50,
                    out2_51, out2_52, out2_53, out2_54, out2_55, out2_56, out2_57, out2_58, out2_59, out2_60,
                    out2_61, out2_62, out2_63, out2_64, out2_65, out2_66, out2_67, out2_68, out2_69, out2_70,
                    out2_71, out2_72, out2_73, out2_74, out2_75, out2_76, out2_77, out2_78, out2_79, out2_80,
                    out2_81, out2_82, out2_83, out2_84, out2_85, out2_86, out2_87, out2_88, out2_89, out2_90,
                    out2_91, out2_92, out2_93, out2_94, out2_95, out2_96, out2_97, out2_98, out2_99, out2_100,
                    out2_101, out2_102, out2_103, out2_104, out2_105, out2_106, out2_107, out2_108, out2_109, out2_110,
                    out2_111, out2_112, out2_113, out2_114, out2_115, out2_116, out2_117, out2_118, out2_119, out2_120,
                    out2_121, out2_122, out2_123, out2_124, out2_125, out2_126, out2_127, out2_128, out2_129, out2_130,
                    out2_131, out2_132, out2_133, out2_134, out2_135, out2_136, out2_137, out2_138, out2_139, out2_140,
                    out2_141, out2_142, out2_143, out2_144, out2_145, out2_146, out2_147, out2_148, out2_149, out2_150,
                    out2_151, out2_152, out2_153, out2_154, out2_155, out2_156, out2_157, out2_158, out2_159, out2_160,
                    out2_161, out2_162, out2_163, out2_164, out2_165, out2_166, out2_167, out2_168, out2_169, out2_170,
                    out2_171, out2_172, out2_173, out2_174, out2_175, out2_176, out2_177, out2_178, out2_179, out2_180,
                    out2_181, out2_182, out2_183, out2_184, out2_185, out2_186, out2_187, out2_188, out2_189, out2_190,
                    out2_191, out2_192, out2_193, out2_194, out2_195, out2_196, out2_197, out2_198, out2_199, out2_200,
                    out2_201, out2_202, out2_203, out2_204, out2_205, out2_206, out2_207, out2_208, out2_209, out2_210,
                    out2_211, out2_212, out2_213, out2_214, out2_215, out2_216, out2_217, out2_218, out2_219, out2_220,
                    out2_221, out2_222, out2_223, out2_224, out2_225, out2_226, out2_227, out2_228, out2_229, out2_230,
                    out2_231, out2_232, out2_233, out2_234, out2_235, out2_236, out2_237, out2_238, out2_239, out2_240,
                    out2_241, out2_242, out2_243, out2_244, out2_245, out2_246, out2_247, out2_248, out2_249, out2_250,
                    out2_251, out2_252, out2_253, out2_254, out2_255, out2_256], dim=1)

            x_pred_mask = self.bn2(out2)

        elif (cfg.filter_mode=='x' and self.planes==384):
            out1 = None
            out2 = None

            out1_1 = F.conv2d(x[:, 0:1,:,:], self.weight1_1, stride=1, padding=1, groups=1)
            out1_2 = F.conv2d(x[:, 1:2,:,:], self.weight1_2, stride=1, padding=1, groups=1)
            out1_3 = F.conv2d(x[:, 2:3,:,:], self.weight1_3, stride=1, padding=1, groups=1)
            out1_4 = F.conv2d(x[:, 3:4,:,:], self.weight1_4, stride=1, padding=1, groups=1)
            out1_5 = F.conv2d(x[:, 4:5,:,:], self.weight1_5, stride=1, padding=1, groups=1)
            out1_6 = F.conv2d(x[:, 5:6,:,:], self.weight1_6, stride=1, padding=1, groups=1)
            out1_7 = F.conv2d(x[:, 6:7,:,:], self.weight1_7, stride=1, padding=1, groups=1)
            out1_8 = F.conv2d(x[:, 7:8,:,:], self.weight1_8, stride=1, padding=1, groups=1)
            out1_9 = F.conv2d(x[:, 8:9,:,:], self.weight1_9, stride=1, padding=1, groups=1)
            out1_10 = F.conv2d(x[:, 9:10,:,:], self.weight1_10, stride=1, padding=1, groups=1)
            out1_11 = F.conv2d(x[:, 10:11,:,:], self.weight1_11, stride=1, padding=1, groups=1)
            out1_12 = F.conv2d(x[:, 11:12,:,:], self.weight1_12, stride=1, padding=1, groups=1)
            out1_13 = F.conv2d(x[:, 12:13,:,:], self.weight1_13, stride=1, padding=1, groups=1)
            out1_14 = F.conv2d(x[:, 13:14,:,:], self.weight1_14, stride=1, padding=1, groups=1)
            out1_15 = F.conv2d(x[:, 14:15,:,:], self.weight1_15, stride=1, padding=1, groups=1)
            out1_16 = F.conv2d(x[:, 15:16,:,:], self.weight1_16, stride=1, padding=1, groups=1)
            out1_17 = F.conv2d(x[:, 16:17,:,:], self.weight1_17, stride=1, padding=1, groups=1)
            out1_18 = F.conv2d(x[:, 17:18,:,:], self.weight1_18, stride=1, padding=1, groups=1)
            out1_19 = F.conv2d(x[:, 18:19,:,:], self.weight1_19, stride=1, padding=1, groups=1)
            out1_20 = F.conv2d(x[:, 19:20,:,:], self.weight1_20, stride=1, padding=1, groups=1)
            out1_21 = F.conv2d(x[:, 20:21,:,:], self.weight1_21, stride=1, padding=1, groups=1)
            out1_22 = F.conv2d(x[:, 21:22,:,:], self.weight1_22, stride=1, padding=1, groups=1)
            out1_23 = F.conv2d(x[:, 22:23,:,:], self.weight1_23, stride=1, padding=1, groups=1)
            out1_24 = F.conv2d(x[:, 23:24,:,:], self.weight1_24, stride=1, padding=1, groups=1)
            out1_25 = F.conv2d(x[:, 24:25,:,:], self.weight1_25, stride=1, padding=1, groups=1)
            out1_26 = F.conv2d(x[:, 25:26,:,:], self.weight1_26, stride=1, padding=1, groups=1)
            out1_27 = F.conv2d(x[:, 26:27,:,:], self.weight1_27, stride=1, padding=1, groups=1)
            out1_28 = F.conv2d(x[:, 27:28,:,:], self.weight1_28, stride=1, padding=1, groups=1)
            out1_29 = F.conv2d(x[:, 28:29,:,:], self.weight1_29, stride=1, padding=1, groups=1)
            out1_30 = F.conv2d(x[:, 29:30,:,:], self.weight1_30, stride=1, padding=1, groups=1)
            out1_31 = F.conv2d(x[:, 30:31,:,:], self.weight1_31, stride=1, padding=1, groups=1)
            out1_32 = F.conv2d(x[:, 31:32,:,:], self.weight1_32, stride=1, padding=1, groups=1)
            out1_33 = F.conv2d(x[:, 32:33,:,:], self.weight1_33, stride=1, padding=1, groups=1)
            out1_34 = F.conv2d(x[:, 33:34,:,:], self.weight1_34, stride=1, padding=1, groups=1)
            out1_35 = F.conv2d(x[:, 34:35,:,:], self.weight1_35, stride=1, padding=1, groups=1)
            out1_36 = F.conv2d(x[:, 35:36,:,:], self.weight1_36, stride=1, padding=1, groups=1)
            out1_37 = F.conv2d(x[:, 36:37,:,:], self.weight1_37, stride=1, padding=1, groups=1)
            out1_38 = F.conv2d(x[:, 37:38,:,:], self.weight1_38, stride=1, padding=1, groups=1)
            out1_39 = F.conv2d(x[:, 38:39,:,:], self.weight1_39, stride=1, padding=1, groups=1)
            out1_40 = F.conv2d(x[:, 39:40,:,:], self.weight1_40, stride=1, padding=1, groups=1)
            out1_41 = F.conv2d(x[:, 40:41,:,:], self.weight1_41, stride=1, padding=1, groups=1)
            out1_42 = F.conv2d(x[:, 41:42,:,:], self.weight1_42, stride=1, padding=1, groups=1)
            out1_43 = F.conv2d(x[:, 42:43,:,:], self.weight1_43, stride=1, padding=1, groups=1)
            out1_44 = F.conv2d(x[:, 43:44,:,:], self.weight1_44, stride=1, padding=1, groups=1)
            out1_45 = F.conv2d(x[:, 44:45,:,:], self.weight1_45, stride=1, padding=1, groups=1)
            out1_46 = F.conv2d(x[:, 45:46,:,:], self.weight1_46, stride=1, padding=1, groups=1)
            out1_47 = F.conv2d(x[:, 46:47,:,:], self.weight1_47, stride=1, padding=1, groups=1)
            out1_48 = F.conv2d(x[:, 47:48,:,:], self.weight1_48, stride=1, padding=1, groups=1)
            out1_49 = F.conv2d(x[:, 48:49,:,:], self.weight1_49, stride=1, padding=1, groups=1)
            out1_50 = F.conv2d(x[:, 49:50,:,:], self.weight1_50, stride=1, padding=1, groups=1)
            out1_51 = F.conv2d(x[:, 50:51,:,:], self.weight1_51, stride=1, padding=1, groups=1)
            out1_52 = F.conv2d(x[:, 51:52,:,:], self.weight1_52, stride=1, padding=1, groups=1)
            out1_53 = F.conv2d(x[:, 52:53,:,:], self.weight1_53, stride=1, padding=1, groups=1)
            out1_54 = F.conv2d(x[:, 53:54,:,:], self.weight1_54, stride=1, padding=1, groups=1)
            out1_55 = F.conv2d(x[:, 54:55,:,:], self.weight1_55, stride=1, padding=1, groups=1)
            out1_56 = F.conv2d(x[:, 55:56,:,:], self.weight1_56, stride=1, padding=1, groups=1)
            out1_57 = F.conv2d(x[:, 56:57,:,:], self.weight1_57, stride=1, padding=1, groups=1)
            out1_58 = F.conv2d(x[:, 57:58,:,:], self.weight1_58, stride=1, padding=1, groups=1)
            out1_59 = F.conv2d(x[:, 58:59,:,:], self.weight1_59, stride=1, padding=1, groups=1)
            out1_60 = F.conv2d(x[:, 59:60,:,:], self.weight1_60, stride=1, padding=1, groups=1)
            out1_61 = F.conv2d(x[:, 60:61,:,:], self.weight1_61, stride=1, padding=1, groups=1)
            out1_62 = F.conv2d(x[:, 61:62,:,:], self.weight1_62, stride=1, padding=1, groups=1)
            out1_63 = F.conv2d(x[:, 62:63,:,:], self.weight1_63, stride=1, padding=1, groups=1)
            out1_64 = F.conv2d(x[:, 63:64,:,:], self.weight1_64, stride=1, padding=1, groups=1)
            out1_65 = F.conv2d(x[:, 64:65,:,:], self.weight1_65, stride=1, padding=1, groups=1)
            out1_66 = F.conv2d(x[:, 65:66,:,:], self.weight1_66, stride=1, padding=1, groups=1)
            out1_67 = F.conv2d(x[:, 66:67,:,:], self.weight1_67, stride=1, padding=1, groups=1)
            out1_68 = F.conv2d(x[:, 67:68,:,:], self.weight1_68, stride=1, padding=1, groups=1)
            out1_69 = F.conv2d(x[:, 68:69,:,:], self.weight1_69, stride=1, padding=1, groups=1)
            out1_70 = F.conv2d(x[:, 69:70,:,:], self.weight1_70, stride=1, padding=1, groups=1)
            out1_71 = F.conv2d(x[:, 70:71,:,:], self.weight1_71, stride=1, padding=1, groups=1)
            out1_72 = F.conv2d(x[:, 71:72,:,:], self.weight1_72, stride=1, padding=1, groups=1)
            out1_73 = F.conv2d(x[:, 72:73,:,:], self.weight1_73, stride=1, padding=1, groups=1)
            out1_74 = F.conv2d(x[:, 73:74,:,:], self.weight1_74, stride=1, padding=1, groups=1)
            out1_75 = F.conv2d(x[:, 74:75,:,:], self.weight1_75, stride=1, padding=1, groups=1)
            out1_76 = F.conv2d(x[:, 75:76,:,:], self.weight1_76, stride=1, padding=1, groups=1)
            out1_77 = F.conv2d(x[:, 76:77,:,:], self.weight1_77, stride=1, padding=1, groups=1)
            out1_78 = F.conv2d(x[:, 77:78,:,:], self.weight1_78, stride=1, padding=1, groups=1)
            out1_79 = F.conv2d(x[:, 78:79,:,:], self.weight1_79, stride=1, padding=1, groups=1)
            out1_80 = F.conv2d(x[:, 79:80,:,:], self.weight1_80, stride=1, padding=1, groups=1)
            out1_81 = F.conv2d(x[:, 80:81,:,:], self.weight1_81, stride=1, padding=1, groups=1)
            out1_82 = F.conv2d(x[:, 81:82,:,:], self.weight1_82, stride=1, padding=1, groups=1)
            out1_83 = F.conv2d(x[:, 82:83,:,:], self.weight1_83, stride=1, padding=1, groups=1)
            out1_84 = F.conv2d(x[:, 83:84,:,:], self.weight1_84, stride=1, padding=1, groups=1)
            out1_85 = F.conv2d(x[:, 84:85,:,:], self.weight1_85, stride=1, padding=1, groups=1)
            out1_86 = F.conv2d(x[:, 85:86,:,:], self.weight1_86, stride=1, padding=1, groups=1)
            out1_87 = F.conv2d(x[:, 86:87,:,:], self.weight1_87, stride=1, padding=1, groups=1)
            out1_88 = F.conv2d(x[:, 87:88,:,:], self.weight1_88, stride=1, padding=1, groups=1)
            out1_89 = F.conv2d(x[:, 88:89,:,:], self.weight1_89, stride=1, padding=1, groups=1)
            out1_90 = F.conv2d(x[:, 89:90,:,:], self.weight1_90, stride=1, padding=1, groups=1)
            out1_91 = F.conv2d(x[:, 90:91,:,:], self.weight1_91, stride=1, padding=1, groups=1)
            out1_92 = F.conv2d(x[:, 91:92,:,:], self.weight1_92, stride=1, padding=1, groups=1)
            out1_93 = F.conv2d(x[:, 92:93,:,:], self.weight1_93, stride=1, padding=1, groups=1)
            out1_94 = F.conv2d(x[:, 93:94,:,:], self.weight1_94, stride=1, padding=1, groups=1)
            out1_95 = F.conv2d(x[:, 94:95,:,:], self.weight1_95, stride=1, padding=1, groups=1)
            out1_96 = F.conv2d(x[:, 95:96,:,:], self.weight1_96, stride=1, padding=1, groups=1)
            out1_97 = F.conv2d(x[:, 96:97,:,:], self.weight1_97, stride=1, padding=1, groups=1)
            out1_98 = F.conv2d(x[:, 97:98,:,:], self.weight1_98, stride=1, padding=1, groups=1)
            out1_99 = F.conv2d(x[:, 98:99,:,:], self.weight1_99, stride=1, padding=1, groups=1)
            out1_100 = F.conv2d(x[:, 99:100,:,:], self.weight1_100, stride=1, padding=1, groups=1)
            out1_101 = F.conv2d(x[:, 100:101,:,:], self.weight1_101, stride=1, padding=1, groups=1)
            out1_102 = F.conv2d(x[:, 101:102,:,:], self.weight1_102, stride=1, padding=1, groups=1)
            out1_103 = F.conv2d(x[:, 102:103,:,:], self.weight1_103, stride=1, padding=1, groups=1)
            out1_104 = F.conv2d(x[:, 103:104,:,:], self.weight1_104, stride=1, padding=1, groups=1)
            out1_105 = F.conv2d(x[:, 104:105,:,:], self.weight1_105, stride=1, padding=1, groups=1)
            out1_106 = F.conv2d(x[:, 105:106,:,:], self.weight1_106, stride=1, padding=1, groups=1)
            out1_107 = F.conv2d(x[:, 106:107,:,:], self.weight1_107, stride=1, padding=1, groups=1)
            out1_108 = F.conv2d(x[:, 107:108,:,:], self.weight1_108, stride=1, padding=1, groups=1)
            out1_109 = F.conv2d(x[:, 108:109,:,:], self.weight1_109, stride=1, padding=1, groups=1)
            out1_110 = F.conv2d(x[:, 109:110,:,:], self.weight1_110, stride=1, padding=1, groups=1)
            out1_111 = F.conv2d(x[:, 110:111,:,:], self.weight1_111, stride=1, padding=1, groups=1)
            out1_112 = F.conv2d(x[:, 111:112,:,:], self.weight1_112, stride=1, padding=1, groups=1)
            out1_113 = F.conv2d(x[:, 112:113,:,:], self.weight1_113, stride=1, padding=1, groups=1)
            out1_114 = F.conv2d(x[:, 113:114,:,:], self.weight1_114, stride=1, padding=1, groups=1)
            out1_115 = F.conv2d(x[:, 114:115,:,:], self.weight1_115, stride=1, padding=1, groups=1)
            out1_116 = F.conv2d(x[:, 115:116,:,:], self.weight1_116, stride=1, padding=1, groups=1)
            out1_117 = F.conv2d(x[:, 116:117,:,:], self.weight1_117, stride=1, padding=1, groups=1)
            out1_118 = F.conv2d(x[:, 117:118,:,:], self.weight1_118, stride=1, padding=1, groups=1)
            out1_119 = F.conv2d(x[:, 118:119,:,:], self.weight1_119, stride=1, padding=1, groups=1)
            out1_120 = F.conv2d(x[:, 119:120,:,:], self.weight1_120, stride=1, padding=1, groups=1)
            out1_121 = F.conv2d(x[:, 120:121,:,:], self.weight1_121, stride=1, padding=1, groups=1)
            out1_122 = F.conv2d(x[:, 121:122,:,:], self.weight1_122, stride=1, padding=1, groups=1)
            out1_123 = F.conv2d(x[:, 122:123,:,:], self.weight1_123, stride=1, padding=1, groups=1)
            out1_124 = F.conv2d(x[:, 123:124,:,:], self.weight1_124, stride=1, padding=1, groups=1)
            out1_125 = F.conv2d(x[:, 124:125,:,:], self.weight1_125, stride=1, padding=1, groups=1)
            out1_126 = F.conv2d(x[:, 125:126,:,:], self.weight1_126, stride=1, padding=1, groups=1)
            out1_127 = F.conv2d(x[:, 126:127,:,:], self.weight1_127, stride=1, padding=1, groups=1)
            out1_128 = F.conv2d(x[:, 127:128,:,:], self.weight1_128, stride=1, padding=1, groups=1)
            out1_129 = F.conv2d(x[:, 128:129,:,:], self.weight1_129, stride=1, padding=1, groups=1)
            out1_130 = F.conv2d(x[:, 129:130,:,:], self.weight1_130, stride=1, padding=1, groups=1)
            out1_131 = F.conv2d(x[:, 130:131,:,:], self.weight1_131, stride=1, padding=1, groups=1)
            out1_132 = F.conv2d(x[:, 131:132,:,:], self.weight1_132, stride=1, padding=1, groups=1)
            out1_133 = F.conv2d(x[:, 132:133,:,:], self.weight1_133, stride=1, padding=1, groups=1)
            out1_134 = F.conv2d(x[:, 133:134,:,:], self.weight1_134, stride=1, padding=1, groups=1)
            out1_135 = F.conv2d(x[:, 134:135,:,:], self.weight1_135, stride=1, padding=1, groups=1)
            out1_136 = F.conv2d(x[:, 135:136,:,:], self.weight1_136, stride=1, padding=1, groups=1)
            out1_137 = F.conv2d(x[:, 136:137,:,:], self.weight1_137, stride=1, padding=1, groups=1)
            out1_138 = F.conv2d(x[:, 137:138,:,:], self.weight1_138, stride=1, padding=1, groups=1)
            out1_139 = F.conv2d(x[:, 138:139,:,:], self.weight1_139, stride=1, padding=1, groups=1)
            out1_140 = F.conv2d(x[:, 139:140,:,:], self.weight1_140, stride=1, padding=1, groups=1)
            out1_141 = F.conv2d(x[:, 140:141,:,:], self.weight1_141, stride=1, padding=1, groups=1)
            out1_142 = F.conv2d(x[:, 141:142,:,:], self.weight1_142, stride=1, padding=1, groups=1)
            out1_143 = F.conv2d(x[:, 142:143,:,:], self.weight1_143, stride=1, padding=1, groups=1)
            out1_144 = F.conv2d(x[:, 143:144,:,:], self.weight1_144, stride=1, padding=1, groups=1)
            out1_145 = F.conv2d(x[:, 144:145,:,:], self.weight1_145, stride=1, padding=1, groups=1)
            out1_146 = F.conv2d(x[:, 145:146,:,:], self.weight1_146, stride=1, padding=1, groups=1)
            out1_147 = F.conv2d(x[:, 146:147,:,:], self.weight1_147, stride=1, padding=1, groups=1)
            out1_148 = F.conv2d(x[:, 147:148,:,:], self.weight1_148, stride=1, padding=1, groups=1)
            out1_149 = F.conv2d(x[:, 148:149,:,:], self.weight1_149, stride=1, padding=1, groups=1)
            out1_150 = F.conv2d(x[:, 149:150,:,:], self.weight1_150, stride=1, padding=1, groups=1)
            out1_151 = F.conv2d(x[:, 150:151,:,:], self.weight1_151, stride=1, padding=1, groups=1)
            out1_152 = F.conv2d(x[:, 151:152,:,:], self.weight1_152, stride=1, padding=1, groups=1)
            out1_153 = F.conv2d(x[:, 152:153,:,:], self.weight1_153, stride=1, padding=1, groups=1)
            out1_154 = F.conv2d(x[:, 153:154,:,:], self.weight1_154, stride=1, padding=1, groups=1)
            out1_155 = F.conv2d(x[:, 154:155,:,:], self.weight1_155, stride=1, padding=1, groups=1)
            out1_156 = F.conv2d(x[:, 155:156,:,:], self.weight1_156, stride=1, padding=1, groups=1)
            out1_157 = F.conv2d(x[:, 156:157,:,:], self.weight1_157, stride=1, padding=1, groups=1)
            out1_158 = F.conv2d(x[:, 157:158,:,:], self.weight1_158, stride=1, padding=1, groups=1)
            out1_159 = F.conv2d(x[:, 158:159,:,:], self.weight1_159, stride=1, padding=1, groups=1)
            out1_160 = F.conv2d(x[:, 159:160,:,:], self.weight1_160, stride=1, padding=1, groups=1)
            out1_161 = F.conv2d(x[:, 160:161,:,:], self.weight1_161, stride=1, padding=1, groups=1)
            out1_162 = F.conv2d(x[:, 161:162,:,:], self.weight1_162, stride=1, padding=1, groups=1)
            out1_163 = F.conv2d(x[:, 162:163,:,:], self.weight1_163, stride=1, padding=1, groups=1)
            out1_164 = F.conv2d(x[:, 163:164,:,:], self.weight1_164, stride=1, padding=1, groups=1)
            out1_165 = F.conv2d(x[:, 164:165,:,:], self.weight1_165, stride=1, padding=1, groups=1)
            out1_166 = F.conv2d(x[:, 165:166,:,:], self.weight1_166, stride=1, padding=1, groups=1)
            out1_167 = F.conv2d(x[:, 166:167,:,:], self.weight1_167, stride=1, padding=1, groups=1)
            out1_168 = F.conv2d(x[:, 167:168,:,:], self.weight1_168, stride=1, padding=1, groups=1)
            out1_169 = F.conv2d(x[:, 168:169,:,:], self.weight1_169, stride=1, padding=1, groups=1)
            out1_170 = F.conv2d(x[:, 169:170,:,:], self.weight1_170, stride=1, padding=1, groups=1)
            out1_171 = F.conv2d(x[:, 170:171,:,:], self.weight1_171, stride=1, padding=1, groups=1)
            out1_172 = F.conv2d(x[:, 171:172,:,:], self.weight1_172, stride=1, padding=1, groups=1)
            out1_173 = F.conv2d(x[:, 172:173,:,:], self.weight1_173, stride=1, padding=1, groups=1)
            out1_174 = F.conv2d(x[:, 173:174,:,:], self.weight1_174, stride=1, padding=1, groups=1)
            out1_175 = F.conv2d(x[:, 174:175,:,:], self.weight1_175, stride=1, padding=1, groups=1)
            out1_176 = F.conv2d(x[:, 175:176,:,:], self.weight1_176, stride=1, padding=1, groups=1)
            out1_177 = F.conv2d(x[:, 176:177,:,:], self.weight1_177, stride=1, padding=1, groups=1)
            out1_178 = F.conv2d(x[:, 177:178,:,:], self.weight1_178, stride=1, padding=1, groups=1)
            out1_179 = F.conv2d(x[:, 178:179,:,:], self.weight1_179, stride=1, padding=1, groups=1)
            out1_180 = F.conv2d(x[:, 179:180,:,:], self.weight1_180, stride=1, padding=1, groups=1)
            out1_181 = F.conv2d(x[:, 180:181,:,:], self.weight1_181, stride=1, padding=1, groups=1)
            out1_182 = F.conv2d(x[:, 181:182,:,:], self.weight1_182, stride=1, padding=1, groups=1)
            out1_183 = F.conv2d(x[:, 182:183,:,:], self.weight1_183, stride=1, padding=1, groups=1)
            out1_184 = F.conv2d(x[:, 183:184,:,:], self.weight1_184, stride=1, padding=1, groups=1)
            out1_185 = F.conv2d(x[:, 184:185,:,:], self.weight1_185, stride=1, padding=1, groups=1)
            out1_186 = F.conv2d(x[:, 185:186,:,:], self.weight1_186, stride=1, padding=1, groups=1)
            out1_187 = F.conv2d(x[:, 186:187,:,:], self.weight1_187, stride=1, padding=1, groups=1)
            out1_188 = F.conv2d(x[:, 187:188,:,:], self.weight1_188, stride=1, padding=1, groups=1)
            out1_189 = F.conv2d(x[:, 188:189,:,:], self.weight1_189, stride=1, padding=1, groups=1)
            out1_190 = F.conv2d(x[:, 189:190,:,:], self.weight1_190, stride=1, padding=1, groups=1)
            out1_191 = F.conv2d(x[:, 190:191,:,:], self.weight1_191, stride=1, padding=1, groups=1)
            out1_192 = F.conv2d(x[:, 191:192,:,:], self.weight1_192, stride=1, padding=1, groups=1)
            out1_193 = F.conv2d(x[:, 192:193,:,:], self.weight1_193, stride=1, padding=1, groups=1)
            out1_194 = F.conv2d(x[:, 193:194,:,:], self.weight1_194, stride=1, padding=1, groups=1)
            out1_195 = F.conv2d(x[:, 194:195,:,:], self.weight1_195, stride=1, padding=1, groups=1)
            out1_196 = F.conv2d(x[:, 195:196,:,:], self.weight1_196, stride=1, padding=1, groups=1)
            out1_197 = F.conv2d(x[:, 196:197,:,:], self.weight1_197, stride=1, padding=1, groups=1)
            out1_198 = F.conv2d(x[:, 197:198,:,:], self.weight1_198, stride=1, padding=1, groups=1)
            out1_199 = F.conv2d(x[:, 198:199,:,:], self.weight1_199, stride=1, padding=1, groups=1)
            out1_200 = F.conv2d(x[:, 199:200,:,:], self.weight1_200, stride=1, padding=1, groups=1)
            out1_201 = F.conv2d(x[:, 200:201,:,:], self.weight1_201, stride=1, padding=1, groups=1)
            out1_202 = F.conv2d(x[:, 201:202,:,:], self.weight1_202, stride=1, padding=1, groups=1)
            out1_203 = F.conv2d(x[:, 202:203,:,:], self.weight1_203, stride=1, padding=1, groups=1)
            out1_204 = F.conv2d(x[:, 203:204,:,:], self.weight1_204, stride=1, padding=1, groups=1)
            out1_205 = F.conv2d(x[:, 204:205,:,:], self.weight1_205, stride=1, padding=1, groups=1)
            out1_206 = F.conv2d(x[:, 205:206,:,:], self.weight1_206, stride=1, padding=1, groups=1)
            out1_207 = F.conv2d(x[:, 206:207,:,:], self.weight1_207, stride=1, padding=1, groups=1)
            out1_208 = F.conv2d(x[:, 207:208,:,:], self.weight1_208, stride=1, padding=1, groups=1)
            out1_209 = F.conv2d(x[:, 208:209,:,:], self.weight1_209, stride=1, padding=1, groups=1)
            out1_210 = F.conv2d(x[:, 209:210,:,:], self.weight1_210, stride=1, padding=1, groups=1)
            out1_211 = F.conv2d(x[:, 210:211,:,:], self.weight1_211, stride=1, padding=1, groups=1)
            out1_212 = F.conv2d(x[:, 211:212,:,:], self.weight1_212, stride=1, padding=1, groups=1)
            out1_213 = F.conv2d(x[:, 212:213,:,:], self.weight1_213, stride=1, padding=1, groups=1)
            out1_214 = F.conv2d(x[:, 213:214,:,:], self.weight1_214, stride=1, padding=1, groups=1)
            out1_215 = F.conv2d(x[:, 214:215,:,:], self.weight1_215, stride=1, padding=1, groups=1)
            out1_216 = F.conv2d(x[:, 215:216,:,:], self.weight1_216, stride=1, padding=1, groups=1)
            out1_217 = F.conv2d(x[:, 216:217,:,:], self.weight1_217, stride=1, padding=1, groups=1)
            out1_218 = F.conv2d(x[:, 217:218,:,:], self.weight1_218, stride=1, padding=1, groups=1)
            out1_219 = F.conv2d(x[:, 218:219,:,:], self.weight1_219, stride=1, padding=1, groups=1)
            out1_220 = F.conv2d(x[:, 219:220,:,:], self.weight1_220, stride=1, padding=1, groups=1)
            out1_221 = F.conv2d(x[:, 220:221,:,:], self.weight1_221, stride=1, padding=1, groups=1)
            out1_222 = F.conv2d(x[:, 221:222,:,:], self.weight1_222, stride=1, padding=1, groups=1)
            out1_223 = F.conv2d(x[:, 222:223,:,:], self.weight1_223, stride=1, padding=1, groups=1)
            out1_224 = F.conv2d(x[:, 223:224,:,:], self.weight1_224, stride=1, padding=1, groups=1)
            out1_225 = F.conv2d(x[:, 224:225,:,:], self.weight1_225, stride=1, padding=1, groups=1)
            out1_226 = F.conv2d(x[:, 225:226,:,:], self.weight1_226, stride=1, padding=1, groups=1)
            out1_227 = F.conv2d(x[:, 226:227,:,:], self.weight1_227, stride=1, padding=1, groups=1)
            out1_228 = F.conv2d(x[:, 227:228,:,:], self.weight1_228, stride=1, padding=1, groups=1)
            out1_229 = F.conv2d(x[:, 228:229,:,:], self.weight1_229, stride=1, padding=1, groups=1)
            out1_230 = F.conv2d(x[:, 229:230,:,:], self.weight1_230, stride=1, padding=1, groups=1)
            out1_231 = F.conv2d(x[:, 230:231,:,:], self.weight1_231, stride=1, padding=1, groups=1)
            out1_232 = F.conv2d(x[:, 231:232,:,:], self.weight1_232, stride=1, padding=1, groups=1)
            out1_233 = F.conv2d(x[:, 232:233,:,:], self.weight1_233, stride=1, padding=1, groups=1)
            out1_234 = F.conv2d(x[:, 233:234,:,:], self.weight1_234, stride=1, padding=1, groups=1)
            out1_235 = F.conv2d(x[:, 234:235,:,:], self.weight1_235, stride=1, padding=1, groups=1)
            out1_236 = F.conv2d(x[:, 235:236,:,:], self.weight1_236, stride=1, padding=1, groups=1)
            out1_237 = F.conv2d(x[:, 236:237,:,:], self.weight1_237, stride=1, padding=1, groups=1)
            out1_238 = F.conv2d(x[:, 237:238,:,:], self.weight1_238, stride=1, padding=1, groups=1)
            out1_239 = F.conv2d(x[:, 238:239,:,:], self.weight1_239, stride=1, padding=1, groups=1)
            out1_240 = F.conv2d(x[:, 239:240,:,:], self.weight1_240, stride=1, padding=1, groups=1)
            out1_241 = F.conv2d(x[:, 240:241,:,:], self.weight1_241, stride=1, padding=1, groups=1)
            out1_242 = F.conv2d(x[:, 241:242,:,:], self.weight1_242, stride=1, padding=1, groups=1)
            out1_243 = F.conv2d(x[:, 242:243,:,:], self.weight1_243, stride=1, padding=1, groups=1)
            out1_244 = F.conv2d(x[:, 243:244,:,:], self.weight1_244, stride=1, padding=1, groups=1)
            out1_245 = F.conv2d(x[:, 244:245,:,:], self.weight1_245, stride=1, padding=1, groups=1)
            out1_246 = F.conv2d(x[:, 245:246,:,:], self.weight1_246, stride=1, padding=1, groups=1)
            out1_247 = F.conv2d(x[:, 246:247,:,:], self.weight1_247, stride=1, padding=1, groups=1)
            out1_248 = F.conv2d(x[:, 247:248,:,:], self.weight1_248, stride=1, padding=1, groups=1)
            out1_249 = F.conv2d(x[:, 248:249,:,:], self.weight1_249, stride=1, padding=1, groups=1)
            out1_250 = F.conv2d(x[:, 249:250,:,:], self.weight1_250, stride=1, padding=1, groups=1)
            out1_251 = F.conv2d(x[:, 250:251,:,:], self.weight1_251, stride=1, padding=1, groups=1)
            out1_252 = F.conv2d(x[:, 251:252,:,:], self.weight1_252, stride=1, padding=1, groups=1)
            out1_253 = F.conv2d(x[:, 252:253,:,:], self.weight1_253, stride=1, padding=1, groups=1)
            out1_254 = F.conv2d(x[:, 253:254,:,:], self.weight1_254, stride=1, padding=1, groups=1)
            out1_255 = F.conv2d(x[:, 254:255,:,:], self.weight1_255, stride=1, padding=1, groups=1)
            out1_256 = F.conv2d(x[:, 255:256,:,:], self.weight1_256, stride=1, padding=1, groups=1)
            out1_257 = F.conv2d(x[:, 256:257,:,:], self.weight1_257, stride=1, padding=1, groups=1)
            out1_258 = F.conv2d(x[:, 257:258,:,:], self.weight1_258, stride=1, padding=1, groups=1)
            out1_259 = F.conv2d(x[:, 258:259,:,:], self.weight1_259, stride=1, padding=1, groups=1)
            out1_260 = F.conv2d(x[:, 259:260,:,:], self.weight1_260, stride=1, padding=1, groups=1)
            out1_261 = F.conv2d(x[:, 260:261,:,:], self.weight1_261, stride=1, padding=1, groups=1)
            out1_262 = F.conv2d(x[:, 261:262,:,:], self.weight1_262, stride=1, padding=1, groups=1)
            out1_263 = F.conv2d(x[:, 262:263,:,:], self.weight1_263, stride=1, padding=1, groups=1)
            out1_264 = F.conv2d(x[:, 263:264,:,:], self.weight1_264, stride=1, padding=1, groups=1)
            out1_265 = F.conv2d(x[:, 264:265,:,:], self.weight1_265, stride=1, padding=1, groups=1)
            out1_266 = F.conv2d(x[:, 265:266,:,:], self.weight1_266, stride=1, padding=1, groups=1)
            out1_267 = F.conv2d(x[:, 266:267,:,:], self.weight1_267, stride=1, padding=1, groups=1)
            out1_268 = F.conv2d(x[:, 267:268,:,:], self.weight1_268, stride=1, padding=1, groups=1)
            out1_269 = F.conv2d(x[:, 268:269,:,:], self.weight1_269, stride=1, padding=1, groups=1)
            out1_270 = F.conv2d(x[:, 269:270,:,:], self.weight1_270, stride=1, padding=1, groups=1)
            out1_271 = F.conv2d(x[:, 270:271,:,:], self.weight1_271, stride=1, padding=1, groups=1)
            out1_272 = F.conv2d(x[:, 271:272,:,:], self.weight1_272, stride=1, padding=1, groups=1)
            out1_273 = F.conv2d(x[:, 272:273,:,:], self.weight1_273, stride=1, padding=1, groups=1)
            out1_274 = F.conv2d(x[:, 273:274,:,:], self.weight1_274, stride=1, padding=1, groups=1)
            out1_275 = F.conv2d(x[:, 274:275,:,:], self.weight1_275, stride=1, padding=1, groups=1)
            out1_276 = F.conv2d(x[:, 275:276,:,:], self.weight1_276, stride=1, padding=1, groups=1)
            out1_277 = F.conv2d(x[:, 276:277,:,:], self.weight1_277, stride=1, padding=1, groups=1)
            out1_278 = F.conv2d(x[:, 277:278,:,:], self.weight1_278, stride=1, padding=1, groups=1)
            out1_279 = F.conv2d(x[:, 278:279,:,:], self.weight1_279, stride=1, padding=1, groups=1)
            out1_280 = F.conv2d(x[:, 279:280,:,:], self.weight1_280, stride=1, padding=1, groups=1)
            out1_281 = F.conv2d(x[:, 280:281,:,:], self.weight1_281, stride=1, padding=1, groups=1)
            out1_282 = F.conv2d(x[:, 281:282,:,:], self.weight1_282, stride=1, padding=1, groups=1)
            out1_283 = F.conv2d(x[:, 282:283,:,:], self.weight1_283, stride=1, padding=1, groups=1)
            out1_284 = F.conv2d(x[:, 283:284,:,:], self.weight1_284, stride=1, padding=1, groups=1)
            out1_285 = F.conv2d(x[:, 284:285,:,:], self.weight1_285, stride=1, padding=1, groups=1)
            out1_286 = F.conv2d(x[:, 285:286,:,:], self.weight1_286, stride=1, padding=1, groups=1)
            out1_287 = F.conv2d(x[:, 286:287,:,:], self.weight1_287, stride=1, padding=1, groups=1)
            out1_288 = F.conv2d(x[:, 287:288,:,:], self.weight1_288, stride=1, padding=1, groups=1)
            out1_289 = F.conv2d(x[:, 288:289,:,:], self.weight1_289, stride=1, padding=1, groups=1)
            out1_290 = F.conv2d(x[:, 289:290,:,:], self.weight1_290, stride=1, padding=1, groups=1)
            out1_291 = F.conv2d(x[:, 290:291,:,:], self.weight1_291, stride=1, padding=1, groups=1)
            out1_292 = F.conv2d(x[:, 291:292,:,:], self.weight1_292, stride=1, padding=1, groups=1)
            out1_293 = F.conv2d(x[:, 292:293,:,:], self.weight1_293, stride=1, padding=1, groups=1)
            out1_294 = F.conv2d(x[:, 293:294,:,:], self.weight1_294, stride=1, padding=1, groups=1)
            out1_295 = F.conv2d(x[:, 294:295,:,:], self.weight1_295, stride=1, padding=1, groups=1)
            out1_296 = F.conv2d(x[:, 295:296,:,:], self.weight1_296, stride=1, padding=1, groups=1)
            out1_297 = F.conv2d(x[:, 296:297,:,:], self.weight1_297, stride=1, padding=1, groups=1)
            out1_298 = F.conv2d(x[:, 297:298,:,:], self.weight1_298, stride=1, padding=1, groups=1)
            out1_299 = F.conv2d(x[:, 298:299,:,:], self.weight1_299, stride=1, padding=1, groups=1)
            out1_300 = F.conv2d(x[:, 299:300,:,:], self.weight1_300, stride=1, padding=1, groups=1)
            out1_301 = F.conv2d(x[:, 300:301,:,:], self.weight1_301, stride=1, padding=1, groups=1)
            out1_302 = F.conv2d(x[:, 301:302,:,:], self.weight1_302, stride=1, padding=1, groups=1)
            out1_303 = F.conv2d(x[:, 302:303,:,:], self.weight1_303, stride=1, padding=1, groups=1)
            out1_304 = F.conv2d(x[:, 303:304,:,:], self.weight1_304, stride=1, padding=1, groups=1)
            out1_305 = F.conv2d(x[:, 304:305,:,:], self.weight1_305, stride=1, padding=1, groups=1)
            out1_306 = F.conv2d(x[:, 305:306,:,:], self.weight1_306, stride=1, padding=1, groups=1)
            out1_307 = F.conv2d(x[:, 306:307,:,:], self.weight1_307, stride=1, padding=1, groups=1)
            out1_308 = F.conv2d(x[:, 307:308,:,:], self.weight1_308, stride=1, padding=1, groups=1)
            out1_309 = F.conv2d(x[:, 308:309,:,:], self.weight1_309, stride=1, padding=1, groups=1)
            out1_310 = F.conv2d(x[:, 309:310,:,:], self.weight1_310, stride=1, padding=1, groups=1)
            out1_311 = F.conv2d(x[:, 310:311,:,:], self.weight1_311, stride=1, padding=1, groups=1)
            out1_312 = F.conv2d(x[:, 311:312,:,:], self.weight1_312, stride=1, padding=1, groups=1)
            out1_313 = F.conv2d(x[:, 312:313,:,:], self.weight1_313, stride=1, padding=1, groups=1)
            out1_314 = F.conv2d(x[:, 313:314,:,:], self.weight1_314, stride=1, padding=1, groups=1)
            out1_315 = F.conv2d(x[:, 314:315,:,:], self.weight1_315, stride=1, padding=1, groups=1)
            out1_316 = F.conv2d(x[:, 315:316,:,:], self.weight1_316, stride=1, padding=1, groups=1)
            out1_317 = F.conv2d(x[:, 316:317,:,:], self.weight1_317, stride=1, padding=1, groups=1)
            out1_318 = F.conv2d(x[:, 317:318,:,:], self.weight1_318, stride=1, padding=1, groups=1)
            out1_319 = F.conv2d(x[:, 318:319,:,:], self.weight1_319, stride=1, padding=1, groups=1)
            out1_320 = F.conv2d(x[:, 319:320,:,:], self.weight1_320, stride=1, padding=1, groups=1)
            out1_321 = F.conv2d(x[:, 320:321,:,:], self.weight1_321, stride=1, padding=1, groups=1)
            out1_322 = F.conv2d(x[:, 321:322,:,:], self.weight1_322, stride=1, padding=1, groups=1)
            out1_323 = F.conv2d(x[:, 322:323,:,:], self.weight1_323, stride=1, padding=1, groups=1)
            out1_324 = F.conv2d(x[:, 323:324,:,:], self.weight1_324, stride=1, padding=1, groups=1)
            out1_325 = F.conv2d(x[:, 324:325,:,:], self.weight1_325, stride=1, padding=1, groups=1)
            out1_326 = F.conv2d(x[:, 325:326,:,:], self.weight1_326, stride=1, padding=1, groups=1)
            out1_327 = F.conv2d(x[:, 326:327,:,:], self.weight1_327, stride=1, padding=1, groups=1)
            out1_328 = F.conv2d(x[:, 327:328,:,:], self.weight1_328, stride=1, padding=1, groups=1)
            out1_329 = F.conv2d(x[:, 328:329,:,:], self.weight1_329, stride=1, padding=1, groups=1)
            out1_330 = F.conv2d(x[:, 329:330,:,:], self.weight1_330, stride=1, padding=1, groups=1)
            out1_331 = F.conv2d(x[:, 330:331,:,:], self.weight1_331, stride=1, padding=1, groups=1)
            out1_332 = F.conv2d(x[:, 331:332,:,:], self.weight1_332, stride=1, padding=1, groups=1)
            out1_333 = F.conv2d(x[:, 332:333,:,:], self.weight1_333, stride=1, padding=1, groups=1)
            out1_334 = F.conv2d(x[:, 333:334,:,:], self.weight1_334, stride=1, padding=1, groups=1)
            out1_335 = F.conv2d(x[:, 334:335,:,:], self.weight1_335, stride=1, padding=1, groups=1)
            out1_336 = F.conv2d(x[:, 335:336,:,:], self.weight1_336, stride=1, padding=1, groups=1)
            out1_337 = F.conv2d(x[:, 336:337,:,:], self.weight1_337, stride=1, padding=1, groups=1)
            out1_338 = F.conv2d(x[:, 337:338,:,:], self.weight1_338, stride=1, padding=1, groups=1)
            out1_339 = F.conv2d(x[:, 338:339,:,:], self.weight1_339, stride=1, padding=1, groups=1)
            out1_340 = F.conv2d(x[:, 339:340,:,:], self.weight1_340, stride=1, padding=1, groups=1)
            out1_341 = F.conv2d(x[:, 340:341,:,:], self.weight1_341, stride=1, padding=1, groups=1)
            out1_342 = F.conv2d(x[:, 341:342,:,:], self.weight1_342, stride=1, padding=1, groups=1)
            out1_343 = F.conv2d(x[:, 342:343,:,:], self.weight1_343, stride=1, padding=1, groups=1)
            out1_344 = F.conv2d(x[:, 343:344,:,:], self.weight1_344, stride=1, padding=1, groups=1)
            out1_345 = F.conv2d(x[:, 344:345,:,:], self.weight1_345, stride=1, padding=1, groups=1)
            out1_346 = F.conv2d(x[:, 345:346,:,:], self.weight1_346, stride=1, padding=1, groups=1)
            out1_347 = F.conv2d(x[:, 346:347,:,:], self.weight1_347, stride=1, padding=1, groups=1)
            out1_348 = F.conv2d(x[:, 347:348,:,:], self.weight1_348, stride=1, padding=1, groups=1)
            out1_349 = F.conv2d(x[:, 348:349,:,:], self.weight1_349, stride=1, padding=1, groups=1)
            out1_350 = F.conv2d(x[:, 349:350,:,:], self.weight1_350, stride=1, padding=1, groups=1)
            out1_351 = F.conv2d(x[:, 350:351,:,:], self.weight1_351, stride=1, padding=1, groups=1)
            out1_352 = F.conv2d(x[:, 351:352,:,:], self.weight1_352, stride=1, padding=1, groups=1)
            out1_353 = F.conv2d(x[:, 352:353,:,:], self.weight1_353, stride=1, padding=1, groups=1)
            out1_354 = F.conv2d(x[:, 353:354,:,:], self.weight1_354, stride=1, padding=1, groups=1)
            out1_355 = F.conv2d(x[:, 354:355,:,:], self.weight1_355, stride=1, padding=1, groups=1)
            out1_356 = F.conv2d(x[:, 355:356,:,:], self.weight1_356, stride=1, padding=1, groups=1)
            out1_357 = F.conv2d(x[:, 356:357,:,:], self.weight1_357, stride=1, padding=1, groups=1)
            out1_358 = F.conv2d(x[:, 357:358,:,:], self.weight1_358, stride=1, padding=1, groups=1)
            out1_359 = F.conv2d(x[:, 358:359,:,:], self.weight1_359, stride=1, padding=1, groups=1)
            out1_360 = F.conv2d(x[:, 359:360,:,:], self.weight1_360, stride=1, padding=1, groups=1)
            out1_361 = F.conv2d(x[:, 360:361,:,:], self.weight1_361, stride=1, padding=1, groups=1)
            out1_362 = F.conv2d(x[:, 361:362,:,:], self.weight1_362, stride=1, padding=1, groups=1)
            out1_363 = F.conv2d(x[:, 362:363,:,:], self.weight1_363, stride=1, padding=1, groups=1)
            out1_364 = F.conv2d(x[:, 363:364,:,:], self.weight1_364, stride=1, padding=1, groups=1)
            out1_365 = F.conv2d(x[:, 364:365,:,:], self.weight1_365, stride=1, padding=1, groups=1)
            out1_366 = F.conv2d(x[:, 365:366,:,:], self.weight1_366, stride=1, padding=1, groups=1)
            out1_367 = F.conv2d(x[:, 366:367,:,:], self.weight1_367, stride=1, padding=1, groups=1)
            out1_368 = F.conv2d(x[:, 367:368,:,:], self.weight1_368, stride=1, padding=1, groups=1)
            out1_369 = F.conv2d(x[:, 368:369,:,:], self.weight1_369, stride=1, padding=1, groups=1)
            out1_370 = F.conv2d(x[:, 369:370,:,:], self.weight1_370, stride=1, padding=1, groups=1)
            out1_371 = F.conv2d(x[:, 370:371,:,:], self.weight1_371, stride=1, padding=1, groups=1)
            out1_372 = F.conv2d(x[:, 371:372,:,:], self.weight1_372, stride=1, padding=1, groups=1)
            out1_373 = F.conv2d(x[:, 372:373,:,:], self.weight1_373, stride=1, padding=1, groups=1)
            out1_374 = F.conv2d(x[:, 373:374,:,:], self.weight1_374, stride=1, padding=1, groups=1)
            out1_375 = F.conv2d(x[:, 374:375,:,:], self.weight1_375, stride=1, padding=1, groups=1)
            out1_376 = F.conv2d(x[:, 375:376,:,:], self.weight1_376, stride=1, padding=1, groups=1)
            out1_377 = F.conv2d(x[:, 376:377,:,:], self.weight1_377, stride=1, padding=1, groups=1)
            out1_378 = F.conv2d(x[:, 377:378,:,:], self.weight1_378, stride=1, padding=1, groups=1)
            out1_379 = F.conv2d(x[:, 378:379,:,:], self.weight1_379, stride=1, padding=1, groups=1)
            out1_380 = F.conv2d(x[:, 379:380,:,:], self.weight1_380, stride=1, padding=1, groups=1)
            out1_381 = F.conv2d(x[:, 380:381,:,:], self.weight1_381, stride=1, padding=1, groups=1)
            out1_382 = F.conv2d(x[:, 381:382,:,:], self.weight1_382, stride=1, padding=1, groups=1)
            out1_383 = F.conv2d(x[:, 382:383,:,:], self.weight1_383, stride=1, padding=1, groups=1)
            out1_384 = F.conv2d(x[:, 383:384,:,:], self.weight1_384, stride=1, padding=1, groups=1)


            out1 = torch.cat([out1_1, out1_2, out1_3, out1_4, out1_5, out1_6, out1_7, out1_8, out1_9, out1_10,
                    out1_11, out1_12, out1_13, out1_14, out1_15, out1_16, out1_17, out1_18, out1_19, out1_20,
                    out1_21, out1_22, out1_23, out1_24, out1_25, out1_26, out1_27, out1_28, out1_29, out1_30,
                    out1_31, out1_32, out1_33, out1_34, out1_35, out1_36, out1_37, out1_38, out1_39, out1_40,
                    out1_41, out1_42, out1_43, out1_44, out1_45, out1_46, out1_47, out1_48, out1_49, out1_50,
                    out1_51, out1_52, out1_53, out1_54, out1_55, out1_56, out1_57, out1_58, out1_59, out1_60,
                    out1_61, out1_62, out1_63, out1_64, out1_65, out1_66, out1_67, out1_68, out1_69, out1_70,
                    out1_71, out1_72, out1_73, out1_74, out1_75, out1_76, out1_77, out1_78, out1_79, out1_80,
                    out1_81, out1_82, out1_83, out1_84, out1_85, out1_86, out1_87, out1_88, out1_89, out1_90,
                    out1_91, out1_92, out1_93, out1_94, out1_95, out1_96, out1_97, out1_98, out1_99, out1_100,
                    out1_101, out1_102, out1_103, out1_104, out1_105, out1_106, out1_107, out1_108, out1_109, out1_110,
                    out1_111, out1_112, out1_113, out1_114, out1_115, out1_116, out1_117, out1_118, out1_119, out1_120,
                    out1_121, out1_122, out1_123, out1_124, out1_125, out1_126, out1_127, out1_128, out1_129, out1_130,
                    out1_131, out1_132, out1_133, out1_134, out1_135, out1_136, out1_137, out1_138, out1_139, out1_140,
                    out1_141, out1_142, out1_143, out1_144, out1_145, out1_146, out1_147, out1_148, out1_149, out1_150,
                    out1_151, out1_152, out1_153, out1_154, out1_155, out1_156, out1_157, out1_158, out1_159, out1_160,
                    out1_161, out1_162, out1_163, out1_164, out1_165, out1_166, out1_167, out1_168, out1_169, out1_170,
                    out1_171, out1_172, out1_173, out1_174, out1_175, out1_176, out1_177, out1_178, out1_179, out1_180,
                    out1_181, out1_182, out1_183, out1_184, out1_185, out1_186, out1_187, out1_188, out1_189, out1_190,
                    out1_191, out1_192, out1_193, out1_194, out1_195, out1_196, out1_197, out1_198, out1_199, out1_200,
                    out1_201, out1_202, out1_203, out1_204, out1_205, out1_206, out1_207, out1_208, out1_209, out1_210,
                    out1_211, out1_212, out1_213, out1_214, out1_215, out1_216, out1_217, out1_218, out1_219, out1_220,
                    out1_221, out1_222, out1_223, out1_224, out1_225, out1_226, out1_227, out1_228, out1_229, out1_230,
                    out1_231, out1_232, out1_233, out1_234, out1_235, out1_236, out1_237, out1_238, out1_239, out1_240,
                    out1_241, out1_242, out1_243, out1_244, out1_245, out1_246, out1_247, out1_248, out1_249, out1_250,
                    out1_251, out1_252, out1_253, out1_254, out1_255, out1_256, out1_257, out1_258, out1_259, out1_260,
                    out1_261, out1_262, out1_263, out1_264, out1_265, out1_266, out1_267, out1_268, out1_269, out1_270,
                    out1_271, out1_272, out1_273, out1_274, out1_275, out1_276, out1_277, out1_278, out1_279, out1_280,
                    out1_281, out1_282, out1_283, out1_284, out1_285, out1_286, out1_287, out1_288, out1_289, out1_290,
                    out1_291, out1_292, out1_293, out1_294, out1_295, out1_296, out1_297, out1_298, out1_299, out1_300,
                    out1_301, out1_302, out1_303, out1_304, out1_305, out1_306, out1_307, out1_308, out1_309, out1_310,
                    out1_311, out1_312, out1_313, out1_314, out1_315, out1_316, out1_317, out1_318, out1_319, out1_320,
                    out1_321, out1_322, out1_323, out1_324, out1_325, out1_326, out1_327, out1_328, out1_329, out1_330,
                    out1_331, out1_332, out1_333, out1_334, out1_335, out1_336, out1_337, out1_338, out1_339, out1_340,
                    out1_341, out1_342, out1_343, out1_344, out1_345, out1_346, out1_347, out1_348, out1_349, out1_350,
                    out1_351, out1_352, out1_353, out1_354, out1_355, out1_356, out1_357, out1_358, out1_359, out1_360,
                    out1_361, out1_362, out1_363, out1_364, out1_365, out1_366, out1_367, out1_368, out1_369, out1_370,
                    out1_371, out1_372, out1_373, out1_374, out1_375, out1_376, out1_377, out1_378, out1_379, out1_380,
                    out1_381, out1_382, out1_383, out1_384], dim=1)

            out1 = self.bn1(out1)
            out1 = F.relu(out1)
            out2_1 = F.conv2d(out1[:, 0:1,:,:], self.weight2_1, stride=1, padding=1, groups=1)
            out2_2 = F.conv2d(out1[:, 1:2,:,:], self.weight2_2, stride=1, padding=1, groups=1)
            out2_3 = F.conv2d(out1[:, 2:3,:,:], self.weight2_3, stride=1, padding=1, groups=1)
            out2_4 = F.conv2d(out1[:, 3:4,:,:], self.weight2_4, stride=1, padding=1, groups=1)
            out2_5 = F.conv2d(out1[:, 4:5,:,:], self.weight2_5, stride=1, padding=1, groups=1)
            out2_6 = F.conv2d(out1[:, 5:6,:,:], self.weight2_6, stride=1, padding=1, groups=1)
            out2_7 = F.conv2d(out1[:, 6:7,:,:], self.weight2_7, stride=1, padding=1, groups=1)
            out2_8 = F.conv2d(out1[:, 7:8,:,:], self.weight2_8, stride=1, padding=1, groups=1)
            out2_9 = F.conv2d(out1[:, 8:9,:,:], self.weight2_9, stride=1, padding=1, groups=1)
            out2_10 = F.conv2d(out1[:, 9:10,:,:], self.weight2_10, stride=1, padding=1, groups=1)
            out2_11 = F.conv2d(out1[:, 10:11,:,:], self.weight2_11, stride=1, padding=1, groups=1)
            out2_12 = F.conv2d(out1[:, 11:12,:,:], self.weight2_12, stride=1, padding=1, groups=1)
            out2_13 = F.conv2d(out1[:, 12:13,:,:], self.weight2_13, stride=1, padding=1, groups=1)
            out2_14 = F.conv2d(out1[:, 13:14,:,:], self.weight2_14, stride=1, padding=1, groups=1)
            out2_15 = F.conv2d(out1[:, 14:15,:,:], self.weight2_15, stride=1, padding=1, groups=1)
            out2_16 = F.conv2d(out1[:, 15:16,:,:], self.weight2_16, stride=1, padding=1, groups=1)
            out2_17 = F.conv2d(out1[:, 16:17,:,:], self.weight2_17, stride=1, padding=1, groups=1)
            out2_18 = F.conv2d(out1[:, 17:18,:,:], self.weight2_18, stride=1, padding=1, groups=1)
            out2_19 = F.conv2d(out1[:, 18:19,:,:], self.weight2_19, stride=1, padding=1, groups=1)
            out2_20 = F.conv2d(out1[:, 19:20,:,:], self.weight2_20, stride=1, padding=1, groups=1)
            out2_21 = F.conv2d(out1[:, 20:21,:,:], self.weight2_21, stride=1, padding=1, groups=1)
            out2_22 = F.conv2d(out1[:, 21:22,:,:], self.weight2_22, stride=1, padding=1, groups=1)
            out2_23 = F.conv2d(out1[:, 22:23,:,:], self.weight2_23, stride=1, padding=1, groups=1)
            out2_24 = F.conv2d(out1[:, 23:24,:,:], self.weight2_24, stride=1, padding=1, groups=1)
            out2_25 = F.conv2d(out1[:, 24:25,:,:], self.weight2_25, stride=1, padding=1, groups=1)
            out2_26 = F.conv2d(out1[:, 25:26,:,:], self.weight2_26, stride=1, padding=1, groups=1)
            out2_27 = F.conv2d(out1[:, 26:27,:,:], self.weight2_27, stride=1, padding=1, groups=1)
            out2_28 = F.conv2d(out1[:, 27:28,:,:], self.weight2_28, stride=1, padding=1, groups=1)
            out2_29 = F.conv2d(out1[:, 28:29,:,:], self.weight2_29, stride=1, padding=1, groups=1)
            out2_30 = F.conv2d(out1[:, 29:30,:,:], self.weight2_30, stride=1, padding=1, groups=1)
            out2_31 = F.conv2d(out1[:, 30:31,:,:], self.weight2_31, stride=1, padding=1, groups=1)
            out2_32 = F.conv2d(out1[:, 31:32,:,:], self.weight2_32, stride=1, padding=1, groups=1)
            out2_33 = F.conv2d(out1[:, 32:33,:,:], self.weight2_33, stride=1, padding=1, groups=1)
            out2_34 = F.conv2d(out1[:, 33:34,:,:], self.weight2_34, stride=1, padding=1, groups=1)
            out2_35 = F.conv2d(out1[:, 34:35,:,:], self.weight2_35, stride=1, padding=1, groups=1)
            out2_36 = F.conv2d(out1[:, 35:36,:,:], self.weight2_36, stride=1, padding=1, groups=1)
            out2_37 = F.conv2d(out1[:, 36:37,:,:], self.weight2_37, stride=1, padding=1, groups=1)
            out2_38 = F.conv2d(out1[:, 37:38,:,:], self.weight2_38, stride=1, padding=1, groups=1)
            out2_39 = F.conv2d(out1[:, 38:39,:,:], self.weight2_39, stride=1, padding=1, groups=1)
            out2_40 = F.conv2d(out1[:, 39:40,:,:], self.weight2_40, stride=1, padding=1, groups=1)
            out2_41 = F.conv2d(out1[:, 40:41,:,:], self.weight2_41, stride=1, padding=1, groups=1)
            out2_42 = F.conv2d(out1[:, 41:42,:,:], self.weight2_42, stride=1, padding=1, groups=1)
            out2_43 = F.conv2d(out1[:, 42:43,:,:], self.weight2_43, stride=1, padding=1, groups=1)
            out2_44 = F.conv2d(out1[:, 43:44,:,:], self.weight2_44, stride=1, padding=1, groups=1)
            out2_45 = F.conv2d(out1[:, 44:45,:,:], self.weight2_45, stride=1, padding=1, groups=1)
            out2_46 = F.conv2d(out1[:, 45:46,:,:], self.weight2_46, stride=1, padding=1, groups=1)
            out2_47 = F.conv2d(out1[:, 46:47,:,:], self.weight2_47, stride=1, padding=1, groups=1)
            out2_48 = F.conv2d(out1[:, 47:48,:,:], self.weight2_48, stride=1, padding=1, groups=1)
            out2_49 = F.conv2d(out1[:, 48:49,:,:], self.weight2_49, stride=1, padding=1, groups=1)
            out2_50 = F.conv2d(out1[:, 49:50,:,:], self.weight2_50, stride=1, padding=1, groups=1)
            out2_51 = F.conv2d(out1[:, 50:51,:,:], self.weight2_51, stride=1, padding=1, groups=1)
            out2_52 = F.conv2d(out1[:, 51:52,:,:], self.weight2_52, stride=1, padding=1, groups=1)
            out2_53 = F.conv2d(out1[:, 52:53,:,:], self.weight2_53, stride=1, padding=1, groups=1)
            out2_54 = F.conv2d(out1[:, 53:54,:,:], self.weight2_54, stride=1, padding=1, groups=1)
            out2_55 = F.conv2d(out1[:, 54:55,:,:], self.weight2_55, stride=1, padding=1, groups=1)
            out2_56 = F.conv2d(out1[:, 55:56,:,:], self.weight2_56, stride=1, padding=1, groups=1)
            out2_57 = F.conv2d(out1[:, 56:57,:,:], self.weight2_57, stride=1, padding=1, groups=1)
            out2_58 = F.conv2d(out1[:, 57:58,:,:], self.weight2_58, stride=1, padding=1, groups=1)
            out2_59 = F.conv2d(out1[:, 58:59,:,:], self.weight2_59, stride=1, padding=1, groups=1)
            out2_60 = F.conv2d(out1[:, 59:60,:,:], self.weight2_60, stride=1, padding=1, groups=1)
            out2_61 = F.conv2d(out1[:, 60:61,:,:], self.weight2_61, stride=1, padding=1, groups=1)
            out2_62 = F.conv2d(out1[:, 61:62,:,:], self.weight2_62, stride=1, padding=1, groups=1)
            out2_63 = F.conv2d(out1[:, 62:63,:,:], self.weight2_63, stride=1, padding=1, groups=1)
            out2_64 = F.conv2d(out1[:, 63:64,:,:], self.weight2_64, stride=1, padding=1, groups=1)
            out2_65 = F.conv2d(out1[:, 64:65,:,:], self.weight2_65, stride=1, padding=1, groups=1)
            out2_66 = F.conv2d(out1[:, 65:66,:,:], self.weight2_66, stride=1, padding=1, groups=1)
            out2_67 = F.conv2d(out1[:, 66:67,:,:], self.weight2_67, stride=1, padding=1, groups=1)
            out2_68 = F.conv2d(out1[:, 67:68,:,:], self.weight2_68, stride=1, padding=1, groups=1)
            out2_69 = F.conv2d(out1[:, 68:69,:,:], self.weight2_69, stride=1, padding=1, groups=1)
            out2_70 = F.conv2d(out1[:, 69:70,:,:], self.weight2_70, stride=1, padding=1, groups=1)
            out2_71 = F.conv2d(out1[:, 70:71,:,:], self.weight2_71, stride=1, padding=1, groups=1)
            out2_72 = F.conv2d(out1[:, 71:72,:,:], self.weight2_72, stride=1, padding=1, groups=1)
            out2_73 = F.conv2d(out1[:, 72:73,:,:], self.weight2_73, stride=1, padding=1, groups=1)
            out2_74 = F.conv2d(out1[:, 73:74,:,:], self.weight2_74, stride=1, padding=1, groups=1)
            out2_75 = F.conv2d(out1[:, 74:75,:,:], self.weight2_75, stride=1, padding=1, groups=1)
            out2_76 = F.conv2d(out1[:, 75:76,:,:], self.weight2_76, stride=1, padding=1, groups=1)
            out2_77 = F.conv2d(out1[:, 76:77,:,:], self.weight2_77, stride=1, padding=1, groups=1)
            out2_78 = F.conv2d(out1[:, 77:78,:,:], self.weight2_78, stride=1, padding=1, groups=1)
            out2_79 = F.conv2d(out1[:, 78:79,:,:], self.weight2_79, stride=1, padding=1, groups=1)
            out2_80 = F.conv2d(out1[:, 79:80,:,:], self.weight2_80, stride=1, padding=1, groups=1)
            out2_81 = F.conv2d(out1[:, 80:81,:,:], self.weight2_81, stride=1, padding=1, groups=1)
            out2_82 = F.conv2d(out1[:, 81:82,:,:], self.weight2_82, stride=1, padding=1, groups=1)
            out2_83 = F.conv2d(out1[:, 82:83,:,:], self.weight2_83, stride=1, padding=1, groups=1)
            out2_84 = F.conv2d(out1[:, 83:84,:,:], self.weight2_84, stride=1, padding=1, groups=1)
            out2_85 = F.conv2d(out1[:, 84:85,:,:], self.weight2_85, stride=1, padding=1, groups=1)
            out2_86 = F.conv2d(out1[:, 85:86,:,:], self.weight2_86, stride=1, padding=1, groups=1)
            out2_87 = F.conv2d(out1[:, 86:87,:,:], self.weight2_87, stride=1, padding=1, groups=1)
            out2_88 = F.conv2d(out1[:, 87:88,:,:], self.weight2_88, stride=1, padding=1, groups=1)
            out2_89 = F.conv2d(out1[:, 88:89,:,:], self.weight2_89, stride=1, padding=1, groups=1)
            out2_90 = F.conv2d(out1[:, 89:90,:,:], self.weight2_90, stride=1, padding=1, groups=1)
            out2_91 = F.conv2d(out1[:, 90:91,:,:], self.weight2_91, stride=1, padding=1, groups=1)
            out2_92 = F.conv2d(out1[:, 91:92,:,:], self.weight2_92, stride=1, padding=1, groups=1)
            out2_93 = F.conv2d(out1[:, 92:93,:,:], self.weight2_93, stride=1, padding=1, groups=1)
            out2_94 = F.conv2d(out1[:, 93:94,:,:], self.weight2_94, stride=1, padding=1, groups=1)
            out2_95 = F.conv2d(out1[:, 94:95,:,:], self.weight2_95, stride=1, padding=1, groups=1)
            out2_96 = F.conv2d(out1[:, 95:96,:,:], self.weight2_96, stride=1, padding=1, groups=1)
            out2_97 = F.conv2d(out1[:, 96:97,:,:], self.weight2_97, stride=1, padding=1, groups=1)
            out2_98 = F.conv2d(out1[:, 97:98,:,:], self.weight2_98, stride=1, padding=1, groups=1)
            out2_99 = F.conv2d(out1[:, 98:99,:,:], self.weight2_99, stride=1, padding=1, groups=1)
            out2_100 = F.conv2d(out1[:, 99:100,:,:], self.weight2_100, stride=1, padding=1, groups=1)
            out2_101 = F.conv2d(out1[:, 100:101,:,:], self.weight2_101, stride=1, padding=1, groups=1)
            out2_102 = F.conv2d(out1[:, 101:102,:,:], self.weight2_102, stride=1, padding=1, groups=1)
            out2_103 = F.conv2d(out1[:, 102:103,:,:], self.weight2_103, stride=1, padding=1, groups=1)
            out2_104 = F.conv2d(out1[:, 103:104,:,:], self.weight2_104, stride=1, padding=1, groups=1)
            out2_105 = F.conv2d(out1[:, 104:105,:,:], self.weight2_105, stride=1, padding=1, groups=1)
            out2_106 = F.conv2d(out1[:, 105:106,:,:], self.weight2_106, stride=1, padding=1, groups=1)
            out2_107 = F.conv2d(out1[:, 106:107,:,:], self.weight2_107, stride=1, padding=1, groups=1)
            out2_108 = F.conv2d(out1[:, 107:108,:,:], self.weight2_108, stride=1, padding=1, groups=1)
            out2_109 = F.conv2d(out1[:, 108:109,:,:], self.weight2_109, stride=1, padding=1, groups=1)
            out2_110 = F.conv2d(out1[:, 109:110,:,:], self.weight2_110, stride=1, padding=1, groups=1)
            out2_111 = F.conv2d(out1[:, 110:111,:,:], self.weight2_111, stride=1, padding=1, groups=1)
            out2_112 = F.conv2d(out1[:, 111:112,:,:], self.weight2_112, stride=1, padding=1, groups=1)
            out2_113 = F.conv2d(out1[:, 112:113,:,:], self.weight2_113, stride=1, padding=1, groups=1)
            out2_114 = F.conv2d(out1[:, 113:114,:,:], self.weight2_114, stride=1, padding=1, groups=1)
            out2_115 = F.conv2d(out1[:, 114:115,:,:], self.weight2_115, stride=1, padding=1, groups=1)
            out2_116 = F.conv2d(out1[:, 115:116,:,:], self.weight2_116, stride=1, padding=1, groups=1)
            out2_117 = F.conv2d(out1[:, 116:117,:,:], self.weight2_117, stride=1, padding=1, groups=1)
            out2_118 = F.conv2d(out1[:, 117:118,:,:], self.weight2_118, stride=1, padding=1, groups=1)
            out2_119 = F.conv2d(out1[:, 118:119,:,:], self.weight2_119, stride=1, padding=1, groups=1)
            out2_120 = F.conv2d(out1[:, 119:120,:,:], self.weight2_120, stride=1, padding=1, groups=1)
            out2_121 = F.conv2d(out1[:, 120:121,:,:], self.weight2_121, stride=1, padding=1, groups=1)
            out2_122 = F.conv2d(out1[:, 121:122,:,:], self.weight2_122, stride=1, padding=1, groups=1)
            out2_123 = F.conv2d(out1[:, 122:123,:,:], self.weight2_123, stride=1, padding=1, groups=1)
            out2_124 = F.conv2d(out1[:, 123:124,:,:], self.weight2_124, stride=1, padding=1, groups=1)
            out2_125 = F.conv2d(out1[:, 124:125,:,:], self.weight2_125, stride=1, padding=1, groups=1)
            out2_126 = F.conv2d(out1[:, 125:126,:,:], self.weight2_126, stride=1, padding=1, groups=1)
            out2_127 = F.conv2d(out1[:, 126:127,:,:], self.weight2_127, stride=1, padding=1, groups=1)
            out2_128 = F.conv2d(out1[:, 127:128,:,:], self.weight2_128, stride=1, padding=1, groups=1)
            out2_129 = F.conv2d(out1[:, 128:129,:,:], self.weight2_129, stride=1, padding=1, groups=1)
            out2_130 = F.conv2d(out1[:, 129:130,:,:], self.weight2_130, stride=1, padding=1, groups=1)
            out2_131 = F.conv2d(out1[:, 130:131,:,:], self.weight2_131, stride=1, padding=1, groups=1)
            out2_132 = F.conv2d(out1[:, 131:132,:,:], self.weight2_132, stride=1, padding=1, groups=1)
            out2_133 = F.conv2d(out1[:, 132:133,:,:], self.weight2_133, stride=1, padding=1, groups=1)
            out2_134 = F.conv2d(out1[:, 133:134,:,:], self.weight2_134, stride=1, padding=1, groups=1)
            out2_135 = F.conv2d(out1[:, 134:135,:,:], self.weight2_135, stride=1, padding=1, groups=1)
            out2_136 = F.conv2d(out1[:, 135:136,:,:], self.weight2_136, stride=1, padding=1, groups=1)
            out2_137 = F.conv2d(out1[:, 136:137,:,:], self.weight2_137, stride=1, padding=1, groups=1)
            out2_138 = F.conv2d(out1[:, 137:138,:,:], self.weight2_138, stride=1, padding=1, groups=1)
            out2_139 = F.conv2d(out1[:, 138:139,:,:], self.weight2_139, stride=1, padding=1, groups=1)
            out2_140 = F.conv2d(out1[:, 139:140,:,:], self.weight2_140, stride=1, padding=1, groups=1)
            out2_141 = F.conv2d(out1[:, 140:141,:,:], self.weight2_141, stride=1, padding=1, groups=1)
            out2_142 = F.conv2d(out1[:, 141:142,:,:], self.weight2_142, stride=1, padding=1, groups=1)
            out2_143 = F.conv2d(out1[:, 142:143,:,:], self.weight2_143, stride=1, padding=1, groups=1)
            out2_144 = F.conv2d(out1[:, 143:144,:,:], self.weight2_144, stride=1, padding=1, groups=1)
            out2_145 = F.conv2d(out1[:, 144:145,:,:], self.weight2_145, stride=1, padding=1, groups=1)
            out2_146 = F.conv2d(out1[:, 145:146,:,:], self.weight2_146, stride=1, padding=1, groups=1)
            out2_147 = F.conv2d(out1[:, 146:147,:,:], self.weight2_147, stride=1, padding=1, groups=1)
            out2_148 = F.conv2d(out1[:, 147:148,:,:], self.weight2_148, stride=1, padding=1, groups=1)
            out2_149 = F.conv2d(out1[:, 148:149,:,:], self.weight2_149, stride=1, padding=1, groups=1)
            out2_150 = F.conv2d(out1[:, 149:150,:,:], self.weight2_150, stride=1, padding=1, groups=1)
            out2_151 = F.conv2d(out1[:, 150:151,:,:], self.weight2_151, stride=1, padding=1, groups=1)
            out2_152 = F.conv2d(out1[:, 151:152,:,:], self.weight2_152, stride=1, padding=1, groups=1)
            out2_153 = F.conv2d(out1[:, 152:153,:,:], self.weight2_153, stride=1, padding=1, groups=1)
            out2_154 = F.conv2d(out1[:, 153:154,:,:], self.weight2_154, stride=1, padding=1, groups=1)
            out2_155 = F.conv2d(out1[:, 154:155,:,:], self.weight2_155, stride=1, padding=1, groups=1)
            out2_156 = F.conv2d(out1[:, 155:156,:,:], self.weight2_156, stride=1, padding=1, groups=1)
            out2_157 = F.conv2d(out1[:, 156:157,:,:], self.weight2_157, stride=1, padding=1, groups=1)
            out2_158 = F.conv2d(out1[:, 157:158,:,:], self.weight2_158, stride=1, padding=1, groups=1)
            out2_159 = F.conv2d(out1[:, 158:159,:,:], self.weight2_159, stride=1, padding=1, groups=1)
            out2_160 = F.conv2d(out1[:, 159:160,:,:], self.weight2_160, stride=1, padding=1, groups=1)
            out2_161 = F.conv2d(out1[:, 160:161,:,:], self.weight2_161, stride=1, padding=1, groups=1)
            out2_162 = F.conv2d(out1[:, 161:162,:,:], self.weight2_162, stride=1, padding=1, groups=1)
            out2_163 = F.conv2d(out1[:, 162:163,:,:], self.weight2_163, stride=1, padding=1, groups=1)
            out2_164 = F.conv2d(out1[:, 163:164,:,:], self.weight2_164, stride=1, padding=1, groups=1)
            out2_165 = F.conv2d(out1[:, 164:165,:,:], self.weight2_165, stride=1, padding=1, groups=1)
            out2_166 = F.conv2d(out1[:, 165:166,:,:], self.weight2_166, stride=1, padding=1, groups=1)
            out2_167 = F.conv2d(out1[:, 166:167,:,:], self.weight2_167, stride=1, padding=1, groups=1)
            out2_168 = F.conv2d(out1[:, 167:168,:,:], self.weight2_168, stride=1, padding=1, groups=1)
            out2_169 = F.conv2d(out1[:, 168:169,:,:], self.weight2_169, stride=1, padding=1, groups=1)
            out2_170 = F.conv2d(out1[:, 169:170,:,:], self.weight2_170, stride=1, padding=1, groups=1)
            out2_171 = F.conv2d(out1[:, 170:171,:,:], self.weight2_171, stride=1, padding=1, groups=1)
            out2_172 = F.conv2d(out1[:, 171:172,:,:], self.weight2_172, stride=1, padding=1, groups=1)
            out2_173 = F.conv2d(out1[:, 172:173,:,:], self.weight2_173, stride=1, padding=1, groups=1)
            out2_174 = F.conv2d(out1[:, 173:174,:,:], self.weight2_174, stride=1, padding=1, groups=1)
            out2_175 = F.conv2d(out1[:, 174:175,:,:], self.weight2_175, stride=1, padding=1, groups=1)
            out2_176 = F.conv2d(out1[:, 175:176,:,:], self.weight2_176, stride=1, padding=1, groups=1)
            out2_177 = F.conv2d(out1[:, 176:177,:,:], self.weight2_177, stride=1, padding=1, groups=1)
            out2_178 = F.conv2d(out1[:, 177:178,:,:], self.weight2_178, stride=1, padding=1, groups=1)
            out2_179 = F.conv2d(out1[:, 178:179,:,:], self.weight2_179, stride=1, padding=1, groups=1)
            out2_180 = F.conv2d(out1[:, 179:180,:,:], self.weight2_180, stride=1, padding=1, groups=1)
            out2_181 = F.conv2d(out1[:, 180:181,:,:], self.weight2_181, stride=1, padding=1, groups=1)
            out2_182 = F.conv2d(out1[:, 181:182,:,:], self.weight2_182, stride=1, padding=1, groups=1)
            out2_183 = F.conv2d(out1[:, 182:183,:,:], self.weight2_183, stride=1, padding=1, groups=1)
            out2_184 = F.conv2d(out1[:, 183:184,:,:], self.weight2_184, stride=1, padding=1, groups=1)
            out2_185 = F.conv2d(out1[:, 184:185,:,:], self.weight2_185, stride=1, padding=1, groups=1)
            out2_186 = F.conv2d(out1[:, 185:186,:,:], self.weight2_186, stride=1, padding=1, groups=1)
            out2_187 = F.conv2d(out1[:, 186:187,:,:], self.weight2_187, stride=1, padding=1, groups=1)
            out2_188 = F.conv2d(out1[:, 187:188,:,:], self.weight2_188, stride=1, padding=1, groups=1)
            out2_189 = F.conv2d(out1[:, 188:189,:,:], self.weight2_189, stride=1, padding=1, groups=1)
            out2_190 = F.conv2d(out1[:, 189:190,:,:], self.weight2_190, stride=1, padding=1, groups=1)
            out2_191 = F.conv2d(out1[:, 190:191,:,:], self.weight2_191, stride=1, padding=1, groups=1)
            out2_192 = F.conv2d(out1[:, 191:192,:,:], self.weight2_192, stride=1, padding=1, groups=1)
            out2_193 = F.conv2d(out1[:, 192:193,:,:], self.weight2_193, stride=1, padding=1, groups=1)
            out2_194 = F.conv2d(out1[:, 193:194,:,:], self.weight2_194, stride=1, padding=1, groups=1)
            out2_195 = F.conv2d(out1[:, 194:195,:,:], self.weight2_195, stride=1, padding=1, groups=1)
            out2_196 = F.conv2d(out1[:, 195:196,:,:], self.weight2_196, stride=1, padding=1, groups=1)
            out2_197 = F.conv2d(out1[:, 196:197,:,:], self.weight2_197, stride=1, padding=1, groups=1)
            out2_198 = F.conv2d(out1[:, 197:198,:,:], self.weight2_198, stride=1, padding=1, groups=1)
            out2_199 = F.conv2d(out1[:, 198:199,:,:], self.weight2_199, stride=1, padding=1, groups=1)
            out2_200 = F.conv2d(out1[:, 199:200,:,:], self.weight2_200, stride=1, padding=1, groups=1)
            out2_201 = F.conv2d(out1[:, 200:201,:,:], self.weight2_201, stride=1, padding=1, groups=1)
            out2_202 = F.conv2d(out1[:, 201:202,:,:], self.weight2_202, stride=1, padding=1, groups=1)
            out2_203 = F.conv2d(out1[:, 202:203,:,:], self.weight2_203, stride=1, padding=1, groups=1)
            out2_204 = F.conv2d(out1[:, 203:204,:,:], self.weight2_204, stride=1, padding=1, groups=1)
            out2_205 = F.conv2d(out1[:, 204:205,:,:], self.weight2_205, stride=1, padding=1, groups=1)
            out2_206 = F.conv2d(out1[:, 205:206,:,:], self.weight2_206, stride=1, padding=1, groups=1)
            out2_207 = F.conv2d(out1[:, 206:207,:,:], self.weight2_207, stride=1, padding=1, groups=1)
            out2_208 = F.conv2d(out1[:, 207:208,:,:], self.weight2_208, stride=1, padding=1, groups=1)
            out2_209 = F.conv2d(out1[:, 208:209,:,:], self.weight2_209, stride=1, padding=1, groups=1)
            out2_210 = F.conv2d(out1[:, 209:210,:,:], self.weight2_210, stride=1, padding=1, groups=1)
            out2_211 = F.conv2d(out1[:, 210:211,:,:], self.weight2_211, stride=1, padding=1, groups=1)
            out2_212 = F.conv2d(out1[:, 211:212,:,:], self.weight2_212, stride=1, padding=1, groups=1)
            out2_213 = F.conv2d(out1[:, 212:213,:,:], self.weight2_213, stride=1, padding=1, groups=1)
            out2_214 = F.conv2d(out1[:, 213:214,:,:], self.weight2_214, stride=1, padding=1, groups=1)
            out2_215 = F.conv2d(out1[:, 214:215,:,:], self.weight2_215, stride=1, padding=1, groups=1)
            out2_216 = F.conv2d(out1[:, 215:216,:,:], self.weight2_216, stride=1, padding=1, groups=1)
            out2_217 = F.conv2d(out1[:, 216:217,:,:], self.weight2_217, stride=1, padding=1, groups=1)
            out2_218 = F.conv2d(out1[:, 217:218,:,:], self.weight2_218, stride=1, padding=1, groups=1)
            out2_219 = F.conv2d(out1[:, 218:219,:,:], self.weight2_219, stride=1, padding=1, groups=1)
            out2_220 = F.conv2d(out1[:, 219:220,:,:], self.weight2_220, stride=1, padding=1, groups=1)
            out2_221 = F.conv2d(out1[:, 220:221,:,:], self.weight2_221, stride=1, padding=1, groups=1)
            out2_222 = F.conv2d(out1[:, 221:222,:,:], self.weight2_222, stride=1, padding=1, groups=1)
            out2_223 = F.conv2d(out1[:, 222:223,:,:], self.weight2_223, stride=1, padding=1, groups=1)
            out2_224 = F.conv2d(out1[:, 223:224,:,:], self.weight2_224, stride=1, padding=1, groups=1)
            out2_225 = F.conv2d(out1[:, 224:225,:,:], self.weight2_225, stride=1, padding=1, groups=1)
            out2_226 = F.conv2d(out1[:, 225:226,:,:], self.weight2_226, stride=1, padding=1, groups=1)
            out2_227 = F.conv2d(out1[:, 226:227,:,:], self.weight2_227, stride=1, padding=1, groups=1)
            out2_228 = F.conv2d(out1[:, 227:228,:,:], self.weight2_228, stride=1, padding=1, groups=1)
            out2_229 = F.conv2d(out1[:, 228:229,:,:], self.weight2_229, stride=1, padding=1, groups=1)
            out2_230 = F.conv2d(out1[:, 229:230,:,:], self.weight2_230, stride=1, padding=1, groups=1)
            out2_231 = F.conv2d(out1[:, 230:231,:,:], self.weight2_231, stride=1, padding=1, groups=1)
            out2_232 = F.conv2d(out1[:, 231:232,:,:], self.weight2_232, stride=1, padding=1, groups=1)
            out2_233 = F.conv2d(out1[:, 232:233,:,:], self.weight2_233, stride=1, padding=1, groups=1)
            out2_234 = F.conv2d(out1[:, 233:234,:,:], self.weight2_234, stride=1, padding=1, groups=1)
            out2_235 = F.conv2d(out1[:, 234:235,:,:], self.weight2_235, stride=1, padding=1, groups=1)
            out2_236 = F.conv2d(out1[:, 235:236,:,:], self.weight2_236, stride=1, padding=1, groups=1)
            out2_237 = F.conv2d(out1[:, 236:237,:,:], self.weight2_237, stride=1, padding=1, groups=1)
            out2_238 = F.conv2d(out1[:, 237:238,:,:], self.weight2_238, stride=1, padding=1, groups=1)
            out2_239 = F.conv2d(out1[:, 238:239,:,:], self.weight2_239, stride=1, padding=1, groups=1)
            out2_240 = F.conv2d(out1[:, 239:240,:,:], self.weight2_240, stride=1, padding=1, groups=1)
            out2_241 = F.conv2d(out1[:, 240:241,:,:], self.weight2_241, stride=1, padding=1, groups=1)
            out2_242 = F.conv2d(out1[:, 241:242,:,:], self.weight2_242, stride=1, padding=1, groups=1)
            out2_243 = F.conv2d(out1[:, 242:243,:,:], self.weight2_243, stride=1, padding=1, groups=1)
            out2_244 = F.conv2d(out1[:, 243:244,:,:], self.weight2_244, stride=1, padding=1, groups=1)
            out2_245 = F.conv2d(out1[:, 244:245,:,:], self.weight2_245, stride=1, padding=1, groups=1)
            out2_246 = F.conv2d(out1[:, 245:246,:,:], self.weight2_246, stride=1, padding=1, groups=1)
            out2_247 = F.conv2d(out1[:, 246:247,:,:], self.weight2_247, stride=1, padding=1, groups=1)
            out2_248 = F.conv2d(out1[:, 247:248,:,:], self.weight2_248, stride=1, padding=1, groups=1)
            out2_249 = F.conv2d(out1[:, 248:249,:,:], self.weight2_249, stride=1, padding=1, groups=1)
            out2_250 = F.conv2d(out1[:, 249:250,:,:], self.weight2_250, stride=1, padding=1, groups=1)
            out2_251 = F.conv2d(out1[:, 250:251,:,:], self.weight2_251, stride=1, padding=1, groups=1)
            out2_252 = F.conv2d(out1[:, 251:252,:,:], self.weight2_252, stride=1, padding=1, groups=1)
            out2_253 = F.conv2d(out1[:, 252:253,:,:], self.weight2_253, stride=1, padding=1, groups=1)
            out2_254 = F.conv2d(out1[:, 253:254,:,:], self.weight2_254, stride=1, padding=1, groups=1)
            out2_255 = F.conv2d(out1[:, 254:255,:,:], self.weight2_255, stride=1, padding=1, groups=1)
            out2_256 = F.conv2d(out1[:, 255:256,:,:], self.weight2_256, stride=1, padding=1, groups=1)
            out2_257 = F.conv2d(out1[:, 256:257,:,:], self.weight2_257, stride=1, padding=1, groups=1)
            out2_258 = F.conv2d(out1[:, 257:258,:,:], self.weight2_258, stride=1, padding=1, groups=1)
            out2_259 = F.conv2d(out1[:, 258:259,:,:], self.weight2_259, stride=1, padding=1, groups=1)
            out2_260 = F.conv2d(out1[:, 259:260,:,:], self.weight2_260, stride=1, padding=1, groups=1)
            out2_261 = F.conv2d(out1[:, 260:261,:,:], self.weight2_261, stride=1, padding=1, groups=1)
            out2_262 = F.conv2d(out1[:, 261:262,:,:], self.weight2_262, stride=1, padding=1, groups=1)
            out2_263 = F.conv2d(out1[:, 262:263,:,:], self.weight2_263, stride=1, padding=1, groups=1)
            out2_264 = F.conv2d(out1[:, 263:264,:,:], self.weight2_264, stride=1, padding=1, groups=1)
            out2_265 = F.conv2d(out1[:, 264:265,:,:], self.weight2_265, stride=1, padding=1, groups=1)
            out2_266 = F.conv2d(out1[:, 265:266,:,:], self.weight2_266, stride=1, padding=1, groups=1)
            out2_267 = F.conv2d(out1[:, 266:267,:,:], self.weight2_267, stride=1, padding=1, groups=1)
            out2_268 = F.conv2d(out1[:, 267:268,:,:], self.weight2_268, stride=1, padding=1, groups=1)
            out2_269 = F.conv2d(out1[:, 268:269,:,:], self.weight2_269, stride=1, padding=1, groups=1)
            out2_270 = F.conv2d(out1[:, 269:270,:,:], self.weight2_270, stride=1, padding=1, groups=1)
            out2_271 = F.conv2d(out1[:, 270:271,:,:], self.weight2_271, stride=1, padding=1, groups=1)
            out2_272 = F.conv2d(out1[:, 271:272,:,:], self.weight2_272, stride=1, padding=1, groups=1)
            out2_273 = F.conv2d(out1[:, 272:273,:,:], self.weight2_273, stride=1, padding=1, groups=1)
            out2_274 = F.conv2d(out1[:, 273:274,:,:], self.weight2_274, stride=1, padding=1, groups=1)
            out2_275 = F.conv2d(out1[:, 274:275,:,:], self.weight2_275, stride=1, padding=1, groups=1)
            out2_276 = F.conv2d(out1[:, 275:276,:,:], self.weight2_276, stride=1, padding=1, groups=1)
            out2_277 = F.conv2d(out1[:, 276:277,:,:], self.weight2_277, stride=1, padding=1, groups=1)
            out2_278 = F.conv2d(out1[:, 277:278,:,:], self.weight2_278, stride=1, padding=1, groups=1)
            out2_279 = F.conv2d(out1[:, 278:279,:,:], self.weight2_279, stride=1, padding=1, groups=1)
            out2_280 = F.conv2d(out1[:, 279:280,:,:], self.weight2_280, stride=1, padding=1, groups=1)
            out2_281 = F.conv2d(out1[:, 280:281,:,:], self.weight2_281, stride=1, padding=1, groups=1)
            out2_282 = F.conv2d(out1[:, 281:282,:,:], self.weight2_282, stride=1, padding=1, groups=1)
            out2_283 = F.conv2d(out1[:, 282:283,:,:], self.weight2_283, stride=1, padding=1, groups=1)
            out2_284 = F.conv2d(out1[:, 283:284,:,:], self.weight2_284, stride=1, padding=1, groups=1)
            out2_285 = F.conv2d(out1[:, 284:285,:,:], self.weight2_285, stride=1, padding=1, groups=1)
            out2_286 = F.conv2d(out1[:, 285:286,:,:], self.weight2_286, stride=1, padding=1, groups=1)
            out2_287 = F.conv2d(out1[:, 286:287,:,:], self.weight2_287, stride=1, padding=1, groups=1)
            out2_288 = F.conv2d(out1[:, 287:288,:,:], self.weight2_288, stride=1, padding=1, groups=1)
            out2_289 = F.conv2d(out1[:, 288:289,:,:], self.weight2_289, stride=1, padding=1, groups=1)
            out2_290 = F.conv2d(out1[:, 289:290,:,:], self.weight2_290, stride=1, padding=1, groups=1)
            out2_291 = F.conv2d(out1[:, 290:291,:,:], self.weight2_291, stride=1, padding=1, groups=1)
            out2_292 = F.conv2d(out1[:, 291:292,:,:], self.weight2_292, stride=1, padding=1, groups=1)
            out2_293 = F.conv2d(out1[:, 292:293,:,:], self.weight2_293, stride=1, padding=1, groups=1)
            out2_294 = F.conv2d(out1[:, 293:294,:,:], self.weight2_294, stride=1, padding=1, groups=1)
            out2_295 = F.conv2d(out1[:, 294:295,:,:], self.weight2_295, stride=1, padding=1, groups=1)
            out2_296 = F.conv2d(out1[:, 295:296,:,:], self.weight2_296, stride=1, padding=1, groups=1)
            out2_297 = F.conv2d(out1[:, 296:297,:,:], self.weight2_297, stride=1, padding=1, groups=1)
            out2_298 = F.conv2d(out1[:, 297:298,:,:], self.weight2_298, stride=1, padding=1, groups=1)
            out2_299 = F.conv2d(out1[:, 298:299,:,:], self.weight2_299, stride=1, padding=1, groups=1)
            out2_300 = F.conv2d(out1[:, 299:300,:,:], self.weight2_300, stride=1, padding=1, groups=1)
            out2_301 = F.conv2d(out1[:, 300:301,:,:], self.weight2_301, stride=1, padding=1, groups=1)
            out2_302 = F.conv2d(out1[:, 301:302,:,:], self.weight2_302, stride=1, padding=1, groups=1)
            out2_303 = F.conv2d(out1[:, 302:303,:,:], self.weight2_303, stride=1, padding=1, groups=1)
            out2_304 = F.conv2d(out1[:, 303:304,:,:], self.weight2_304, stride=1, padding=1, groups=1)
            out2_305 = F.conv2d(out1[:, 304:305,:,:], self.weight2_305, stride=1, padding=1, groups=1)
            out2_306 = F.conv2d(out1[:, 305:306,:,:], self.weight2_306, stride=1, padding=1, groups=1)
            out2_307 = F.conv2d(out1[:, 306:307,:,:], self.weight2_307, stride=1, padding=1, groups=1)
            out2_308 = F.conv2d(out1[:, 307:308,:,:], self.weight2_308, stride=1, padding=1, groups=1)
            out2_309 = F.conv2d(out1[:, 308:309,:,:], self.weight2_309, stride=1, padding=1, groups=1)
            out2_310 = F.conv2d(out1[:, 309:310,:,:], self.weight2_310, stride=1, padding=1, groups=1)
            out2_311 = F.conv2d(out1[:, 310:311,:,:], self.weight2_311, stride=1, padding=1, groups=1)
            out2_312 = F.conv2d(out1[:, 311:312,:,:], self.weight2_312, stride=1, padding=1, groups=1)
            out2_313 = F.conv2d(out1[:, 312:313,:,:], self.weight2_313, stride=1, padding=1, groups=1)
            out2_314 = F.conv2d(out1[:, 313:314,:,:], self.weight2_314, stride=1, padding=1, groups=1)
            out2_315 = F.conv2d(out1[:, 314:315,:,:], self.weight2_315, stride=1, padding=1, groups=1)
            out2_316 = F.conv2d(out1[:, 315:316,:,:], self.weight2_316, stride=1, padding=1, groups=1)
            out2_317 = F.conv2d(out1[:, 316:317,:,:], self.weight2_317, stride=1, padding=1, groups=1)
            out2_318 = F.conv2d(out1[:, 317:318,:,:], self.weight2_318, stride=1, padding=1, groups=1)
            out2_319 = F.conv2d(out1[:, 318:319,:,:], self.weight2_319, stride=1, padding=1, groups=1)
            out2_320 = F.conv2d(out1[:, 319:320,:,:], self.weight2_320, stride=1, padding=1, groups=1)
            out2_321 = F.conv2d(out1[:, 320:321,:,:], self.weight2_321, stride=1, padding=1, groups=1)
            out2_322 = F.conv2d(out1[:, 321:322,:,:], self.weight2_322, stride=1, padding=1, groups=1)
            out2_323 = F.conv2d(out1[:, 322:323,:,:], self.weight2_323, stride=1, padding=1, groups=1)
            out2_324 = F.conv2d(out1[:, 323:324,:,:], self.weight2_324, stride=1, padding=1, groups=1)
            out2_325 = F.conv2d(out1[:, 324:325,:,:], self.weight2_325, stride=1, padding=1, groups=1)
            out2_326 = F.conv2d(out1[:, 325:326,:,:], self.weight2_326, stride=1, padding=1, groups=1)
            out2_327 = F.conv2d(out1[:, 326:327,:,:], self.weight2_327, stride=1, padding=1, groups=1)
            out2_328 = F.conv2d(out1[:, 327:328,:,:], self.weight2_328, stride=1, padding=1, groups=1)
            out2_329 = F.conv2d(out1[:, 328:329,:,:], self.weight2_329, stride=1, padding=1, groups=1)
            out2_330 = F.conv2d(out1[:, 329:330,:,:], self.weight2_330, stride=1, padding=1, groups=1)
            out2_331 = F.conv2d(out1[:, 330:331,:,:], self.weight2_331, stride=1, padding=1, groups=1)
            out2_332 = F.conv2d(out1[:, 331:332,:,:], self.weight2_332, stride=1, padding=1, groups=1)
            out2_333 = F.conv2d(out1[:, 332:333,:,:], self.weight2_333, stride=1, padding=1, groups=1)
            out2_334 = F.conv2d(out1[:, 333:334,:,:], self.weight2_334, stride=1, padding=1, groups=1)
            out2_335 = F.conv2d(out1[:, 334:335,:,:], self.weight2_335, stride=1, padding=1, groups=1)
            out2_336 = F.conv2d(out1[:, 335:336,:,:], self.weight2_336, stride=1, padding=1, groups=1)
            out2_337 = F.conv2d(out1[:, 336:337,:,:], self.weight2_337, stride=1, padding=1, groups=1)
            out2_338 = F.conv2d(out1[:, 337:338,:,:], self.weight2_338, stride=1, padding=1, groups=1)
            out2_339 = F.conv2d(out1[:, 338:339,:,:], self.weight2_339, stride=1, padding=1, groups=1)
            out2_340 = F.conv2d(out1[:, 339:340,:,:], self.weight2_340, stride=1, padding=1, groups=1)
            out2_341 = F.conv2d(out1[:, 340:341,:,:], self.weight2_341, stride=1, padding=1, groups=1)
            out2_342 = F.conv2d(out1[:, 341:342,:,:], self.weight2_342, stride=1, padding=1, groups=1)
            out2_343 = F.conv2d(out1[:, 342:343,:,:], self.weight2_343, stride=1, padding=1, groups=1)
            out2_344 = F.conv2d(out1[:, 343:344,:,:], self.weight2_344, stride=1, padding=1, groups=1)
            out2_345 = F.conv2d(out1[:, 344:345,:,:], self.weight2_345, stride=1, padding=1, groups=1)
            out2_346 = F.conv2d(out1[:, 345:346,:,:], self.weight2_346, stride=1, padding=1, groups=1)
            out2_347 = F.conv2d(out1[:, 346:347,:,:], self.weight2_347, stride=1, padding=1, groups=1)
            out2_348 = F.conv2d(out1[:, 347:348,:,:], self.weight2_348, stride=1, padding=1, groups=1)
            out2_349 = F.conv2d(out1[:, 348:349,:,:], self.weight2_349, stride=1, padding=1, groups=1)
            out2_350 = F.conv2d(out1[:, 349:350,:,:], self.weight2_350, stride=1, padding=1, groups=1)
            out2_351 = F.conv2d(out1[:, 350:351,:,:], self.weight2_351, stride=1, padding=1, groups=1)
            out2_352 = F.conv2d(out1[:, 351:352,:,:], self.weight2_352, stride=1, padding=1, groups=1)
            out2_353 = F.conv2d(out1[:, 352:353,:,:], self.weight2_353, stride=1, padding=1, groups=1)
            out2_354 = F.conv2d(out1[:, 353:354,:,:], self.weight2_354, stride=1, padding=1, groups=1)
            out2_355 = F.conv2d(out1[:, 354:355,:,:], self.weight2_355, stride=1, padding=1, groups=1)
            out2_356 = F.conv2d(out1[:, 355:356,:,:], self.weight2_356, stride=1, padding=1, groups=1)
            out2_357 = F.conv2d(out1[:, 356:357,:,:], self.weight2_357, stride=1, padding=1, groups=1)
            out2_358 = F.conv2d(out1[:, 357:358,:,:], self.weight2_358, stride=1, padding=1, groups=1)
            out2_359 = F.conv2d(out1[:, 358:359,:,:], self.weight2_359, stride=1, padding=1, groups=1)
            out2_360 = F.conv2d(out1[:, 359:360,:,:], self.weight2_360, stride=1, padding=1, groups=1)
            out2_361 = F.conv2d(out1[:, 360:361,:,:], self.weight2_361, stride=1, padding=1, groups=1)
            out2_362 = F.conv2d(out1[:, 361:362,:,:], self.weight2_362, stride=1, padding=1, groups=1)
            out2_363 = F.conv2d(out1[:, 362:363,:,:], self.weight2_363, stride=1, padding=1, groups=1)
            out2_364 = F.conv2d(out1[:, 363:364,:,:], self.weight2_364, stride=1, padding=1, groups=1)
            out2_365 = F.conv2d(out1[:, 364:365,:,:], self.weight2_365, stride=1, padding=1, groups=1)
            out2_366 = F.conv2d(out1[:, 365:366,:,:], self.weight2_366, stride=1, padding=1, groups=1)
            out2_367 = F.conv2d(out1[:, 366:367,:,:], self.weight2_367, stride=1, padding=1, groups=1)
            out2_368 = F.conv2d(out1[:, 367:368,:,:], self.weight2_368, stride=1, padding=1, groups=1)
            out2_369 = F.conv2d(out1[:, 368:369,:,:], self.weight2_369, stride=1, padding=1, groups=1)
            out2_370 = F.conv2d(out1[:, 369:370,:,:], self.weight2_370, stride=1, padding=1, groups=1)
            out2_371 = F.conv2d(out1[:, 370:371,:,:], self.weight2_371, stride=1, padding=1, groups=1)
            out2_372 = F.conv2d(out1[:, 371:372,:,:], self.weight2_372, stride=1, padding=1, groups=1)
            out2_373 = F.conv2d(out1[:, 372:373,:,:], self.weight2_373, stride=1, padding=1, groups=1)
            out2_374 = F.conv2d(out1[:, 373:374,:,:], self.weight2_374, stride=1, padding=1, groups=1)
            out2_375 = F.conv2d(out1[:, 374:375,:,:], self.weight2_375, stride=1, padding=1, groups=1)
            out2_376 = F.conv2d(out1[:, 375:376,:,:], self.weight2_376, stride=1, padding=1, groups=1)
            out2_377 = F.conv2d(out1[:, 376:377,:,:], self.weight2_377, stride=1, padding=1, groups=1)
            out2_378 = F.conv2d(out1[:, 377:378,:,:], self.weight2_378, stride=1, padding=1, groups=1)
            out2_379 = F.conv2d(out1[:, 378:379,:,:], self.weight2_379, stride=1, padding=1, groups=1)
            out2_380 = F.conv2d(out1[:, 379:380,:,:], self.weight2_380, stride=1, padding=1, groups=1)
            out2_381 = F.conv2d(out1[:, 380:381,:,:], self.weight2_381, stride=1, padding=1, groups=1)
            out2_382 = F.conv2d(out1[:, 381:382,:,:], self.weight2_382, stride=1, padding=1, groups=1)
            out2_383 = F.conv2d(out1[:, 382:383,:,:], self.weight2_383, stride=1, padding=1, groups=1)
            out2_384 = F.conv2d(out1[:, 383:384,:,:], self.weight2_384, stride=1, padding=1, groups=1)

            out2 = torch.cat([out2_1, out2_2, out2_3, out2_4, out2_5, out2_6, out2_7, out2_8, out2_9, out2_10,
                    out2_11, out2_12, out2_13, out2_14, out2_15, out2_16, out2_17, out2_18, out2_19, out2_20,
                    out2_21, out2_22, out2_23, out2_24, out2_25, out2_26, out2_27, out2_28, out2_29, out2_30,
                    out2_31, out2_32, out2_33, out2_34, out2_35, out2_36, out2_37, out2_38, out2_39, out2_40,
                    out2_41, out2_42, out2_43, out2_44, out2_45, out2_46, out2_47, out2_48, out2_49, out2_50,
                    out2_51, out2_52, out2_53, out2_54, out2_55, out2_56, out2_57, out2_58, out2_59, out2_60,
                    out2_61, out2_62, out2_63, out2_64, out2_65, out2_66, out2_67, out2_68, out2_69, out2_70,
                    out2_71, out2_72, out2_73, out2_74, out2_75, out2_76, out2_77, out2_78, out2_79, out2_80,
                    out2_81, out2_82, out2_83, out2_84, out2_85, out2_86, out2_87, out2_88, out2_89, out2_90,
                    out2_91, out2_92, out2_93, out2_94, out2_95, out2_96, out2_97, out2_98, out2_99, out2_100,
                    out2_101, out2_102, out2_103, out2_104, out2_105, out2_106, out2_107, out2_108, out2_109, out2_110,
                    out2_111, out2_112, out2_113, out2_114, out2_115, out2_116, out2_117, out2_118, out2_119, out2_120,
                    out2_121, out2_122, out2_123, out2_124, out2_125, out2_126, out2_127, out2_128, out2_129, out2_130,
                    out2_131, out2_132, out2_133, out2_134, out2_135, out2_136, out2_137, out2_138, out2_139, out2_140,
                    out2_141, out2_142, out2_143, out2_144, out2_145, out2_146, out2_147, out2_148, out2_149, out2_150,
                    out2_151, out2_152, out2_153, out2_154, out2_155, out2_156, out2_157, out2_158, out2_159, out2_160,
                    out2_161, out2_162, out2_163, out2_164, out2_165, out2_166, out2_167, out2_168, out2_169, out2_170,
                    out2_171, out2_172, out2_173, out2_174, out2_175, out2_176, out2_177, out2_178, out2_179, out2_180,
                    out2_181, out2_182, out2_183, out2_184, out2_185, out2_186, out2_187, out2_188, out2_189, out2_190,
                    out2_191, out2_192, out2_193, out2_194, out2_195, out2_196, out2_197, out2_198, out2_199, out2_200,
                    out2_201, out2_202, out2_203, out2_204, out2_205, out2_206, out2_207, out2_208, out2_209, out2_210,
                    out2_211, out2_212, out2_213, out2_214, out2_215, out2_216, out2_217, out2_218, out2_219, out2_220,
                    out2_221, out2_222, out2_223, out2_224, out2_225, out2_226, out2_227, out2_228, out2_229, out2_230,
                    out2_231, out2_232, out2_233, out2_234, out2_235, out2_236, out2_237, out2_238, out2_239, out2_240,
                    out2_241, out2_242, out2_243, out2_244, out2_245, out2_246, out2_247, out2_248, out2_249, out2_250,
                    out2_251, out2_252, out2_253, out2_254, out2_255, out2_256, out2_257, out2_258, out2_259, out2_260,
                    out2_261, out2_262, out2_263, out2_264, out2_265, out2_266, out2_267, out2_268, out2_269, out2_270,
                    out2_271, out2_272, out2_273, out2_274, out2_275, out2_276, out2_277, out2_278, out2_279, out2_280,
                    out2_281, out2_282, out2_283, out2_284, out2_285, out2_286, out2_287, out2_288, out2_289, out2_290,
                    out2_291, out2_292, out2_293, out2_294, out2_295, out2_296, out2_297, out2_298, out2_299, out2_300,
                    out2_301, out2_302, out2_303, out2_304, out2_305, out2_306, out2_307, out2_308, out2_309, out2_310,
                    out2_311, out2_312, out2_313, out2_314, out2_315, out2_316, out2_317, out2_318, out2_319, out2_320,
                    out2_321, out2_322, out2_323, out2_324, out2_325, out2_326, out2_327, out2_328, out2_329, out2_330,
                    out2_331, out2_332, out2_333, out2_334, out2_335, out2_336, out2_337, out2_338, out2_339, out2_340,
                    out2_341, out2_342, out2_343, out2_344, out2_345, out2_346, out2_347, out2_348, out2_349, out2_350,
                    out2_351, out2_352, out2_353, out2_354, out2_355, out2_356, out2_357, out2_358, out2_359, out2_360,
                    out2_361, out2_362, out2_363, out2_364, out2_365, out2_366, out2_367, out2_368, out2_369, out2_370,
                    out2_371, out2_372, out2_373, out2_374, out2_375, out2_376, out2_377, out2_378, out2_379, out2_380,
                    out2_381, out2_382, out2_383, out2_384], dim=1)

            x_pred_mask = self.bn2(out2)



        elif cfg.filter_mode not in [0,1,2,4,8,16,32, 'x']:
            raise NotImplementedError


        ### Done custimized


        x_pred_mask = torch.mul(x_pred_mask, pre_mask_c)

        if self._train:
            x_pred_mask = torch.add(x_pred_mask, pre_mask)
            x_pred_mask = torch.clamp(x_pred_mask, 0, 1)

            self.x_pred = x_pred_mask
        else:
            # pre_mask*100000 is used to differentiate the pre-computed activations from the other activations
            # for analysis. Eventually, x_pred_mask goes through a threshold anyway
            x_pred_mask = torch.add(x_pred_mask, pre_mask*100000)

            self._update_stats_pre_threshold(x, x_pred_mask)
            x_pred_mask = (x_pred_mask > self.threshold).float()
            self._update_stats_post_threshold(x, x_pred_mask, pre_mask)

            self.x_pred = None

        return x * x_pred_mask

    def _update_stats_pre_threshold(self, x, x_pred_mask):
        if cfg.STATS_MASK_VAL_HIST in self._stats:
            # Mask values histogram
            self.stats_hist['M'] += torch.histc(x_pred_mask,
                                                min=cfg.STATS_MASK_VAL_HIST_MIN,
                                                max=cfg.STATS_MASK_VAL_HIST_MAX,
                                                bins=cfg.STATS_MASK_VAL_HIST_BINS).cpu().detach().numpy()

        if cfg.STATS_ERR_TO_TH in self._stats:
            # Original output values
            self.stats_hist['_X_orig_values'] += x.sum().item()

            # For each threshold the numerator is computed
            for i, threshold in enumerate(np.around(np.arange(cfg.STATS_ERR_TO_TH_MIN,
                                                              cfg.STATS_ERR_TO_TH_MAX,
                                                              cfg.STATS_ERR_TO_TH_STEP), 2)):
                x_pred_mask_th = (x_pred_mask > threshold).float()

                # Predicted output values
                # Accumulating the numerator and denominator separately, and dividing at the end
                self.stats_hist['_X_pred_values'][i] += (x * x_pred_mask_th).sum().item()

    def _update_stats_post_threshold(self, x, x_pred_mask, pre_mask):
        if cfg.STATS_GENERAL in self._stats or cfg.STATS_MISPRED_VAL_HIST in self._stats:
            x_ideal_mask = (x > 0).float()  # Notice, this also includes the pre-mask

            # Marking the the pre-mask positions with -100 value
            x_ideal_mask_no_pre_mask = x_ideal_mask.clone().detach()
            x_ideal_mask_no_pre_mask[pre_mask == 1] = -100

            x_pred_mask_no_pre_mask = x_pred_mask.clone().detach()
            x_pred_mask_no_pre_mask[pre_mask == 1] = -100

            # A trick to differentiate the different misprediction and true prediction types
            x_mask_diff = 2 * x_ideal_mask_no_pre_mask - x_pred_mask_no_pre_mask

        if cfg.STATS_GENERAL in self._stats:
            # Total non-zero ofm activations
            self.stats['X_o>0'] += (x > 0).sum().item()
            # Total zero ofm activations
            self.stats['X_o<=0'] += (x <= 0).sum().item()

            # The number of zeroes that are computed by the mask
            self.stats['X_o[I_s]==0'] += ((x_ideal_mask - pre_mask) == -1).sum().item()
            # Remaining zeros, this is the potential
            self.stats['X_orig[I_t]==0'] = self.stats['X_o<=0'] - self.stats['X_o[I_s]==0']

            pre_computed = pre_mask.sum().item()
            # The partially computed ofm activations (|I_s|)
            self.stats['I_s'] += pre_computed
            # The remaining ofm activations to be predicted (|I_t|)
            self.stats['I_t'] += pre_mask.numel() - pre_computed
            # The number of activations to be computed, i.e., that are predicted as non-zero
            self.stats['M==1'] += (x_pred_mask > 0).sum().item() - pre_computed
            # The number of skipped activations (both mispredictions and true-predictions)
            self.stats['M==0'] += (x_pred_mask == 0).sum().item()

            # Activations that are non-zero but were predicted as zeros; may affect accuracy
            self.stats['Miss-!0->0'] += (x_mask_diff == 2).sum().item()
            # True predictions of non-zero activations as non-zero activations, i.e., need to be calculated
            self.stats['Hit-!0->!0'] += (x_mask_diff == 1).sum().item()
            # True predictions of zero activations as zero activations, i.e., no need to be calculated
            self.stats['Hit-0->0'] += (x_mask_diff == 0).sum().item()
            # Activations that are zero but were predicted as non-zero; don't affect accuracy
            self.stats['Miss-0->!0'] += (x_mask_diff == -1).sum().item()

        if cfg.STATS_MISPRED_VAL_HIST in self._stats:
            pred_nonzero_as_zero_values = (x_mask_diff == 2).float() * x
            pred_nonzero_as_zero_values = pred_nonzero_as_zero_values[pred_nonzero_as_zero_values != 0]
            if pred_nonzero_as_zero_values.sum().item() != 0:
                hist = torch.histc(pred_nonzero_as_zero_values, min=cfg.STATS_VAL_HIST_MIN,
                                   max=cfg.STATS_VAL_HIST_MAX,
                                   bins=cfg.STATS_VAL_HIST_BINS).cpu().detach().numpy()
            else:
                hist = np.zeros(int((cfg.STATS_VAL_HIST_MAX - cfg.STATS_VAL_HIST_MIN) / cfg.STATS_VAL_HIST_STEP))
            self.stats_hist['Miss-!0->0'] += hist

    def _create_mask(self, x):
        if self.mask is None:
            # Returns a 2D mask
            self.mask = self._gen_mask(type=self.mask_type, dim=x.shape)
            self.mask_c = torch.abs(self.mask - 1)  # The complementary matrix

            # Add two dimensions
            self.mask.unsqueeze_(0)
            self.mask.unsqueeze_(0)
            self.mask = self.mask.expand(x.shape[0], x.shape[1], -1, -1)

            self.mask_c.unsqueeze_(0)
            self.mask_c.unsqueeze_(0)
            self.mask_c = self.mask_c.expand(x.shape[0], x.shape[1], -1, -1)

    def disable_layer(self):
        self._disabled = True

    def enable_layer(self):
        self._disabled = False

    def disable_grad(self):
        for param in self.parameters():
            param.requires_grad = False

    def enable_grad(self):
        for param in self.parameters():
            param.requires_grad = True

    def status_grad(self):
        status = False

        for param in self.parameters():
            status = status or param.requires_grad

        return status

    def set_pattern(self, type):
        self.mask_type = type
        self.mask, self.mask_c = None, None

    def save_state(self, path):
        state = {'state_dict': self.state_dict(),
                 'mask_type': self.mask_type,
                 'threshold': self.threshold}

        torch.save(state, path)

    def load_state(self, path):
        chkp = torch.load(path)

        self.load_state_dict(chkp['state_dict'])
        self.mask_type = chkp['mask_type']
        self.threshold = chkp['threshold']

    def reset_stats(self):
        self.stats['X_o>0'] = 0
        self.stats['X_o<=0'] = 0
        self.stats['X_o[I_s]==0'] = 0
        self.stats['X_orig[I_t]==0'] = 0
        self.stats['I_s'] = 0
        self.stats['I_t'] = 0
        self.stats['M==1'] = 0
        self.stats['M==0'] = 0
        self.stats['Miss-!0->0'] = 0
        self.stats['Hit-!0->!0'] = 0
        self.stats['Hit-0->0'] = 0
        self.stats['Miss-0->!0'] = 0

        self.stats_hist['_X_orig_values'] = 0
        self.stats_hist['_X_pred_values'] = np.zeros(cfg.STATS_ERR_TO_TH_BINS)

        self.stats_hist['Miss-!0->0'] = np.zeros(cfg.STATS_VAL_HIST_BINS)
        self.stats_hist['Hit-!0->!0'] = np.zeros(cfg.STATS_VAL_HIST_BINS)
        self.stats_hist['M'] = np.zeros(cfg.STATS_MASK_VAL_HIST_BINS)
        self.stats_hist['Error'] = np.zeros(cfg.STATS_ERR_TO_TH_BINS)

    def get_stats(self):
        return list(self.stats.values()), list(self.stats.keys())

    def get_mispred_values_hist(self):
        headers = np.around(np.arange(cfg.STATS_VAL_HIST_MIN,
                                      cfg.STATS_VAL_HIST_MAX,
                                      cfg.STATS_VAL_HIST_STEP), 1).tolist()

        return self.stats_hist['Miss-!0->0'], headers

    def get_mask_values_hist(self):
        headers = np.around(np.arange(cfg.STATS_MASK_VAL_HIST_MIN,
                                      cfg.STATS_MASK_VAL_HIST_MAX,
                                      cfg.STATS_MASK_VAL_HIST_STEP), 3).tolist()

        return self.stats_hist['M'], headers

    def get_err_to_th(self):
        headers = np.around(np.arange(cfg.STATS_ERR_TO_TH_MIN,
                                      cfg.STATS_ERR_TO_TH_MAX,
                                      cfg.STATS_ERR_TO_TH_STEP), 2).tolist()

        if self.stats_hist['_X_orig_values'] == 0:
            return self.stats_hist['_X_pred_values'], headers
        else:
            return 1 - self.stats_hist['_X_pred_values'] / self.stats_hist['_X_orig_values'], headers

    def set_train(self, mode):
        self._train = mode

    def add_stats_gather(self, id):
        if id not in self._stats:
            self._stats.append(id)

    def rm_stats_gather(self):
        if id in self._stats:
            self._stats.remove(id)

    def is_disabled(self):
        return self._disabled

    def reset_layer(self):
        self.apply(self._reset_layer)

    def _reset_layer(self, m):
        if type(m) == nn.Conv2d:
            m.reset_parameters()

    def _gen_mask(self, type: int, dim):
        mask = torch.ones((dim[2], dim[3])).cuda()

        reverse = False
        if type < 5:
            type = 10 - type
            reverse = True

        if type == 5:
            mask[0::2, 1::2] = 0
            mask[1::2, 0::2] = 0
        elif type == 6:
            mask[0::5, 2::5] = 0
            mask[0::5, 4::5] = 0
            mask[1::5, 1::5] = 0
            mask[1::5, 3::5] = 0
            mask[2::5, 0::5] = 0
            mask[2::5, 2::5] = 0
            mask[3::5, 1::5] = 0
            mask[3::5, 4::5] = 0
            mask[4::5, 0::5] = 0
            mask[4::5, 3::5] = 0
        elif type == 7:
            mask[0::3, 2::3] = 0
            mask[1::3, 1::3] = 0
            mask[2::3, 0::3] = 0
        elif type == 8:
            mask[1::2, 1::2] = 0
        elif type == 9:
            mask[1::3, 1::3] = 0
            mask[2::3, 0::3] = 0
        elif type == 10:
            mask[1::3, 1::3] = 0
        else:
            raise NotImplementedError

        if reverse is True:
            mask = torch.abs(mask - 1)

        return mask


class PredNet(nn.Module):
    def __init__(self):
        super().__init__()

        # List of all spatial prediction layers
        self.pred_layers = []   # type: List(ZAP)
        self.disabled_pred_layers = []

    def forward(self, x):
        # Make it abstract
        raise NotImplementedError

    def disable_grad(self):
        for param in self.parameters():
            param.requires_grad = False

    def enable_grad(self, skip_pred=False):
        for param in self.parameters():
            param.requires_grad = True

        if skip_pred is True:
            self.disable_pred_layers_grad()

    def enable_pred_layers_grad(self):
        for layer in self.pred_layers:
            layer.enable_grad()

    def disable_pred_layers_grad(self, indices=None):
        if indices is None:
            for layer in self.pred_layers:
                layer.disable_grad()
        else:
            for idx in indices:
                self.pred_layers[idx].disable_grad()

    def disable_pred_layers(self, indices=None):
        if indices is None:
            for l in self.pred_layers:
                l.disable_layer()
        else:
            for idx in indices:
                self.pred_layers[idx].disable_layer()

    def enable_pred_layers(self):
        for idx, l in enumerate(self.pred_layers):
            if idx in self.disabled_pred_layers:
                continue

            l.enable_layer()

    def rm_all_stats_gather(self):
        for l in self.pred_layers:
            l._stats = []

    def add_stats_gather(self, stats_list):
        if stats_list is None:
            return

        for l in self.pred_layers:
            for stats in stats_list:
                l.add_stats_gather(stats)

    def disable_histograms(self):
        for l in self.pred_layers:
            l._stats_histogram = False

    def print_pred_layers_status(self):
        print("ZAPs status")

        for idx, layer in enumerate(self.pred_layers):
            status = True
            if layer._disabled is True:
                status = False

            grad_status = layer.status_grad()

            print("Feed-forward / grad {}: {} {}".format(idx, status, grad_status))

    def reset_pred_stats(self):
        for pred_layer in self.pred_layers:
            pred_layer.reset_stats()

    def set_pattern(self, pat):
        for l in self.pred_layers:
            l.set_pattern(pat)

    def set_train(self, mode):
        for l in self.pred_layers:
            l.set_train(mode)

    def update_pred_layers_list(self):
        self.apply(self._apply_list_update)

    def _apply_list_update(self, m):
        if type(m) == ZAP:
            self.pred_layers.append(m)
